[INFO ] 2020-01-19T02:47:49,082Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-024747.473/custom-cordapp_1_4_9766e26e-cdb2-4021-9cbb-5023b95ddbfd.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T02:47:49,251Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-024747.473/custom-cordapp_1_4_9766e26e-cdb2-4021-9cbb-5023b95ddbfd.jar {}
[INFO ] 2020-01-19T02:47:49,414Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T02:47:53,021Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:47:53,104Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:47:55,797Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:47:55,837Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-01-19T02:52:50,217Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-025248.430/custom-cordapp_1_4_d4105382-7255-414a-9dfd-7e0d008f7cb6.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T02:52:50,393Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-025248.430/custom-cordapp_1_4_d4105382-7255-414a-9dfd-7e0d008f7cb6.jar {}
[INFO ] 2020-01-19T02:52:50,560Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T02:52:54,550Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:52:54,599Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:52:56,522Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:52:56,559Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-01-19T02:53:14,551Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-025312.821/custom-cordapp_1_4_7b291da5-3c44-4ec0-b83a-53a8ce9067e5.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T02:53:14,719Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-025312.821/custom-cordapp_1_4_7b291da5-3c44-4ec0-b83a-53a8ce9067e5.jar {}
[INFO ] 2020-01-19T02:53:14,882Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-19T02:54:30,262Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-025428.645/custom-cordapp_1_4_e1f54a17-4104-421b-973a-84c66fcda215.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T02:54:30,425Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-025428.645/custom-cordapp_1_4_e1f54a17-4104-421b-973a-84c66fcda215.jar {}
[INFO ] 2020-01-19T02:54:30,575Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T02:54:33,876Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:54:33,920Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:54:36,267Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:54:36,306Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-01-19T02:54:49,859Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-025448.195/custom-cordapp_1_4_b46010a2-1794-4ef3-af02-e9e509a8adfc.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T02:54:50,019Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-025448.195/custom-cordapp_1_4_b46010a2-1794-4ef3-af02-e9e509a8adfc.jar {}
[INFO ] 2020-01-19T02:54:50,173Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T02:55:14,704Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:55:15,261Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-01-19T02:55:28,720Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-025527.031/custom-cordapp_1_4_e41e595f-79f6-4954-b036-8a94f0257379.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T02:55:28,984Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-025527.031/custom-cordapp_1_4_e41e595f-79f6-4954-b036-8a94f0257379.jar {}
[INFO ] 2020-01-19T02:55:29,141Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T02:56:17,429Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:56:17,935Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:56:24,613Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:56:24,885Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-01-19T02:57:21,067Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-025719.586/custom-cordapp_1_4_4a54fe11-1d81-466a-b74a-6075348bb39f.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T02:57:21,253Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-025719.586/custom-cordapp_1_4_4a54fe11-1d81-466a-b74a-6075348bb39f.jar {}
[INFO ] 2020-01-19T02:57:21,402Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T02:57:24,907Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:57:24,962Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:57:27,040Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T02:57:27,068Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 9A291730B5F56CF59E1FA7F0D405ACBCB8A2722361227E256BE3021FBEE47B48. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T02:57:27,113Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T02:57:27,113Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 9A291730B5F56CF59E1FA7F0D405ACBCB8A2722361227E256BE3021FBEE47B48. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T02:57:27,163Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:57:27,184Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:57:29,183Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T02:57:29,184Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 6327039C96C43F2135A9114DCAC158DEFBDB762DF535BADF4DEFAE0FAE36BEFC. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T02:57:29,189Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T02:57:29,190Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 6327039C96C43F2135A9114DCAC158DEFBDB762DF535BADF4DEFAE0FAE36BEFC. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T02:57:29,236Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:57:29,307Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:57:30,542Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T02:57:30,544Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction CFCAF62813BB45BB1C52EC56FA3F4DA8A6D2FA8C4952465AC265AA2E35A79712. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T02:57:30,553Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T02:57:30,554Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction CFCAF62813BB45BB1C52EC56FA3F4DA8A6D2FA8C4952465AC265AA2E35A79712. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[INFO ] 2020-01-19T02:59:43,490Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-025942.024/custom-cordapp_1_4_9a423c0f-f091-4fd0-a846-392821d09a97.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T02:59:43,639Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-025942.024/custom-cordapp_1_4_9a423c0f-f091-4fd0-a846-392821d09a97.jar {}
[INFO ] 2020-01-19T02:59:43,785Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T02:59:47,312Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:59:47,358Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:59:49,174Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T02:59:49,204Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 6FA407CDB13BA09B456318FFDF983ED4BC18B8649D948D58F0CAB71B71620979. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T02:59:49,212Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T02:59:49,212Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 6FA407CDB13BA09B456318FFDF983ED4BC18B8649D948D58F0CAB71B71620979. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T02:59:49,256Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:59:49,277Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:59:51,335Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T02:59:51,335Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction D4491C3B649440379CB19518DF56FD92D2D4EB79EB407EA7151ECFB625A34A60. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T02:59:51,340Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T02:59:51,341Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction D4491C3B649440379CB19518DF56FD92D2D4EB79EB407EA7151ECFB625A34A60. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T02:59:51,386Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:59:51,408Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T02:59:52,649Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T02:59:52,650Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 1B0FA99693A52DFD7C3B7164B055793C483E09557D92239C0746654425E7BA0F. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T02:59:52,656Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T02:59:52,656Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 1B0FA99693A52DFD7C3B7164B055793C483E09557D92239C0746654425E7BA0F. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[INFO ] 2020-01-19T03:04:21,038Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-030419.538/custom-cordapp_1_4_d9697005-ac90-4d6c-abf8-39e808331790.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T03:04:21,184Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-030419.538/custom-cordapp_1_4_d9697005-ac90-4d6c-abf8-39e808331790.jar {}
[INFO ] 2020-01-19T03:04:21,329Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T03:04:25,147Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:04:25,192Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:04:27,342Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:04:27,371Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 3547DAD254A425578FA46CA4C279A42BFF02A65C839D44BD6A957D640EC5D55D. [errorCode=1e1hzv4, moreInformationAt=https://errors.corda.net/OS/4.0/1e1hzv4] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:44) ~[main/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1257) ~[?:1.8.0_201]
	at java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1080) ~[?:1.8.0_201]
	at bootcamp.TokenContract.verify(TokenContract.java:39) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:04:27,379Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:04:27,379Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 3547DAD254A425578FA46CA4C279A42BFF02A65C839D44BD6A957D640EC5D55D. [errorCode=1e1hzv4, moreInformationAt=https://errors.corda.net/OS/4.0/1e1hzv4] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:44) ~[main/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1257) ~[?:1.8.0_201]
	at java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1080) ~[?:1.8.0_201]
	at bootcamp.TokenContract.verify(TokenContract.java:39) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:04:27,425Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:04:27,448Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:04:29,071Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:04:29,071Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 2FECCC0C847C97919073FE18BC4F25436ADAC445AAD2F6D884C0779952DD2152. [errorCode=1e1hzv4, moreInformationAt=https://errors.corda.net/OS/4.0/1e1hzv4] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:44) ~[main/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1257) ~[?:1.8.0_201]
	at java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1080) ~[?:1.8.0_201]
	at bootcamp.TokenContract.verify(TokenContract.java:39) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:04:29,078Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:04:29,079Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 2FECCC0C847C97919073FE18BC4F25436ADAC445AAD2F6D884C0779952DD2152. [errorCode=1e1hzv4, moreInformationAt=https://errors.corda.net/OS/4.0/1e1hzv4] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:44) ~[main/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1257) ~[?:1.8.0_201]
	at java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1080) ~[?:1.8.0_201]
	at bootcamp.TokenContract.verify(TokenContract.java:39) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:04:29,137Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:04:29,163Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:04:30,322Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:04:30,329Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 8385DC291889BA634A93397218501E0ED9C2105D33E4878CE8872820159CE527. [errorCode=1e1hzv4, moreInformationAt=https://errors.corda.net/OS/4.0/1e1hzv4] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:44) ~[main/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1257) ~[?:1.8.0_201]
	at java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1080) ~[?:1.8.0_201]
	at bootcamp.TokenContract.verify(TokenContract.java:39) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:04:30,386Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:04:30,387Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 8385DC291889BA634A93397218501E0ED9C2105D33E4878CE8872820159CE527. [errorCode=1e1hzv4, moreInformationAt=https://errors.corda.net/OS/4.0/1e1hzv4] {}
java.lang.IllegalArgumentException: The issuer must sign
	at bootcamp.TokenContract.lambda$verify$0(TokenContract.java:44) ~[main/:?]
	at java.util.ArrayList.forEach(ArrayList.java:1257) ~[?:1.8.0_201]
	at java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1080) ~[?:1.8.0_201]
	at bootcamp.TokenContract.verify(TokenContract.java:39) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[INFO ] 2020-01-19T03:09:18,352Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-030916.872/custom-cordapp_1_4_7977fd8d-8a75-46a1-ba8e-46d8a6abbb19.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T03:09:18,514Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-030916.872/custom-cordapp_1_4_7977fd8d-8a75-46a1-ba8e-46d8a6abbb19.jar {}
[INFO ] 2020-01-19T03:09:18,665Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T03:09:22,439Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:09:22,511Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:09:24,269Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:09:24,297Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 9AD00801A69EA86D93BC42BAD68CAE4B6ADD00971BF9092E3704711BBB57C44C. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer must be a signer
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:09:24,305Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:09:24,306Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 9AD00801A69EA86D93BC42BAD68CAE4B6ADD00971BF9092E3704711BBB57C44C. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer must be a signer
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:09:24,350Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:09:24,372Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:09:26,453Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:09:26,454Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 6D5DD77E30A017ADD0C629E9AF5DAE310B48951AEEF88F5F5AB9F386352E2986. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer must be a signer
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:09:26,458Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:09:26,459Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 6D5DD77E30A017ADD0C629E9AF5DAE310B48951AEEF88F5F5AB9F386352E2986. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer must be a signer
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:09:26,505Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:09:26,539Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:09:27,685Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:09:27,686Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 7F58272A6595754D0AD251335257CC68ACE91C8AC8854A9312FA8102D13ECB99. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer must be a signer
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:09:27,695Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:09:27,695Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 7F58272A6595754D0AD251335257CC68ACE91C8AC8854A9312FA8102D13ECB99. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer must be a signer
	at bootcamp.TokenContract.verify(TokenContract.java:47) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[INFO ] 2020-01-19T03:11:49,818Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-031148.127/custom-cordapp_1_4_16796dbb-b803-4de0-bb98-3f6d8ac1d27c.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T03:11:49,995Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-031148.127/custom-cordapp_1_4_16796dbb-b803-4de0-bb98-3f6d8ac1d27c.jar {}
[INFO ] 2020-01-19T03:11:50,157Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T03:12:05,057Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:12:05,610Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-01-19T03:12:22,524Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-031220.775/custom-cordapp_1_4_a45a7f35-d922-49d2-b5b2-3ba5d80c7c4c.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T03:12:22,685Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-031220.775/custom-cordapp_1_4_a45a7f35-d922-49d2-b5b2-3ba5d80c7c4c.jar {}
[INFO ] 2020-01-19T03:12:22,843Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T03:12:26,257Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:12:26,299Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:12:28,917Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-01-19T03:22:17,705Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-032216.182/custom-cordapp_1_4_60cae693-1d60-4064-b456-55775957d1c9.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T03:22:17,856Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-032216.182/custom-cordapp_1_4_60cae693-1d60-4064-b456-55775957d1c9.jar {}
[INFO ] 2020-01-19T03:22:18,005Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T03:22:21,519Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:22:21,566Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:22:23,873Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:22:23,904Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction A04F1D24C5BE0BF6266A04A80167F4D1F43C9EF5329114809BD12DCA3E08BD0E. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:39) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:22:23,912Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:22:23,912Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction A04F1D24C5BE0BF6266A04A80167F4D1F43C9EF5329114809BD12DCA3E08BD0E. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:39) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:22:23,960Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:22:23,981Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:22:25,708Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:22:25,713Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-01-19T03:37:46,036Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-033744.523/custom-cordapp_1_4_c5acd281-d6e1-4ef9-b9b3-6ad3b4b8b930.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T03:37:46,189Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-033744.523/custom-cordapp_1_4_c5acd281-d6e1-4ef9-b9b3-6ad3b4b8b930.jar {}
[INFO ] 2020-01-19T03:37:46,339Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T03:37:49,882Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:37:49,927Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:37:52,372Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:37:52,403Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 8F9B34A9E8D9BDF39D6CF2D00E4C483A23017F80C97849696AD7C3AC36669FED. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:37:52,411Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:37:52,411Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 8F9B34A9E8D9BDF39D6CF2D00E4C483A23017F80C97849696AD7C3AC36669FED. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:40) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:37:52,456Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:37:52,475Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:37:54,392Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:37:54,393Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 994814152A6539BB529AC94FF7796EE96A7545714D8F251C85B9D8685B4D0812. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$13(ContractTests.java:159) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:155) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:37:54,399Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:37:54,399Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 994814152A6539BB529AC94FF7796EE96A7545714D8F251C85B9D8685B4D0812. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$13(ContractTests.java:159) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:155) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[INFO ] 2020-01-19T03:45:45,928Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-034544.409/custom-cordapp_1_4_fb151ea5-3e05-49b1-94af-dec39e44601b.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T03:45:46,078Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-034544.409/custom-cordapp_1_4_fb151ea5-3e05-49b1-94af-dec39e44601b.jar {}
[INFO ] 2020-01-19T03:45:46,228Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T03:45:49,661Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:45:49,702Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:45:51,964Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:45:51,991Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 25F745A2495097D0451ABC2DB7531557B46FC2F831531B6A4055D3128C82D980. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:45:52,000Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:45:52,000Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 25F745A2495097D0451ABC2DB7531557B46FC2F831531B6A4055D3128C82D980. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:45:52,046Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:45:52,110Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:45:54,030Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:45:54,031Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction F3E87DA2B28856EFEDE346C5E564BC7C2C7A4AB2C1CB0C9385FD61C5814A0669. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:45:54,035Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:45:54,036Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction F3E87DA2B28856EFEDE346C5E564BC7C2C7A4AB2C1CB0C9385FD61C5814A0669. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:45:54,078Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:45:54,098Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:45:55,246Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:45:55,246Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 14F5518516C60877CA90E00713F1A7555E9CF4A4AD95856C9CDB79E386A61FEA. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:45:55,253Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:45:55,253Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 14F5518516C60877CA90E00713F1A7555E9CF4A4AD95856C9CDB79E386A61FEA. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[INFO ] 2020-01-19T03:59:26,400Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-035924.853/custom-cordapp_1_4_2265c872-46ea-4e55-a325-5604ea06efa2.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T03:59:26,557Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-035924.853/custom-cordapp_1_4_2265c872-46ea-4e55-a325-5604ea06efa2.jar {}
[INFO ] 2020-01-19T03:59:26,703Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T03:59:30,203Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:59:30,274Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:59:32,573Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:59:32,603Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction F0816A429FFF81CD0FF8288CE93E933C4FFB1E9C6000E9BD5A8BA6CD0666E1B5. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:46) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:59:32,611Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:59:32,612Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction F0816A429FFF81CD0FF8288CE93E933C4FFB1E9C6000E9BD5A8BA6CD0666E1B5. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:46) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:59:32,656Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:59:32,743Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:59:34,348Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:59:34,349Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 2CC2504B1FAC55E5EB1785CA65E63E93979F925695FEDE66FB2A054C47070359. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:46) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:59:34,353Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:59:34,353Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 2CC2504B1FAC55E5EB1785CA65E63E93979F925695FEDE66FB2A054C47070359. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:46) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:59:34,411Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:59:34,445Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T03:59:35,521Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:59:35,522Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction F8E8BAB52E38FFE69C99951321C8BBBBA063C9E77E00D8FC6DC0BDE858942743. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:46) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T03:59:35,528Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T03:59:35,528Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction F8E8BAB52E38FFE69C99951321C8BBBBA063C9E77E00D8FC6DC0BDE858942743. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:46) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.verifies(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$16(ContractTests.java:188) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:184) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[INFO ] 2020-01-19T04:00:56,342Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-040054.254/custom-cordapp_1_4_862abbba-2c6c-4938-b072-95d4bfc0abaa.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T04:00:56,534Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/generated-custom-cordapps/20200119-040054.254/custom-cordapp_1_4_862abbba-2c6c-4938-b072-95d4bfc0abaa.jar {}
[INFO ] 2020-01-19T04:00:56,707Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2020-01-19T04:01:00,486Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T04:01:00,534Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T04:01:02,668Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T04:01:02,697Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 9C0BF85554E673DB9430DA54EEE5EDB49A9F9B0A7230E9DB2220834CF3038473. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:46) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T04:01:02,705Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T04:01:02,705Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 9C0BF85554E673DB9430DA54EEE5EDB49A9F9B0A7230E9DB2220834CF3038473. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:46) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T04:01:02,753Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T04:01:02,775Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T04:01:04,371Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T04:01:04,371Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 21B518E3BD88098CBC9E0DC88EE26DF0464271103B73AD3A7ABCE6791286AE68. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:46) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T04:01:04,376Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-01-19T04:01:04,376Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 21B518E3BD88098CBC9E0DC88EE26DF0464271103B73AD3A7ABCE6791286AE68. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: The command must be an issuer
	at bootcamp.TokenContract.verify(TokenContract.java:46) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_201]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_201]
[WARN ] 2020-01-19T04:01:04,418Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T04:01:04,443Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T04:01:05,610Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T04:01:05,618Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T04:01:05,659Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T04:01:05,682Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T04:01:06,866Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-01-19T04:01:06,887Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-01-19T23:23:00,919Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\IdeaProjects\bootcamp-cordapp ... {}
[INFO ] 2020-01-19T23:23:11,239Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200119-232250.713\nodes\0\cordapps] {}
[INFO ] 2020-01-19T23:23:11,246Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200119-232250.713/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T23:23:11,302Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200119-232250.713/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-19T23:23:11,621Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-19T23:23:12,612Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-19T23:23:12,737Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-19T23:23:12,738Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-19T23:23:12,739Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-19T23:23:12,970Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-19T23:22:50.603Z
      epoch=1
  } {}
[INFO ] 2020-01-19T23:23:20,340Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-19T23:23:20,363Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200119-232250.713\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-19T23:23:20,363Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-19T23:23:20,366Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-19T23:23:20,638Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-19T23:23:20,666Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-19T23:23:24,210Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-19T23:23:25,232Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-19T23:23:25,336Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-19T23:23:25,371Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-19T23:23:25,372Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-19T23:23:25,773Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-19T23:23:25,792Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-19T23:23:25,792Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579476205792) {}
[INFO ] 2020-01-19T23:23:25,802Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-19T23:23:26,043Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579476205792) {}
[INFO ] 2020-01-19T23:23:26,144Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-19T23:23:26,182Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579476205792) {}
[INFO ] 2020-01-19T23:23:26,226Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-19T23:23:26,932Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C92FA95EACFB1C851A9165EE804A8C8A42F92DD2A52677DF7BB341149020B55E uploader=app filename=null {}
[INFO ] 2020-01-19T23:23:26,942Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-19T23:23:26,950Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-19T23:23:27,572Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579476205792) {}
[INFO ] 2020-01-19T23:23:27,602Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579476205792) {}
[INFO ] 2020-01-19T23:23:27,605Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-19T23:23:27,605Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579476205792) {}
[INFO ] 2020-01-19T23:23:27,605Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-19T23:23:27,618Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200119-232250.713\nodes\1\cordapps] {}
[INFO ] 2020-01-19T23:23:27,619Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200119-232250.713/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T23:23:27,619Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200119-232250.713/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-19T23:23:27,901Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-19T23:23:27,919Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-19T23:23:28,015Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-19T23:23:28,016Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-19T23:23:28,016Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-19T23:23:28,022Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-19T23:22:50.603Z
      epoch=1
  } {}
[INFO ] 2020-01-19T23:23:29,227Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-19T23:23:29,233Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200119-232250.713\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-19T23:23:29,233Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-19T23:23:29,236Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-19T23:23:29,240Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-19T23:23:29,240Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-19T23:23:29,407Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-19T23:23:29,422Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-19T23:23:29,425Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-19T23:23:29,427Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-19T23:23:29,468Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-19T23:23:29,468Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-19T23:23:29,651Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-19T23:23:29,661Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-19T23:23:29,661Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579476209661) {}
[INFO ] 2020-01-19T23:23:29,665Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-19T23:23:29,681Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579476209661) {}
[INFO ] 2020-01-19T23:23:29,708Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-19T23:23:29,734Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579476209661) {}
[INFO ] 2020-01-19T23:23:29,751Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-19T23:23:29,958Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C92FA95EACFB1C851A9165EE804A8C8A42F92DD2A52677DF7BB341149020B55E uploader=app filename=null {}
[INFO ] 2020-01-19T23:23:29,970Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579476209661) {}
[INFO ] 2020-01-19T23:23:29,974Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579476205792) {}
[INFO ] 2020-01-19T23:23:29,977Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-19T23:23:29,991Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579476209661) {}
[INFO ] 2020-01-19T23:23:29,993Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-19T23:23:30,005Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579476209661) {}
[INFO ] 2020-01-19T23:23:30,005Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-19T23:23:30,006Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579476209661) {}
[INFO ] 2020-01-19T23:23:30,006Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-19T23:23:30,196Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200119-232250.713\nodes\2\cordapps] {}
[INFO ] 2020-01-19T23:23:30,197Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200119-232250.713/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-19T23:23:30,197Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200119-232250.713/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-19T23:23:30,228Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-19T23:23:30,245Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-19T23:23:30,330Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-19T23:23:30,330Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-19T23:23:30,330Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-19T23:23:30,335Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-19T23:22:50.603Z
      epoch=1
  } {}
[INFO ] 2020-01-19T23:23:31,235Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-19T23:23:31,290Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200119-232250.713\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-19T23:23:31,290Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-19T23:23:31,292Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-19T23:23:31,296Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-19T23:23:31,297Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-19T23:23:31,421Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-19T23:23:31,436Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-19T23:23:31,443Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-19T23:23:31,445Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-19T23:23:31,486Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-19T23:23:31,486Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-19T23:23:31,694Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-19T23:23:31,702Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-19T23:23:31,702Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579476211702) {}
[INFO ] 2020-01-19T23:23:31,705Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-19T23:23:31,720Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579476211702) {}
[INFO ] 2020-01-19T23:23:31,790Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-19T23:23:31,809Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579476211702) {}
[INFO ] 2020-01-19T23:23:31,822Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-19T23:23:32,116Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=C92FA95EACFB1C851A9165EE804A8C8A42F92DD2A52677DF7BB341149020B55E uploader=app filename=null {}
[INFO ] 2020-01-19T23:23:32,128Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579476211702) {}
[INFO ] 2020-01-19T23:23:32,132Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579476205792) {}
[INFO ] 2020-01-19T23:23:32,135Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-19T23:23:32,161Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579476211702) {}
[INFO ] 2020-01-19T23:23:32,173Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-19T23:23:32,201Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579476209661) {}
[INFO ] 2020-01-19T23:23:32,205Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-19T23:23:32,383Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579476211702) {}
[INFO ] 2020-01-19T23:23:32,385Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-19T23:23:32,408Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579476211702) {}
[INFO ] 2020-01-19T23:23:32,408Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-19T23:23:32,408Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579476211702) {}
[INFO ] 2020-01-19T23:23:32,409Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-19T23:23:32,818Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f37d7ea5-a515-4593-8760-70f0050ab726, invocation_id=58364a52-8093-44bd-9677-99f22bbc4603, invocation_timestamp=2020-01-19T23:23:32.489Z, origin=Only For Testing, session_id=58364a52-8093-44bd-9677-99f22bbc4603, session_timestamp=2020-01-19T23:23:32.489Z, thread-id=134}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-19T23:23:32,828Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [f37d7ea5-a515-4593-8760-70f0050ab726] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=58364a52-8093-44bd-9677-99f22bbc4603, timestamp: 2020-01-19T23:23:32.489Z, entityType: Invocation, sessionId=58364a52-8093-44bd-9677-99f22bbc4603, timestamp: 2020-01-19T23:23:32.489Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=C92FA95EACFB1C851A9165EE804A8C8A42F92DD2A52677DF7BB341149020B55E), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BC5402F31F7337A25B70F7A2C562DA0BAECA3E690E2845E3CE8AA4598692A2C0), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@45b7b057, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=a5a6d563-d8d0-45a3-a0a1-20733f072308) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f37d7ea5-a515-4593-8760-70f0050ab726, invocation_id=58364a52-8093-44bd-9677-99f22bbc4603, invocation_timestamp=2020-01-19T23:23:32.489Z, origin=Only For Testing, session_id=58364a52-8093-44bd-9677-99f22bbc4603, session_timestamp=2020-01-19T23:23:32.489Z, thread-id=134}
[INFO ] 2020-01-19T23:23:32,832Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [f37d7ea5-a515-4593-8760-70f0050ab726] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f37d7ea5-a515-4593-8760-70f0050ab726, invocation_id=58364a52-8093-44bd-9677-99f22bbc4603, invocation_timestamp=2020-01-19T23:23:32.489Z, origin=Only For Testing, session_id=58364a52-8093-44bd-9677-99f22bbc4603, session_timestamp=2020-01-19T23:23:32.489Z, thread-id=134}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-19T23:23:32,835Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [f37d7ea5-a515-4593-8760-70f0050ab726] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f37d7ea5-a515-4593-8760-70f0050ab726, invocation_id=58364a52-8093-44bd-9677-99f22bbc4603, invocation_timestamp=2020-01-19T23:23:32.489Z, origin=Only For Testing, session_id=58364a52-8093-44bd-9677-99f22bbc4603, session_timestamp=2020-01-19T23:23:32.489Z, thread-id=134}
[WARN ] 2020-01-19T23:23:32,859Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f37d7ea5-a515-4593-8760-70f0050ab726] errored, dumping all transitions:

 --- Transition of flow [f37d7ea5-a515-4593-8760-70f0050ab726] ---
  Timestamp: 2020-01-19T23:23:32.793Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[f37d7ea5-a515-4593-8760-70f0050ab726], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=58364a52-8093-44bd-9677-99f22bbc4603, timestamp: 2020-01-19T23:23:32.489Z, entityType: Invocation, sessionId=58364a52-8093-44bd-9677-99f22bbc4603, timestamp: 2020-01-19T23:23:32.489Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=C92FA95EACFB1C851A9165EE804A8C8A42F92DD2A52677DF7BB341149020B55E), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BC5402F31F7337A25B70F7A2C562DA0BAECA3E690E2845E3CE8AA4598692A2C0), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5ced7829])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5ced7829])
    SignalFlowHasStarted(flowId=[f37d7ea5-a515-4593-8760-70f0050ab726])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5ced7829]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [f37d7ea5-a515-4593-8760-70f0050ab726] ---
  Timestamp: 2020-01-19T23:23:32.837Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8779189097016112623, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [f37d7ea5-a515-4593-8760-70f0050ab726] ---
  Timestamp: 2020-01-19T23:23:32.843Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f37d7ea5-a515-4593-8760-70f0050ab726] ---
  Timestamp: 2020-01-19T23:23:32.847Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f37d7ea5-a515-4593-8760-70f0050ab726, invocation_id=58364a52-8093-44bd-9677-99f22bbc4603, invocation_timestamp=2020-01-19T23:23:32.489Z, origin=Only For Testing, session_id=58364a52-8093-44bd-9677-99f22bbc4603, session_timestamp=2020-01-19T23:23:32.489Z, thread-id=134}
[WARN ] 2020-01-19T23:23:32,859Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f37d7ea5-a515-4593-8760-70f0050ab726] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f37d7ea5-a515-4593-8760-70f0050ab726, invocation_id=58364a52-8093-44bd-9677-99f22bbc4603, invocation_timestamp=2020-01-19T23:23:32.489Z, origin=Only For Testing, session_id=58364a52-8093-44bd-9677-99f22bbc4603, session_timestamp=2020-01-19T23:23:32.489Z, thread-id=134}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-19T23:23:32,863Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f37d7ea5-a515-4593-8760-70f0050ab726, invocation_id=58364a52-8093-44bd-9677-99f22bbc4603, invocation_timestamp=2020-01-19T23:23:32.489Z, origin=Only For Testing, session_id=58364a52-8093-44bd-9677-99f22bbc4603, session_timestamp=2020-01-19T23:23:32.489Z, thread-id=134}
[WARN ] 2020-01-19T23:23:32,961Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f37d7ea5-a515-4593-8760-70f0050ab726] errored, dumping all transitions:

 --- Transition of flow [f37d7ea5-a515-4593-8760-70f0050ab726] ---
  Timestamp: 2020-01-19T23:23:32.793Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[f37d7ea5-a515-4593-8760-70f0050ab726], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=58364a52-8093-44bd-9677-99f22bbc4603, timestamp: 2020-01-19T23:23:32.489Z, entityType: Invocation, sessionId=58364a52-8093-44bd-9677-99f22bbc4603, timestamp: 2020-01-19T23:23:32.489Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=C92FA95EACFB1C851A9165EE804A8C8A42F92DD2A52677DF7BB341149020B55E), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BC5402F31F7337A25B70F7A2C562DA0BAECA3E690E2845E3CE8AA4598692A2C0), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5ced7829])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5ced7829])
    SignalFlowHasStarted(flowId=[f37d7ea5-a515-4593-8760-70f0050ab726])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5ced7829]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [f37d7ea5-a515-4593-8760-70f0050ab726] ---
  Timestamp: 2020-01-19T23:23:32.837Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8779189097016112623, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [f37d7ea5-a515-4593-8760-70f0050ab726] ---
  Timestamp: 2020-01-19T23:23:32.843Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f37d7ea5-a515-4593-8760-70f0050ab726] ---
  Timestamp: 2020-01-19T23:23:32.847Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [f37d7ea5-a515-4593-8760-70f0050ab726] ---
  Timestamp: 2020-01-19T23:23:32.950Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=8779189097016112623)], sessions=[], senderUUID=a5a6d563-d8d0-45a3-a0a1-20733f072308)
    CreateTransaction
    RemoveCheckpoint(id=[f37d7ea5-a515-4593-8760-70f0050ab726])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=f37d7ea5-a515-4593-8760-70f0050ab726)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[f37d7ea5-a515-4593-8760-70f0050ab726], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8779189097016112623, exception=java.lang.NullPointerException)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=58364a52-8093-44bd-9677-99f22bbc4603, timestamp: 2020-01-19T23:23:32.489Z, entityType: Invocation, sessionId=58364a52-8093-44bd-9677-99f22bbc4603, timestamp: 2020-01-19T23:23:32.489Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=C92FA95EACFB1C851A9165EE804A8C8A42F92DD2A52677DF7BB341149020B55E), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BC5402F31F7337A25B70F7A2C562DA0BAECA3E690E2845E3CE8AA4598692A2C0), errorState=Errored(errors=[FlowError(errorId=8779189097016112623, exception=java.lang.NullPointerException)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@45b7b057, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=a5a6d563-d8d0-45a3-a0a1-20733f072308))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f37d7ea5-a515-4593-8760-70f0050ab726, invocation_id=58364a52-8093-44bd-9677-99f22bbc4603, invocation_timestamp=2020-01-19T23:23:32.489Z, origin=Only For Testing, session_id=58364a52-8093-44bd-9677-99f22bbc4603, session_timestamp=2020-01-19T23:23:32.489Z, thread-id=134}
[WARN ] 2020-01-19T23:23:32,961Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f37d7ea5-a515-4593-8760-70f0050ab726] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.0/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f37d7ea5-a515-4593-8760-70f0050ab726, invocation_id=58364a52-8093-44bd-9677-99f22bbc4603, invocation_timestamp=2020-01-19T23:23:32.489Z, origin=Only For Testing, session_id=58364a52-8093-44bd-9677-99f22bbc4603, session_timestamp=2020-01-19T23:23:32.489Z, thread-id=134}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:00:43,051Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\IdeaProjects\bootcamp-cordapp ... {}
[INFO ] 2020-01-20T00:00:52,739Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-000034.434\nodes\0\cordapps] {}
[INFO ] 2020-01-20T00:00:52,746Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000034.434/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:00:52,788Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000034.434/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-20T00:00:53,118Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:00:54,021Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:00:54,133Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:00:54,134Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:00:54,136Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:00:54,340Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:00:34.349Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:01:00,802Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:01:00,812Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-000034.434\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:01:00,812Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:01:00,814Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:01:00,895Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:01:00,909Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:01:03,873Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:01:04,890Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:01:04,960Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:01:04,987Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:01:04,987Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:01:05,375Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:01:05,389Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:01:05,389Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478465389) {}
[INFO ] 2020-01-20T00:01:05,396Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:01:05,608Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478465389) {}
[INFO ] 2020-01-20T00:01:05,705Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:01:05,732Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478465389) {}
[INFO ] 2020-01-20T00:01:05,770Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:01:06,341Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7F149621DF03EAE55B5E81EBC2F1E2A1583122C1034C6F55EF0FDED38B0476E5 uploader=app filename=null {}
[INFO ] 2020-01-20T00:01:06,348Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-20T00:01:06,355Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-20T00:01:06,866Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478465389) {}
[INFO ] 2020-01-20T00:01:06,892Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478465389) {}
[INFO ] 2020-01-20T00:01:06,895Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:01:06,896Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478465389) {}
[INFO ] 2020-01-20T00:01:06,896Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:01:07,085Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-000034.434\nodes\1\cordapps] {}
[INFO ] 2020-01-20T00:01:07,086Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000034.434/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:01:07,087Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000034.434/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-20T00:01:07,112Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:01:07,126Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:01:07,209Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:01:07,209Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:01:07,209Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:01:07,215Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:00:34.349Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:01:08,076Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:01:08,103Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-000034.434\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:01:08,107Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:01:08,109Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:01:08,115Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:01:08,115Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:01:08,246Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:01:08,261Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:01:08,265Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:01:08,266Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T00:01:08,310Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:01:08,310Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:01:08,474Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:01:08,481Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:01:08,482Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478468481) {}
[INFO ] 2020-01-20T00:01:08,484Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:01:08,498Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478468481) {}
[INFO ] 2020-01-20T00:01:08,521Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:01:08,528Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478468481) {}
[INFO ] 2020-01-20T00:01:08,536Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:01:08,760Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7F149621DF03EAE55B5E81EBC2F1E2A1583122C1034C6F55EF0FDED38B0476E5 uploader=app filename=null {}
[INFO ] 2020-01-20T00:01:08,770Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478468481) {}
[INFO ] 2020-01-20T00:01:08,774Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478465389) {}
[INFO ] 2020-01-20T00:01:08,776Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:01:08,788Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478468481) {}
[INFO ] 2020-01-20T00:01:08,790Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:01:08,804Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478468481) {}
[INFO ] 2020-01-20T00:01:08,804Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:01:08,804Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478468481) {}
[INFO ] 2020-01-20T00:01:08,804Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:01:08,963Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-000034.434\nodes\2\cordapps] {}
[INFO ] 2020-01-20T00:01:08,964Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000034.434/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:01:08,964Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000034.434/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-20T00:01:08,989Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:01:09,005Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:01:09,071Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:01:09,072Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:01:09,072Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:01:09,077Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:00:34.349Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:01:09,797Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:01:09,800Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-000034.434\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:01:09,800Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:01:09,802Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:01:09,806Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:01:09,806Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:01:09,930Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:01:09,942Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:01:09,946Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:01:09,947Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T00:01:09,990Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:01:09,990Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:01:10,169Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:01:10,177Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:01:10,177Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478470177) {}
[INFO ] 2020-01-20T00:01:10,180Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:01:10,190Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478470177) {}
[INFO ] 2020-01-20T00:01:10,211Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:01:10,219Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478470177) {}
[INFO ] 2020-01-20T00:01:10,229Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:01:10,429Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=7F149621DF03EAE55B5E81EBC2F1E2A1583122C1034C6F55EF0FDED38B0476E5 uploader=app filename=null {}
[INFO ] 2020-01-20T00:01:10,441Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478470177) {}
[INFO ] 2020-01-20T00:01:10,444Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478465389) {}
[INFO ] 2020-01-20T00:01:10,446Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:01:10,466Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478470177) {}
[INFO ] 2020-01-20T00:01:10,469Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:01:10,481Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478468481) {}
[INFO ] 2020-01-20T00:01:10,483Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:01:10,494Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478470177) {}
[INFO ] 2020-01-20T00:01:10,496Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:01:10,510Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478470177) {}
[INFO ] 2020-01-20T00:01:10,510Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:01:10,510Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478470177) {}
[INFO ] 2020-01-20T00:01:10,510Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:01:10,834Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d18085a8-831c-46b3-aca2-7e2578e5d1f0, invocation_id=46b30fe5-7842-445d-b397-e7adafe98ce8, invocation_timestamp=2020-01-20T00:01:10.553Z, origin=Only For Testing, session_id=46b30fe5-7842-445d-b397-e7adafe98ce8, session_timestamp=2020-01-20T00:01:10.553Z, thread-id=133}
java.lang.IllegalArgumentException: Parameter specified as non-null is null: method net.corda.core.transactions.TransactionBuilder.addInputState, parameter stateAndRef
	at net.corda.core.transactions.TransactionBuilder.addInputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:63) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:01:10,841Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=46b30fe5-7842-445d-b397-e7adafe98ce8, timestamp: 2020-01-20T00:01:10.553Z, entityType: Invocation, sessionId=46b30fe5-7842-445d-b397-e7adafe98ce8, timestamp: 2020-01-20T00:01:10.553Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=7F149621DF03EAE55B5E81EBC2F1E2A1583122C1034C6F55EF0FDED38B0476E5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=3399DD6E6B0D2ECD493A28AC36A35F0140CA4311282F32BEB4D477C0DB3EB866), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@6d4d4666, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=3a2eeff4-9c33-4f8a-bd17-c122b41859e9) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d18085a8-831c-46b3-aca2-7e2578e5d1f0, invocation_id=46b30fe5-7842-445d-b397-e7adafe98ce8, invocation_timestamp=2020-01-20T00:01:10.553Z, origin=Only For Testing, session_id=46b30fe5-7842-445d-b397-e7adafe98ce8, session_timestamp=2020-01-20T00:01:10.553Z, thread-id=133}
[INFO ] 2020-01-20T00:01:10,843Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d18085a8-831c-46b3-aca2-7e2578e5d1f0, invocation_id=46b30fe5-7842-445d-b397-e7adafe98ce8, invocation_timestamp=2020-01-20T00:01:10.553Z, origin=Only For Testing, session_id=46b30fe5-7842-445d-b397-e7adafe98ce8, session_timestamp=2020-01-20T00:01:10.553Z, thread-id=133}
java.lang.IllegalArgumentException: Parameter specified as non-null is null: method net.corda.core.transactions.TransactionBuilder.addInputState, parameter stateAndRef
	at net.corda.core.transactions.TransactionBuilder.addInputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:63) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:01:10,846Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d18085a8-831c-46b3-aca2-7e2578e5d1f0, invocation_id=46b30fe5-7842-445d-b397-e7adafe98ce8, invocation_timestamp=2020-01-20T00:01:10.553Z, origin=Only For Testing, session_id=46b30fe5-7842-445d-b397-e7adafe98ce8, session_timestamp=2020-01-20T00:01:10.553Z, thread-id=133}
[WARN ] 2020-01-20T00:01:10,871Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] errored, dumping all transitions:

 --- Transition of flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] ---
  Timestamp: 2020-01-20T00:01:10.800Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d18085a8-831c-46b3-aca2-7e2578e5d1f0], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=46b30fe5-7842-445d-b397-e7adafe98ce8, timestamp: 2020-01-20T00:01:10.553Z, entityType: Invocation, sessionId=46b30fe5-7842-445d-b397-e7adafe98ce8, timestamp: 2020-01-20T00:01:10.553Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=7F149621DF03EAE55B5E81EBC2F1E2A1583122C1034C6F55EF0FDED38B0476E5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=3399DD6E6B0D2ECD493A28AC36A35F0140CA4311282F32BEB4D477C0DB3EB866), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4aaccfc4])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4aaccfc4])
    SignalFlowHasStarted(flowId=[d18085a8-831c-46b3-aca2-7e2578e5d1f0])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4aaccfc4]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] ---
  Timestamp: 2020-01-20T00:01:10.848Z
  Event: Error(exception=java.lang.IllegalArgumentException: Parameter specified as non-null is null: method net.corda.core.transactions.TransactionBuilder.addInputState, parameter stateAndRef)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-2179034610351527242, exception=java.lang.IllegalArgumentException: Parameter specified as non-null is null: method net.corda.core.transactions.TransactionBuilder.addInputState, parameter stateAndRef)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] ---
  Timestamp: 2020-01-20T00:01:10.859Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] ---
  Timestamp: 2020-01-20T00:01:10.862Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d18085a8-831c-46b3-aca2-7e2578e5d1f0, invocation_id=46b30fe5-7842-445d-b397-e7adafe98ce8, invocation_timestamp=2020-01-20T00:01:10.553Z, origin=Only For Testing, session_id=46b30fe5-7842-445d-b397-e7adafe98ce8, session_timestamp=2020-01-20T00:01:10.553Z, thread-id=133}
[WARN ] 2020-01-20T00:01:10,871Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] error [errorCode=1yqzv4m, moreInformationAt=https://errors.corda.net/OS/4.0/1yqzv4m] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d18085a8-831c-46b3-aca2-7e2578e5d1f0, invocation_id=46b30fe5-7842-445d-b397-e7adafe98ce8, invocation_timestamp=2020-01-20T00:01:10.553Z, origin=Only For Testing, session_id=46b30fe5-7842-445d-b397-e7adafe98ce8, session_timestamp=2020-01-20T00:01:10.553Z, thread-id=133}
java.lang.IllegalArgumentException: Parameter specified as non-null is null: method net.corda.core.transactions.TransactionBuilder.addInputState, parameter stateAndRef
	at net.corda.core.transactions.TransactionBuilder.addInputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:63) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-20T00:01:10,874Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d18085a8-831c-46b3-aca2-7e2578e5d1f0, invocation_id=46b30fe5-7842-445d-b397-e7adafe98ce8, invocation_timestamp=2020-01-20T00:01:10.553Z, origin=Only For Testing, session_id=46b30fe5-7842-445d-b397-e7adafe98ce8, session_timestamp=2020-01-20T00:01:10.553Z, thread-id=133}
[WARN ] 2020-01-20T00:01:10,927Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] errored, dumping all transitions:

 --- Transition of flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] ---
  Timestamp: 2020-01-20T00:01:10.800Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d18085a8-831c-46b3-aca2-7e2578e5d1f0], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=46b30fe5-7842-445d-b397-e7adafe98ce8, timestamp: 2020-01-20T00:01:10.553Z, entityType: Invocation, sessionId=46b30fe5-7842-445d-b397-e7adafe98ce8, timestamp: 2020-01-20T00:01:10.553Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=7F149621DF03EAE55B5E81EBC2F1E2A1583122C1034C6F55EF0FDED38B0476E5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=3399DD6E6B0D2ECD493A28AC36A35F0140CA4311282F32BEB4D477C0DB3EB866), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4aaccfc4])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4aaccfc4])
    SignalFlowHasStarted(flowId=[d18085a8-831c-46b3-aca2-7e2578e5d1f0])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4aaccfc4]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] ---
  Timestamp: 2020-01-20T00:01:10.848Z
  Event: Error(exception=java.lang.IllegalArgumentException: Parameter specified as non-null is null: method net.corda.core.transactions.TransactionBuilder.addInputState, parameter stateAndRef)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-2179034610351527242, exception=java.lang.IllegalArgumentException: Parameter specified as non-null is null: method net.corda.core.transactions.TransactionBuilder.addInputState, parameter stateAndRef)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] ---
  Timestamp: 2020-01-20T00:01:10.859Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] ---
  Timestamp: 2020-01-20T00:01:10.862Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] ---
  Timestamp: 2020-01-20T00:01:10.919Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-2179034610351527242)], sessions=[], senderUUID=3a2eeff4-9c33-4f8a-bd17-c122b41859e9)
    CreateTransaction
    RemoveCheckpoint(id=[d18085a8-831c-46b3-aca2-7e2578e5d1f0])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=d18085a8-831c-46b3-aca2-7e2578e5d1f0)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[d18085a8-831c-46b3-aca2-7e2578e5d1f0], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-2179034610351527242, exception=java.lang.IllegalArgumentException: Parameter specified as non-null is null: method net.corda.core.transactions.TransactionBuilder.addInputState, parameter stateAndRef)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=46b30fe5-7842-445d-b397-e7adafe98ce8, timestamp: 2020-01-20T00:01:10.553Z, entityType: Invocation, sessionId=46b30fe5-7842-445d-b397-e7adafe98ce8, timestamp: 2020-01-20T00:01:10.553Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=7F149621DF03EAE55B5E81EBC2F1E2A1583122C1034C6F55EF0FDED38B0476E5), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=3399DD6E6B0D2ECD493A28AC36A35F0140CA4311282F32BEB4D477C0DB3EB866), errorState=Errored(errors=[FlowError(errorId=-2179034610351527242, exception=java.lang.IllegalArgumentException: Parameter specified as non-null is null: method net.corda.core.transactions.TransactionBuilder.addInputState, parameter stateAndRef)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@6d4d4666, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=3a2eeff4-9c33-4f8a-bd17-c122b41859e9))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d18085a8-831c-46b3-aca2-7e2578e5d1f0, invocation_id=46b30fe5-7842-445d-b397-e7adafe98ce8, invocation_timestamp=2020-01-20T00:01:10.553Z, origin=Only For Testing, session_id=46b30fe5-7842-445d-b397-e7adafe98ce8, session_timestamp=2020-01-20T00:01:10.553Z, thread-id=133}
[WARN ] 2020-01-20T00:01:10,927Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d18085a8-831c-46b3-aca2-7e2578e5d1f0] error [errorCode=1yqzv4m, moreInformationAt=https://errors.corda.net/OS/4.0/1yqzv4m] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d18085a8-831c-46b3-aca2-7e2578e5d1f0, invocation_id=46b30fe5-7842-445d-b397-e7adafe98ce8, invocation_timestamp=2020-01-20T00:01:10.553Z, origin=Only For Testing, session_id=46b30fe5-7842-445d-b397-e7adafe98ce8, session_timestamp=2020-01-20T00:01:10.553Z, thread-id=133}
java.lang.IllegalArgumentException: Parameter specified as non-null is null: method net.corda.core.transactions.TransactionBuilder.addInputState, parameter stateAndRef
	at net.corda.core.transactions.TransactionBuilder.addInputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:63) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:02:33,407Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\IdeaProjects\bootcamp-cordapp ... {}
[INFO ] 2020-01-20T00:02:42,775Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-000224.223\nodes\0\cordapps] {}
[INFO ] 2020-01-20T00:02:42,783Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000224.223/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:02:42,833Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000224.223/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-20T00:02:43,139Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:02:44,043Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:02:44,166Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:02:44,168Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:02:44,169Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:02:44,373Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:02:24.135Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:02:50,400Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:02:50,410Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-000224.223\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:02:50,411Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:02:50,416Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:02:50,521Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:02:50,529Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:02:53,477Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:02:54,461Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:02:54,562Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:02:54,590Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:02:54,590Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:02:54,988Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:02:55,003Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:02:55,004Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478575003) {}
[INFO ] 2020-01-20T00:02:55,011Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:02:55,222Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478575003) {}
[INFO ] 2020-01-20T00:02:55,308Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:02:55,339Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478575003) {}
[INFO ] 2020-01-20T00:02:55,377Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:02:55,926Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D1FE6DF13573A8AFAD38669A281B82AB6C71DC726C855EF4DFC8C59E97FA1907 uploader=app filename=null {}
[INFO ] 2020-01-20T00:02:55,933Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-20T00:02:55,938Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-20T00:02:56,455Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478575003) {}
[INFO ] 2020-01-20T00:02:56,486Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478575003) {}
[INFO ] 2020-01-20T00:02:56,489Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:02:56,489Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478575003) {}
[INFO ] 2020-01-20T00:02:56,489Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:02:56,516Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-000224.223\nodes\1\cordapps] {}
[INFO ] 2020-01-20T00:02:56,519Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000224.223/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:02:56,519Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000224.223/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-20T00:02:56,744Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:02:56,760Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:02:56,837Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:02:56,838Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:02:56,838Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:02:56,843Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:02:24.135Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:02:57,692Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:02:57,696Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-000224.223\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:02:57,697Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:02:57,700Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:02:57,706Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:02:57,707Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:02:57,831Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:02:57,847Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:02:57,857Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:02:57,858Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T00:02:57,908Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:02:57,908Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:02:58,069Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:02:58,077Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:02:58,077Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478578077) {}
[INFO ] 2020-01-20T00:02:58,081Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:02:58,094Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478578077) {}
[INFO ] 2020-01-20T00:02:58,129Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:02:58,138Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478578077) {}
[INFO ] 2020-01-20T00:02:58,146Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:02:58,368Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D1FE6DF13573A8AFAD38669A281B82AB6C71DC726C855EF4DFC8C59E97FA1907 uploader=app filename=null {}
[INFO ] 2020-01-20T00:02:58,378Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478578077) {}
[INFO ] 2020-01-20T00:02:58,382Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478575003) {}
[INFO ] 2020-01-20T00:02:58,384Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:02:58,398Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478578077) {}
[INFO ] 2020-01-20T00:02:58,400Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:02:58,413Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478578077) {}
[INFO ] 2020-01-20T00:02:58,413Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:02:58,413Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478578077) {}
[INFO ] 2020-01-20T00:02:58,414Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:02:58,422Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-000224.223\nodes\2\cordapps] {}
[INFO ] 2020-01-20T00:02:58,422Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000224.223/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:02:58,423Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000224.223/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-20T00:02:58,609Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:02:58,625Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:02:58,693Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:02:58,693Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:02:58,693Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:02:58,698Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:02:24.135Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:02:59,402Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:02:59,407Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-000224.223\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:02:59,407Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:02:59,410Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:02:59,414Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:02:59,414Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:02:59,525Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:02:59,536Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:02:59,540Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:02:59,541Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T00:02:59,575Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:02:59,576Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:02:59,740Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:02:59,747Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:02:59,747Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478579747) {}
[INFO ] 2020-01-20T00:02:59,751Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:02:59,761Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478579747) {}
[INFO ] 2020-01-20T00:02:59,781Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:02:59,787Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478579747) {}
[INFO ] 2020-01-20T00:02:59,793Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:03:00,011Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=D1FE6DF13573A8AFAD38669A281B82AB6C71DC726C855EF4DFC8C59E97FA1907 uploader=app filename=null {}
[INFO ] 2020-01-20T00:03:00,025Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478579747) {}
[INFO ] 2020-01-20T00:03:00,029Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478575003) {}
[INFO ] 2020-01-20T00:03:00,031Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:03:00,045Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478579747) {}
[INFO ] 2020-01-20T00:03:00,047Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:03:00,060Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478578077) {}
[INFO ] 2020-01-20T00:03:00,062Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:03:00,073Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478579747) {}
[INFO ] 2020-01-20T00:03:00,075Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:03:00,091Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478579747) {}
[INFO ] 2020-01-20T00:03:00,091Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:03:00,091Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478579747) {}
[INFO ] 2020-01-20T00:03:00,091Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:03:00,402Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85797b51-910c-4c1a-9d67-0a7490a6cc7d, invocation_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, invocation_timestamp=2020-01-20T00:03:00.132Z, origin=Only For Testing, session_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, session_timestamp=2020-01-20T00:03:00.132Z, thread-id=133}
java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt:602) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:600) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:63) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:03:00,409Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=0a6cc379-712d-41f0-ba05-831690d8c3fe, timestamp: 2020-01-20T00:03:00.132Z, entityType: Invocation, sessionId=0a6cc379-712d-41f0-ba05-831690d8c3fe, timestamp: 2020-01-20T00:03:00.132Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D1FE6DF13573A8AFAD38669A281B82AB6C71DC726C855EF4DFC8C59E97FA1907), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=865D8CA4CFEA5381F7A63CFBAEE688B3EF78270D68565B019E5F5E2F01705817), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@ce8c950, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=b2bdfab4-3900-4178-952f-94fac0da942f) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85797b51-910c-4c1a-9d67-0a7490a6cc7d, invocation_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, invocation_timestamp=2020-01-20T00:03:00.132Z, origin=Only For Testing, session_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, session_timestamp=2020-01-20T00:03:00.132Z, thread-id=133}
[INFO ] 2020-01-20T00:03:00,411Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85797b51-910c-4c1a-9d67-0a7490a6cc7d, invocation_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, invocation_timestamp=2020-01-20T00:03:00.132Z, origin=Only For Testing, session_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, session_timestamp=2020-01-20T00:03:00.132Z, thread-id=133}
java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt:602) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:600) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:63) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:03:00,412Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85797b51-910c-4c1a-9d67-0a7490a6cc7d, invocation_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, invocation_timestamp=2020-01-20T00:03:00.132Z, origin=Only For Testing, session_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, session_timestamp=2020-01-20T00:03:00.132Z, thread-id=133}
[WARN ] 2020-01-20T00:03:00,434Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] errored, dumping all transitions:

 --- Transition of flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] ---
  Timestamp: 2020-01-20T00:03:00.373Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[85797b51-910c-4c1a-9d67-0a7490a6cc7d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=0a6cc379-712d-41f0-ba05-831690d8c3fe, timestamp: 2020-01-20T00:03:00.132Z, entityType: Invocation, sessionId=0a6cc379-712d-41f0-ba05-831690d8c3fe, timestamp: 2020-01-20T00:03:00.132Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D1FE6DF13573A8AFAD38669A281B82AB6C71DC726C855EF4DFC8C59E97FA1907), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=865D8CA4CFEA5381F7A63CFBAEE688B3EF78270D68565B019E5F5E2F01705817), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@73c42cb9])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@73c42cb9])
    SignalFlowHasStarted(flowId=[85797b51-910c-4c1a-9d67-0a7490a6cc7d])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@73c42cb9]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] ---
  Timestamp: 2020-01-20T00:03:00.414Z
  Event: Error(exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4914087056083450552, exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] ---
  Timestamp: 2020-01-20T00:03:00.420Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] ---
  Timestamp: 2020-01-20T00:03:00.423Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85797b51-910c-4c1a-9d67-0a7490a6cc7d, invocation_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, invocation_timestamp=2020-01-20T00:03:00.132Z, origin=Only For Testing, session_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, session_timestamp=2020-01-20T00:03:00.132Z, thread-id=133}
[WARN ] 2020-01-20T00:03:00,434Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] error [errorCode=ob2okw, moreInformationAt=https://errors.corda.net/OS/4.0/ob2okw] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85797b51-910c-4c1a-9d67-0a7490a6cc7d, invocation_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, invocation_timestamp=2020-01-20T00:03:00.132Z, origin=Only For Testing, session_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, session_timestamp=2020-01-20T00:03:00.132Z, thread-id=133}
java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt:602) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:600) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:63) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-20T00:03:00,438Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85797b51-910c-4c1a-9d67-0a7490a6cc7d, invocation_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, invocation_timestamp=2020-01-20T00:03:00.132Z, origin=Only For Testing, session_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, session_timestamp=2020-01-20T00:03:00.132Z, thread-id=133}
[WARN ] 2020-01-20T00:03:00,513Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] errored, dumping all transitions:

 --- Transition of flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] ---
  Timestamp: 2020-01-20T00:03:00.373Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[85797b51-910c-4c1a-9d67-0a7490a6cc7d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=0a6cc379-712d-41f0-ba05-831690d8c3fe, timestamp: 2020-01-20T00:03:00.132Z, entityType: Invocation, sessionId=0a6cc379-712d-41f0-ba05-831690d8c3fe, timestamp: 2020-01-20T00:03:00.132Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D1FE6DF13573A8AFAD38669A281B82AB6C71DC726C855EF4DFC8C59E97FA1907), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=865D8CA4CFEA5381F7A63CFBAEE688B3EF78270D68565B019E5F5E2F01705817), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@73c42cb9])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@73c42cb9])
    SignalFlowHasStarted(flowId=[85797b51-910c-4c1a-9d67-0a7490a6cc7d])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@73c42cb9]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] ---
  Timestamp: 2020-01-20T00:03:00.414Z
  Event: Error(exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4914087056083450552, exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] ---
  Timestamp: 2020-01-20T00:03:00.420Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] ---
  Timestamp: 2020-01-20T00:03:00.423Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] ---
  Timestamp: 2020-01-20T00:03:00.507Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-4914087056083450552)], sessions=[], senderUUID=b2bdfab4-3900-4178-952f-94fac0da942f)
    CreateTransaction
    RemoveCheckpoint(id=[85797b51-910c-4c1a-9d67-0a7490a6cc7d])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=85797b51-910c-4c1a-9d67-0a7490a6cc7d)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[85797b51-910c-4c1a-9d67-0a7490a6cc7d], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-4914087056083450552, exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=0a6cc379-712d-41f0-ba05-831690d8c3fe, timestamp: 2020-01-20T00:03:00.132Z, entityType: Invocation, sessionId=0a6cc379-712d-41f0-ba05-831690d8c3fe, timestamp: 2020-01-20T00:03:00.132Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=D1FE6DF13573A8AFAD38669A281B82AB6C71DC726C855EF4DFC8C59E97FA1907), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=865D8CA4CFEA5381F7A63CFBAEE688B3EF78270D68565B019E5F5E2F01705817), errorState=Errored(errors=[FlowError(errorId=-4914087056083450552, exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@ce8c950, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=b2bdfab4-3900-4178-952f-94fac0da942f))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85797b51-910c-4c1a-9d67-0a7490a6cc7d, invocation_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, invocation_timestamp=2020-01-20T00:03:00.132Z, origin=Only For Testing, session_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, session_timestamp=2020-01-20T00:03:00.132Z, thread-id=133}
[WARN ] 2020-01-20T00:03:00,513Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [85797b51-910c-4c1a-9d67-0a7490a6cc7d] error [errorCode=ob2okw, moreInformationAt=https://errors.corda.net/OS/4.0/ob2okw] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85797b51-910c-4c1a-9d67-0a7490a6cc7d, invocation_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, invocation_timestamp=2020-01-20T00:03:00.132Z, origin=Only For Testing, session_id=0a6cc379-712d-41f0-ba05-831690d8c3fe, session_timestamp=2020-01-20T00:03:00.132Z, thread-id=133}
java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt:602) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:600) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:63) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:07:47,694Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\IdeaProjects\bootcamp-cordapp ... {}
[INFO ] 2020-01-20T00:07:57,060Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-000739.334\nodes\0\cordapps] {}
[INFO ] 2020-01-20T00:07:57,067Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000739.334/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:07:57,113Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000739.334/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-20T00:07:57,413Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:07:58,280Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:07:58,407Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:07:58,408Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:07:58,409Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:07:58,607Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:07:39.244Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:08:04,566Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:08:04,572Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-000739.334\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:08:04,572Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:08:04,575Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:08:04,684Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:08:04,698Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:08:07,817Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:08:08,813Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:08:08,899Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:08:08,926Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:08:08,926Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:08:09,307Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:08:09,325Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:08:09,325Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478889325) {}
[INFO ] 2020-01-20T00:08:09,334Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:08:09,541Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478889325) {}
[INFO ] 2020-01-20T00:08:09,632Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:08:09,661Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478889325) {}
[INFO ] 2020-01-20T00:08:09,703Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:08:10,271Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77D47EC7B861BD7A140275BAECCFABA49ECECAEDBA0F5272B8F33CB94059D3A0 uploader=app filename=null {}
[INFO ] 2020-01-20T00:08:10,284Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-20T00:08:10,291Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-20T00:08:10,842Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478889325) {}
[INFO ] 2020-01-20T00:08:10,868Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478889325) {}
[INFO ] 2020-01-20T00:08:10,870Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:08:10,870Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478889325) {}
[INFO ] 2020-01-20T00:08:10,871Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:08:10,923Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-000739.334\nodes\1\cordapps] {}
[INFO ] 2020-01-20T00:08:10,924Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000739.334/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:08:10,924Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000739.334/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-20T00:08:11,124Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:08:11,142Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:08:11,225Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:08:11,225Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:08:11,226Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:08:11,231Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:07:39.244Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:08:12,039Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:08:12,042Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-000739.334\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:08:12,042Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:08:12,044Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:08:12,050Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:08:12,050Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:08:12,166Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:08:12,178Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:08:12,182Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:08:12,183Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T00:08:12,225Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:08:12,225Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:08:12,385Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:08:12,391Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:08:12,391Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478892391) {}
[INFO ] 2020-01-20T00:08:12,394Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:08:12,404Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478892391) {}
[INFO ] 2020-01-20T00:08:12,423Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:08:12,429Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478892391) {}
[INFO ] 2020-01-20T00:08:12,437Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:08:12,650Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77D47EC7B861BD7A140275BAECCFABA49ECECAEDBA0F5272B8F33CB94059D3A0 uploader=app filename=null {}
[INFO ] 2020-01-20T00:08:12,660Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478892391) {}
[INFO ] 2020-01-20T00:08:12,663Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478889325) {}
[INFO ] 2020-01-20T00:08:12,665Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:08:12,681Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478892391) {}
[INFO ] 2020-01-20T00:08:12,683Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:08:12,696Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478892391) {}
[INFO ] 2020-01-20T00:08:12,696Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:08:12,696Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478892391) {}
[INFO ] 2020-01-20T00:08:12,696Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:08:12,706Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-000739.334\nodes\2\cordapps] {}
[INFO ] 2020-01-20T00:08:12,707Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000739.334/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:08:12,707Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000739.334/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-20T00:08:12,928Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:08:12,943Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:08:13,011Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:08:13,011Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:08:13,011Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:08:13,019Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:07:39.244Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:08:13,707Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:08:13,710Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-000739.334\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:08:13,710Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:08:13,712Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:08:13,716Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:08:13,717Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:08:13,819Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:08:13,833Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:08:13,836Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:08:13,841Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T00:08:13,879Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:08:13,879Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:08:14,034Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:08:14,040Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:08:14,041Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478894040) {}
[INFO ] 2020-01-20T00:08:14,044Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:08:14,053Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478894040) {}
[INFO ] 2020-01-20T00:08:14,075Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:08:14,084Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478894040) {}
[INFO ] 2020-01-20T00:08:14,093Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:08:14,304Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=77D47EC7B861BD7A140275BAECCFABA49ECECAEDBA0F5272B8F33CB94059D3A0 uploader=app filename=null {}
[INFO ] 2020-01-20T00:08:14,317Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478894040) {}
[INFO ] 2020-01-20T00:08:14,320Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478889325) {}
[INFO ] 2020-01-20T00:08:14,323Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:08:14,337Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478894040) {}
[INFO ] 2020-01-20T00:08:14,339Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:08:14,355Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478892391) {}
[INFO ] 2020-01-20T00:08:14,357Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:08:14,371Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478894040) {}
[INFO ] 2020-01-20T00:08:14,373Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:08:14,387Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478894040) {}
[INFO ] 2020-01-20T00:08:14,387Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:08:14,387Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478894040) {}
[INFO ] 2020-01-20T00:08:14,388Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:08:14,726Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9c452fb6-aeb6-4746-82a3-415daec923c5, invocation_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, invocation_timestamp=2020-01-20T00:08:14.431Z, origin=Only For Testing, session_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, session_timestamp=2020-01-20T00:08:14.431Z, thread-id=133}
java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt:602) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:600) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:63) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:08:14,736Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [9c452fb6-aeb6-4746-82a3-415daec923c5] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=c81b1eb8-8897-4f9c-942d-613c21350d6d, timestamp: 2020-01-20T00:08:14.431Z, entityType: Invocation, sessionId=c81b1eb8-8897-4f9c-942d-613c21350d6d, timestamp: 2020-01-20T00:08:14.431Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=77D47EC7B861BD7A140275BAECCFABA49ECECAEDBA0F5272B8F33CB94059D3A0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=1CF85B634BAC12D2565D0D4664950030FED41B640B4F30D9B89DD483A40E6913), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@3caa0f4e, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=98b00652-b4c4-4d11-a20b-96570cec19ff) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9c452fb6-aeb6-4746-82a3-415daec923c5, invocation_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, invocation_timestamp=2020-01-20T00:08:14.431Z, origin=Only For Testing, session_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, session_timestamp=2020-01-20T00:08:14.431Z, thread-id=133}
[INFO ] 2020-01-20T00:08:14,739Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [9c452fb6-aeb6-4746-82a3-415daec923c5] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9c452fb6-aeb6-4746-82a3-415daec923c5, invocation_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, invocation_timestamp=2020-01-20T00:08:14.431Z, origin=Only For Testing, session_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, session_timestamp=2020-01-20T00:08:14.431Z, thread-id=133}
java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt:602) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:600) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:63) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:08:14,740Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [9c452fb6-aeb6-4746-82a3-415daec923c5] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9c452fb6-aeb6-4746-82a3-415daec923c5, invocation_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, invocation_timestamp=2020-01-20T00:08:14.431Z, origin=Only For Testing, session_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, session_timestamp=2020-01-20T00:08:14.431Z, thread-id=133}
[WARN ] 2020-01-20T00:08:14,762Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9c452fb6-aeb6-4746-82a3-415daec923c5] errored, dumping all transitions:

 --- Transition of flow [9c452fb6-aeb6-4746-82a3-415daec923c5] ---
  Timestamp: 2020-01-20T00:08:14.695Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[9c452fb6-aeb6-4746-82a3-415daec923c5], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=c81b1eb8-8897-4f9c-942d-613c21350d6d, timestamp: 2020-01-20T00:08:14.431Z, entityType: Invocation, sessionId=c81b1eb8-8897-4f9c-942d-613c21350d6d, timestamp: 2020-01-20T00:08:14.431Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=77D47EC7B861BD7A140275BAECCFABA49ECECAEDBA0F5272B8F33CB94059D3A0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=1CF85B634BAC12D2565D0D4664950030FED41B640B4F30D9B89DD483A40E6913), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1ebdd402])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1ebdd402])
    SignalFlowHasStarted(flowId=[9c452fb6-aeb6-4746-82a3-415daec923c5])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1ebdd402]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [9c452fb6-aeb6-4746-82a3-415daec923c5] ---
  Timestamp: 2020-01-20T00:08:14.742Z
  Event: Error(exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5729054152235220802, exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [9c452fb6-aeb6-4746-82a3-415daec923c5] ---
  Timestamp: 2020-01-20T00:08:14.747Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9c452fb6-aeb6-4746-82a3-415daec923c5] ---
  Timestamp: 2020-01-20T00:08:14.751Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9c452fb6-aeb6-4746-82a3-415daec923c5, invocation_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, invocation_timestamp=2020-01-20T00:08:14.431Z, origin=Only For Testing, session_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, session_timestamp=2020-01-20T00:08:14.431Z, thread-id=133}
[WARN ] 2020-01-20T00:08:14,762Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9c452fb6-aeb6-4746-82a3-415daec923c5] error [errorCode=ob2okw, moreInformationAt=https://errors.corda.net/OS/4.0/ob2okw] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9c452fb6-aeb6-4746-82a3-415daec923c5, invocation_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, invocation_timestamp=2020-01-20T00:08:14.431Z, origin=Only For Testing, session_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, session_timestamp=2020-01-20T00:08:14.431Z, thread-id=133}
java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt:602) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:600) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:63) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-20T00:08:14,766Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9c452fb6-aeb6-4746-82a3-415daec923c5, invocation_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, invocation_timestamp=2020-01-20T00:08:14.431Z, origin=Only For Testing, session_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, session_timestamp=2020-01-20T00:08:14.431Z, thread-id=133}
[WARN ] 2020-01-20T00:08:14,824Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9c452fb6-aeb6-4746-82a3-415daec923c5] errored, dumping all transitions:

 --- Transition of flow [9c452fb6-aeb6-4746-82a3-415daec923c5] ---
  Timestamp: 2020-01-20T00:08:14.695Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[9c452fb6-aeb6-4746-82a3-415daec923c5], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=c81b1eb8-8897-4f9c-942d-613c21350d6d, timestamp: 2020-01-20T00:08:14.431Z, entityType: Invocation, sessionId=c81b1eb8-8897-4f9c-942d-613c21350d6d, timestamp: 2020-01-20T00:08:14.431Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=77D47EC7B861BD7A140275BAECCFABA49ECECAEDBA0F5272B8F33CB94059D3A0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=1CF85B634BAC12D2565D0D4664950030FED41B640B4F30D9B89DD483A40E6913), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1ebdd402])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1ebdd402])
    SignalFlowHasStarted(flowId=[9c452fb6-aeb6-4746-82a3-415daec923c5])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@1ebdd402]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [9c452fb6-aeb6-4746-82a3-415daec923c5] ---
  Timestamp: 2020-01-20T00:08:14.742Z
  Event: Error(exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5729054152235220802, exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [9c452fb6-aeb6-4746-82a3-415daec923c5] ---
  Timestamp: 2020-01-20T00:08:14.747Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9c452fb6-aeb6-4746-82a3-415daec923c5] ---
  Timestamp: 2020-01-20T00:08:14.751Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [9c452fb6-aeb6-4746-82a3-415daec923c5] ---
  Timestamp: 2020-01-20T00:08:14.818Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-5729054152235220802)], sessions=[], senderUUID=98b00652-b4c4-4d11-a20b-96570cec19ff)
    CreateTransaction
    RemoveCheckpoint(id=[9c452fb6-aeb6-4746-82a3-415daec923c5])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=9c452fb6-aeb6-4746-82a3-415daec923c5)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[9c452fb6-aeb6-4746-82a3-415daec923c5], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-5729054152235220802, exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=c81b1eb8-8897-4f9c-942d-613c21350d6d, timestamp: 2020-01-20T00:08:14.431Z, entityType: Invocation, sessionId=c81b1eb8-8897-4f9c-942d-613c21350d6d, timestamp: 2020-01-20T00:08:14.431Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=77D47EC7B861BD7A140275BAECCFABA49ECECAEDBA0F5272B8F33CB94059D3A0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=1CF85B634BAC12D2565D0D4664950030FED41B640B4F30D9B89DD483A40E6913), errorState=Errored(errors=[FlowError(errorId=-5729054152235220802, exception=java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@3caa0f4e, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=98b00652-b4c4-4d11-a20b-96570cec19ff))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9c452fb6-aeb6-4746-82a3-415daec923c5, invocation_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, invocation_timestamp=2020-01-20T00:08:14.431Z, origin=Only For Testing, session_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, session_timestamp=2020-01-20T00:08:14.431Z, thread-id=133}
[WARN ] 2020-01-20T00:08:14,824Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9c452fb6-aeb6-4746-82a3-415daec923c5] error [errorCode=ob2okw, moreInformationAt=https://errors.corda.net/OS/4.0/ob2okw] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=9c452fb6-aeb6-4746-82a3-415daec923c5, invocation_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, invocation_timestamp=2020-01-20T00:08:14.431Z, origin=Only For Testing, session_id=c81b1eb8-8897-4f9c-942d-613c21350d6d, session_timestamp=2020-01-20T00:08:14.431Z, thread-id=133}
java.lang.IllegalStateException: Need to specify a notary for the state, or set a default one on TransactionBuilder initialisation
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt:602) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState$default(TransactionBuilder.kt:600) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addOutputState(TransactionBuilder.kt) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:63) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:09:25,681Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\IdeaProjects\bootcamp-cordapp ... {}
[INFO ] 2020-01-20T00:09:35,135Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-000917.684\nodes\0\cordapps] {}
[INFO ] 2020-01-20T00:09:35,146Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000917.684/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:09:35,193Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000917.684/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-20T00:09:35,502Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:09:36,366Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:09:36,492Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:09:36,493Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:09:36,495Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:09:36,707Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:09:17.601Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:09:42,731Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:09:42,745Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-000917.684\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:09:42,745Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:09:42,748Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:09:42,913Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:09:42,921Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:09:45,908Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:09:46,923Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:09:46,993Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:09:47,018Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:09:47,019Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:09:47,400Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:09:47,413Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:09:47,414Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478987413) {}
[INFO ] 2020-01-20T00:09:47,420Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:09:47,631Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478987413) {}
[INFO ] 2020-01-20T00:09:47,725Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:09:47,752Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478987413) {}
[INFO ] 2020-01-20T00:09:47,788Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:09:48,290Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=47999E87E9D5C67E1BAFE79FE51628A724B772987539F4D625AF0FFEC1863550 uploader=app filename=null {}
[INFO ] 2020-01-20T00:09:48,298Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-20T00:09:48,303Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-20T00:09:48,812Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478987413) {}
[INFO ] 2020-01-20T00:09:48,837Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478987413) {}
[INFO ] 2020-01-20T00:09:48,839Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:09:48,840Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478987413) {}
[INFO ] 2020-01-20T00:09:48,840Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:09:48,867Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-000917.684\nodes\1\cordapps] {}
[INFO ] 2020-01-20T00:09:48,871Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000917.684/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:09:48,872Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000917.684/nodes/1/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-20T00:09:49,082Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:09:49,099Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:09:49,176Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:09:49,177Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:09:49,177Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:09:49,183Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:09:17.601Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:09:49,995Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:09:50,000Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-000917.684\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:09:50,001Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:09:50,003Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:09:50,007Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:09:50,007Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:09:50,130Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:09:50,143Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:09:50,148Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:09:50,149Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T00:09:50,189Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:09:50,189Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:09:50,360Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:09:50,367Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:09:50,367Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478990367) {}
[INFO ] 2020-01-20T00:09:50,370Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:09:50,380Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478990367) {}
[INFO ] 2020-01-20T00:09:50,401Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:09:50,407Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478990367) {}
[INFO ] 2020-01-20T00:09:50,414Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:09:50,634Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=47999E87E9D5C67E1BAFE79FE51628A724B772987539F4D625AF0FFEC1863550 uploader=app filename=null {}
[INFO ] 2020-01-20T00:09:50,643Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478990367) {}
[INFO ] 2020-01-20T00:09:50,649Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478987413) {}
[INFO ] 2020-01-20T00:09:50,651Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:09:50,667Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478990367) {}
[INFO ] 2020-01-20T00:09:50,669Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:09:50,681Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478990367) {}
[INFO ] 2020-01-20T00:09:50,682Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:09:50,682Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478990367) {}
[INFO ] 2020-01-20T00:09:50,682Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:09:50,691Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-000917.684\nodes\2\cordapps] {}
[INFO ] 2020-01-20T00:09:50,692Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000917.684/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:09:50,693Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/IdeaProjects/bootcamp-cordapp/build/mock-network/20200120-000917.684/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-01-20T00:09:50,871Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:09:50,885Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:09:50,949Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:09:50,950Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:09:50,950Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:09:50,955Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:09:17.601Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:09:51,582Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:09:51,586Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-000917.684\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:09:51,587Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:09:51,589Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:09:51,592Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:09:51,592Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:09:51,698Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:09:51,711Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:09:51,716Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:09:51,718Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T00:09:51,760Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:09:51,760Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:09:51,916Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:09:51,922Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:09:51,922Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478991922) {}
[INFO ] 2020-01-20T00:09:51,926Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:09:51,935Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478991922) {}
[INFO ] 2020-01-20T00:09:51,956Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:09:51,961Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478991922) {}
[INFO ] 2020-01-20T00:09:51,970Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:09:52,180Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=47999E87E9D5C67E1BAFE79FE51628A724B772987539F4D625AF0FFEC1863550 uploader=app filename=null {}
[INFO ] 2020-01-20T00:09:52,194Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478991922) {}
[INFO ] 2020-01-20T00:09:52,199Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579478987413) {}
[INFO ] 2020-01-20T00:09:52,202Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:09:52,214Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478991922) {}
[INFO ] 2020-01-20T00:09:52,216Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:09:52,230Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579478990367) {}
[INFO ] 2020-01-20T00:09:52,232Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:09:52,247Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478991922) {}
[INFO ] 2020-01-20T00:09:52,249Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:09:52,266Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478991922) {}
[INFO ] 2020-01-20T00:09:52,266Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:09:52,266Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579478991922) {}
[INFO ] 2020-01-20T00:09:52,266Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-01-20T00:09:52,589Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(java_bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12, invocation_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, invocation_timestamp=2020-01-20T00:09:52.309Z, origin=Only For Testing, session_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, session_timestamp=2020-01-20T00:09:52.309Z, thread-id=134}
[INFO ] 2020-01-20T00:09:52,599Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12, invocation_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, invocation_timestamp=2020-01-20T00:09:52.309Z, origin=Only For Testing, session_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, session_timestamp=2020-01-20T00:09:52.309Z, thread-id=134}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging
	at net.corda.core.transactions.TransactionBuilder.selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:445) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$3.invoke(TransactionBuilder.kt:309) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:317) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:242) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:134) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:73) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:09:52,607Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, timestamp: 2020-01-20T00:09:52.309Z, entityType: Invocation, sessionId=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, timestamp: 2020-01-20T00:09:52.309Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=47999E87E9D5C67E1BAFE79FE51628A724B772987539F4D625AF0FFEC1863550), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=ED95123501F50323267B28B6E6FBD0EF5508454C87D4556350C2814C35656521), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@1ccb5a64, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=036fc549-f57a-4824-b08f-54c552207845) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12, invocation_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, invocation_timestamp=2020-01-20T00:09:52.309Z, origin=Only For Testing, session_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, session_timestamp=2020-01-20T00:09:52.309Z, thread-id=134}
[INFO ] 2020-01-20T00:09:52,610Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12, invocation_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, invocation_timestamp=2020-01-20T00:09:52.309Z, origin=Only For Testing, session_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, session_timestamp=2020-01-20T00:09:52.309Z, thread-id=134}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging
	at net.corda.core.transactions.TransactionBuilder.selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:445) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$3.invoke(TransactionBuilder.kt:309) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:317) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:242) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:134) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:73) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:09:52,611Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12, invocation_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, invocation_timestamp=2020-01-20T00:09:52.309Z, origin=Only For Testing, session_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, session_timestamp=2020-01-20T00:09:52.309Z, thread-id=134}
[WARN ] 2020-01-20T00:09:52,637Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] errored, dumping all transitions:

 --- Transition of flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] ---
  Timestamp: 2020-01-20T00:09:52.549Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, timestamp: 2020-01-20T00:09:52.309Z, entityType: Invocation, sessionId=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, timestamp: 2020-01-20T00:09:52.309Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=47999E87E9D5C67E1BAFE79FE51628A724B772987539F4D625AF0FFEC1863550), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=ED95123501F50323267B28B6E6FBD0EF5508454C87D4556350C2814C35656521), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4b946bfb])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4b946bfb])
    SignalFlowHasStarted(flowId=[e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4b946bfb]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] ---
  Timestamp: 2020-01-20T00:09:52.613Z
  Event: Error(exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2763359908213855250, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] ---
  Timestamp: 2020-01-20T00:09:52.619Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] ---
  Timestamp: 2020-01-20T00:09:52.624Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12, invocation_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, invocation_timestamp=2020-01-20T00:09:52.309Z, origin=Only For Testing, session_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, session_timestamp=2020-01-20T00:09:52.309Z, thread-id=134}
[WARN ] 2020-01-20T00:09:52,637Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] error [errorCode=gyt3ap, moreInformationAt=https://errors.corda.net/OS/4.0/gyt3ap] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12, invocation_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, invocation_timestamp=2020-01-20T00:09:52.309Z, origin=Only For Testing, session_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, session_timestamp=2020-01-20T00:09:52.309Z, thread-id=134}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging
	at net.corda.core.transactions.TransactionBuilder.selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:445) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$3.invoke(TransactionBuilder.kt:309) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:317) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:242) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:134) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:73) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-20T00:09:52,641Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error [errorCode=gyt3ap, moreInformationAt=https://errors.corda.net/OS/4.0/gyt3ap] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12, invocation_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, invocation_timestamp=2020-01-20T00:09:52.309Z, origin=Only For Testing, session_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, session_timestamp=2020-01-20T00:09:52.309Z, thread-id=134}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging
	at net.corda.core.transactions.TransactionBuilder.selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:445) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$3.invoke(TransactionBuilder.kt:309) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:317) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:242) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:134) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:73) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-20T00:09:52,712Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] errored, dumping all transitions:

 --- Transition of flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] ---
  Timestamp: 2020-01-20T00:09:52.549Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, timestamp: 2020-01-20T00:09:52.309Z, entityType: Invocation, sessionId=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, timestamp: 2020-01-20T00:09:52.309Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=47999E87E9D5C67E1BAFE79FE51628A724B772987539F4D625AF0FFEC1863550), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=ED95123501F50323267B28B6E6FBD0EF5508454C87D4556350C2814C35656521), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4b946bfb])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4b946bfb])
    SignalFlowHasStarted(flowId=[e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@4b946bfb]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] ---
  Timestamp: 2020-01-20T00:09:52.613Z
  Event: Error(exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2763359908213855250, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] ---
  Timestamp: 2020-01-20T00:09:52.619Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] ---
  Timestamp: 2020-01-20T00:09:52.624Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] ---
  Timestamp: 2020-01-20T00:09:52.706Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging, errorId=2763359908213855250)], sessions=[], senderUUID=036fc549-f57a-4824-b08f-54c552207845)
    CreateTransaction
    RemoveCheckpoint(id=[e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=2763359908213855250, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, timestamp: 2020-01-20T00:09:52.309Z, entityType: Invocation, sessionId=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, timestamp: 2020-01-20T00:09:52.309Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp, corDappHash=47999E87E9D5C67E1BAFE79FE51628A724B772987539F4D625AF0FFEC1863550), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=ED95123501F50323267B28B6E6FBD0EF5508454C87D4556350C2814C35656521), errorState=Errored(errors=[FlowError(errorId=2763359908213855250, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@1ccb5a64, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=036fc549-f57a-4824-b08f-54c552207845))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12, invocation_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, invocation_timestamp=2020-01-20T00:09:52.309Z, origin=Only For Testing, session_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, session_timestamp=2020-01-20T00:09:52.309Z, thread-id=134}
[WARN ] 2020-01-20T00:09:52,712Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12] error [errorCode=gyt3ap, moreInformationAt=https://errors.corda.net/OS/4.0/gyt3ap] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e18b67e8-ec05-4c2c-aaa2-f4fdfc934e12, invocation_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, invocation_timestamp=2020-01-20T00:09:52.309Z, origin=Only For Testing, session_id=4f00d71e-004c-467e-b7c8-2c2edbc85d3d, session_timestamp=2020-01-20T00:09:52.309Z, thread-id=134}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging
	at net.corda.core.transactions.TransactionBuilder.selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:445) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$3.invoke(TransactionBuilder.kt:309) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:317) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:242) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:134) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:73) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:45:06,448Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\git\bootcamp-cordappp ... {}
[INFO ] 2020-01-20T00:45:15,951Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-004458.020\nodes\0\cordapps] {}
[INFO ] 2020-01-20T00:45:15,959Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-004458.020/nodes/0/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:45:15,995Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-004458.020/nodes/0/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T00:45:16,279Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:45:17,114Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:45:17,226Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:45:17,227Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:45:17,228Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:45:17,442Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:44:57.932Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:45:23,430Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:45:23,469Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-004458.020\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:45:23,469Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:45:23,473Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:45:23,601Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:45:23,616Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:45:26,668Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:45:27,630Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:45:27,699Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:45:27,724Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:45:27,725Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:45:28,084Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:45:28,098Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:45:28,098Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481128098) {}
[INFO ] 2020-01-20T00:45:28,105Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:45:28,324Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481128098) {}
[INFO ] 2020-01-20T00:45:28,426Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:45:28,456Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481128098) {}
[INFO ] 2020-01-20T00:45:28,495Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:45:29,039Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=50F6CEEAEB095CA403C8DCDE5E9A4E0B10627FC81D6AE607144B7B471493E090 uploader=app filename=null {}
[INFO ] 2020-01-20T00:45:29,046Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-20T00:45:29,050Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-20T00:45:29,571Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481128098) {}
[INFO ] 2020-01-20T00:45:29,598Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481128098) {}
[INFO ] 2020-01-20T00:45:29,600Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:45:29,600Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481128098) {}
[INFO ] 2020-01-20T00:45:29,600Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:45:29,793Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-004458.020\nodes\1\cordapps] {}
[INFO ] 2020-01-20T00:45:29,794Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-004458.020/nodes/1/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:45:29,794Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-004458.020/nodes/1/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T00:45:29,820Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:45:29,842Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:45:29,917Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:45:29,917Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:45:29,917Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:45:29,923Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:44:57.932Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:45:30,775Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:45:30,779Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-004458.020\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:45:30,779Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:45:30,781Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:45:30,785Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:45:30,786Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:45:30,904Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:45:30,922Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:45:30,927Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:45:30,928Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T00:45:30,970Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:45:30,970Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:45:31,125Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:45:31,132Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:45:31,132Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481131132) {}
[INFO ] 2020-01-20T00:45:31,135Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:45:31,150Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481131132) {}
[INFO ] 2020-01-20T00:45:31,174Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:45:31,182Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481131132) {}
[INFO ] 2020-01-20T00:45:31,194Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:45:31,426Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=50F6CEEAEB095CA403C8DCDE5E9A4E0B10627FC81D6AE607144B7B471493E090 uploader=app filename=null {}
[INFO ] 2020-01-20T00:45:31,437Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481131132) {}
[INFO ] 2020-01-20T00:45:31,442Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481128098) {}
[INFO ] 2020-01-20T00:45:31,445Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:45:31,459Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481131132) {}
[INFO ] 2020-01-20T00:45:31,461Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:45:31,473Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481131132) {}
[INFO ] 2020-01-20T00:45:31,474Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:45:31,474Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481131132) {}
[INFO ] 2020-01-20T00:45:31,474Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:45:31,629Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-004458.020\nodes\2\cordapps] {}
[INFO ] 2020-01-20T00:45:31,630Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-004458.020/nodes/2/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:45:31,630Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-004458.020/nodes/2/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T00:45:31,659Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:45:31,679Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:45:31,771Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:45:31,771Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:45:31,771Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:45:31,777Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:44:57.932Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:45:32,462Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:45:32,465Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-004458.020\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:45:32,466Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:45:32,468Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:45:32,471Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:45:32,472Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:45:32,577Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:45:32,590Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:45:32,594Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:45:32,595Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T00:45:32,636Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:45:32,637Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:45:32,797Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:45:32,804Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:45:32,804Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481132804) {}
[INFO ] 2020-01-20T00:45:32,806Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:45:32,817Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481132804) {}
[INFO ] 2020-01-20T00:45:32,838Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:45:32,845Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481132804) {}
[INFO ] 2020-01-20T00:45:32,853Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:45:33,048Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=50F6CEEAEB095CA403C8DCDE5E9A4E0B10627FC81D6AE607144B7B471493E090 uploader=app filename=null {}
[INFO ] 2020-01-20T00:45:33,058Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481132804) {}
[INFO ] 2020-01-20T00:45:33,061Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481128098) {}
[INFO ] 2020-01-20T00:45:33,064Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:45:33,079Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481132804) {}
[INFO ] 2020-01-20T00:45:33,082Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:45:33,097Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481131132) {}
[INFO ] 2020-01-20T00:45:33,099Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:45:33,114Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481132804) {}
[INFO ] 2020-01-20T00:45:33,117Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:45:33,132Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481132804) {}
[INFO ] 2020-01-20T00:45:33,132Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:45:33,133Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481132804) {}
[INFO ] 2020-01-20T00:45:33,133Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-01-20T00:45:33,467Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(java_bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bed864b8-b9c4-478f-9431-0242656aa437, invocation_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, invocation_timestamp=2020-01-20T00:45:33.174Z, origin=Only For Testing, session_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, session_timestamp=2020-01-20T00:45:33.174Z, thread-id=132}
[INFO ] 2020-01-20T00:45:33,478Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bed864b8-b9c4-478f-9431-0242656aa437, invocation_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, invocation_timestamp=2020-01-20T00:45:33.174Z, origin=Only For Testing, session_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, session_timestamp=2020-01-20T00:45:33.174Z, thread-id=132}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging
	at net.corda.core.transactions.TransactionBuilder.selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:445) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$3.invoke(TransactionBuilder.kt:309) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:317) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:242) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:134) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:73) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:45:33,486Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [bed864b8-b9c4-478f-9431-0242656aa437] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4a714a1a-b842-48f4-a98e-5a4beecd2187, timestamp: 2020-01-20T00:45:33.174Z, entityType: Invocation, sessionId=4a714a1a-b842-48f4-a98e-5a4beecd2187, timestamp: 2020-01-20T00:45:33.174Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=50F6CEEAEB095CA403C8DCDE5E9A4E0B10627FC81D6AE607144B7B471493E090), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BDDC92AF3451B9456ACB2BEFDEC9B8FE732E7BB7CA4AB6C80571C8E79E98D9C3), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@31e12032, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=f92c3159-9fcf-4d26-a3d8-1530bf5097a0) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bed864b8-b9c4-478f-9431-0242656aa437, invocation_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, invocation_timestamp=2020-01-20T00:45:33.174Z, origin=Only For Testing, session_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, session_timestamp=2020-01-20T00:45:33.174Z, thread-id=132}
[INFO ] 2020-01-20T00:45:33,489Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [bed864b8-b9c4-478f-9431-0242656aa437] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bed864b8-b9c4-478f-9431-0242656aa437, invocation_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, invocation_timestamp=2020-01-20T00:45:33.174Z, origin=Only For Testing, session_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, session_timestamp=2020-01-20T00:45:33.174Z, thread-id=132}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging
	at net.corda.core.transactions.TransactionBuilder.selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:445) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$3.invoke(TransactionBuilder.kt:309) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:317) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:242) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:134) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:73) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:45:33,490Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [bed864b8-b9c4-478f-9431-0242656aa437] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bed864b8-b9c4-478f-9431-0242656aa437, invocation_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, invocation_timestamp=2020-01-20T00:45:33.174Z, origin=Only For Testing, session_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, session_timestamp=2020-01-20T00:45:33.174Z, thread-id=132}
[WARN ] 2020-01-20T00:45:33,520Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [bed864b8-b9c4-478f-9431-0242656aa437] errored, dumping all transitions:

 --- Transition of flow [bed864b8-b9c4-478f-9431-0242656aa437] ---
  Timestamp: 2020-01-20T00:45:33.420Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[bed864b8-b9c4-478f-9431-0242656aa437], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4a714a1a-b842-48f4-a98e-5a4beecd2187, timestamp: 2020-01-20T00:45:33.174Z, entityType: Invocation, sessionId=4a714a1a-b842-48f4-a98e-5a4beecd2187, timestamp: 2020-01-20T00:45:33.174Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=50F6CEEAEB095CA403C8DCDE5E9A4E0B10627FC81D6AE607144B7B471493E090), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BDDC92AF3451B9456ACB2BEFDEC9B8FE732E7BB7CA4AB6C80571C8E79E98D9C3), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@64085a27])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@64085a27])
    SignalFlowHasStarted(flowId=[bed864b8-b9c4-478f-9431-0242656aa437])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@64085a27]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [bed864b8-b9c4-478f-9431-0242656aa437] ---
  Timestamp: 2020-01-20T00:45:33.493Z
  Event: Error(exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6781327999959800014, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [bed864b8-b9c4-478f-9431-0242656aa437] ---
  Timestamp: 2020-01-20T00:45:33.499Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [bed864b8-b9c4-478f-9431-0242656aa437] ---
  Timestamp: 2020-01-20T00:45:33.505Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bed864b8-b9c4-478f-9431-0242656aa437, invocation_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, invocation_timestamp=2020-01-20T00:45:33.174Z, origin=Only For Testing, session_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, session_timestamp=2020-01-20T00:45:33.174Z, thread-id=132}
[WARN ] 2020-01-20T00:45:33,521Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [bed864b8-b9c4-478f-9431-0242656aa437] error [errorCode=gyt3ap, moreInformationAt=https://errors.corda.net/OS/4.0/gyt3ap] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bed864b8-b9c4-478f-9431-0242656aa437, invocation_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, invocation_timestamp=2020-01-20T00:45:33.174Z, origin=Only For Testing, session_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, session_timestamp=2020-01-20T00:45:33.174Z, thread-id=132}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging
	at net.corda.core.transactions.TransactionBuilder.selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:445) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$3.invoke(TransactionBuilder.kt:309) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:317) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:242) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:134) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:73) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-20T00:45:33,527Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error [errorCode=gyt3ap, moreInformationAt=https://errors.corda.net/OS/4.0/gyt3ap] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bed864b8-b9c4-478f-9431-0242656aa437, invocation_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, invocation_timestamp=2020-01-20T00:45:33.174Z, origin=Only For Testing, session_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, session_timestamp=2020-01-20T00:45:33.174Z, thread-id=132}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging
	at net.corda.core.transactions.TransactionBuilder.selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:445) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$3.invoke(TransactionBuilder.kt:309) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:317) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:242) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:134) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:73) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-20T00:45:33,592Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [bed864b8-b9c4-478f-9431-0242656aa437] errored, dumping all transitions:

 --- Transition of flow [bed864b8-b9c4-478f-9431-0242656aa437] ---
  Timestamp: 2020-01-20T00:45:33.420Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[bed864b8-b9c4-478f-9431-0242656aa437], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4a714a1a-b842-48f4-a98e-5a4beecd2187, timestamp: 2020-01-20T00:45:33.174Z, entityType: Invocation, sessionId=4a714a1a-b842-48f4-a98e-5a4beecd2187, timestamp: 2020-01-20T00:45:33.174Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=50F6CEEAEB095CA403C8DCDE5E9A4E0B10627FC81D6AE607144B7B471493E090), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BDDC92AF3451B9456ACB2BEFDEC9B8FE732E7BB7CA4AB6C80571C8E79E98D9C3), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@64085a27])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@64085a27])
    SignalFlowHasStarted(flowId=[bed864b8-b9c4-478f-9431-0242656aa437])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@64085a27]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [bed864b8-b9c4-478f-9431-0242656aa437] ---
  Timestamp: 2020-01-20T00:45:33.493Z
  Event: Error(exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6781327999959800014, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [bed864b8-b9c4-478f-9431-0242656aa437] ---
  Timestamp: 2020-01-20T00:45:33.499Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [bed864b8-b9c4-478f-9431-0242656aa437] ---
  Timestamp: 2020-01-20T00:45:33.505Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [bed864b8-b9c4-478f-9431-0242656aa437] ---
  Timestamp: 2020-01-20T00:45:33.586Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging, errorId=-6781327999959800014)], sessions=[], senderUUID=f92c3159-9fcf-4d26-a3d8-1530bf5097a0)
    CreateTransaction
    RemoveCheckpoint(id=[bed864b8-b9c4-478f-9431-0242656aa437])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=bed864b8-b9c4-478f-9431-0242656aa437)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[bed864b8-b9c4-478f-9431-0242656aa437], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-6781327999959800014, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=4a714a1a-b842-48f4-a98e-5a4beecd2187, timestamp: 2020-01-20T00:45:33.174Z, entityType: Invocation, sessionId=4a714a1a-b842-48f4-a98e-5a4beecd2187, timestamp: 2020-01-20T00:45:33.174Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=50F6CEEAEB095CA403C8DCDE5E9A4E0B10627FC81D6AE607144B7B471493E090), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=BDDC92AF3451B9456ACB2BEFDEC9B8FE732E7BB7CA4AB6C80571C8E79E98D9C3), errorState=Errored(errors=[FlowError(errorId=-6781327999959800014, exception=net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@31e12032, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=f92c3159-9fcf-4d26-a3d8-1530bf5097a0))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bed864b8-b9c4-478f-9431-0242656aa437, invocation_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, invocation_timestamp=2020-01-20T00:45:33.174Z, origin=Only For Testing, session_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, session_timestamp=2020-01-20T00:45:33.174Z, thread-id=132}
[WARN ] 2020-01-20T00:45:33,592Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [bed864b8-b9c4-478f-9431-0242656aa437] error [errorCode=gyt3ap, moreInformationAt=https://errors.corda.net/OS/4.0/gyt3ap] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=bed864b8-b9c4-478f-9431-0242656aa437, invocation_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, invocation_timestamp=2020-01-20T00:45:33.174Z, origin=Only For Testing, session_id=4a714a1a-b842-48f4-a98e-5a4beecd2187, session_timestamp=2020-01-20T00:45:33.174Z, thread-id=132}
net.corda.core.transactions.MissingContractAttachments: Cannot find contract attachments for java_bootcamp.TokenContractnull. See https://docs.corda.net/api-contract-constraints.html#debugging
	at net.corda.core.transactions.TransactionBuilder.selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:445) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.access$selectAttachmentThatSatisfiesConstraints(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$handleContract$3.invoke(TransactionBuilder.kt:309) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.handleContract(TransactionBuilder.kt:317) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.selectContractAttachmentsAndOutputStateConstraints(TransactionBuilder.kt:242) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:134) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:73) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:50:43,529Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\git\bootcamp-cordappp ... {}
[INFO ] 2020-01-20T00:50:53,072Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-005035.209\nodes\0\cordapps] {}
[INFO ] 2020-01-20T00:50:53,080Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-005035.209/nodes/0/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:50:53,117Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-005035.209/nodes/0/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T00:50:53,432Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:50:54,316Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:50:54,425Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:50:54,426Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:50:54,427Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:50:54,637Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:50:35.107Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:51:00,855Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:51:00,863Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-005035.209\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:51:00,863Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:51:00,867Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:51:00,962Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:51:00,988Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:51:04,075Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:51:05,083Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:51:05,178Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:51:05,208Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:51:05,209Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:51:05,581Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T00:51:05,595Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:51:05,595Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481465595) {}
[INFO ] 2020-01-20T00:51:05,602Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:51:05,813Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481465595) {}
[INFO ] 2020-01-20T00:51:05,913Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:51:05,942Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481465595) {}
[INFO ] 2020-01-20T00:51:05,983Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:51:06,569Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3459A85B22C414FC77858188B5AD8D14E22A63CD8142A6A276E2BA676D5CA78C uploader=app filename=null {}
[INFO ] 2020-01-20T00:51:06,576Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-20T00:51:06,581Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-20T00:51:07,121Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481465595) {}
[INFO ] 2020-01-20T00:51:07,151Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481465595) {}
[INFO ] 2020-01-20T00:51:07,153Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:51:07,153Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481465595) {}
[INFO ] 2020-01-20T00:51:07,154Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:51:07,174Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-005035.209\nodes\1\cordapps] {}
[INFO ] 2020-01-20T00:51:07,177Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-005035.209/nodes/1/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:51:07,178Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-005035.209/nodes/1/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T00:51:07,399Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:51:07,415Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:51:07,497Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:51:07,497Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:51:07,498Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:51:07,504Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:50:35.107Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:51:08,341Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:51:08,345Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-005035.209\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:51:08,345Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:51:08,348Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:51:08,358Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:51:08,359Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:51:08,501Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:51:08,517Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:51:08,522Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:51:08,523Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T00:51:08,564Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:51:08,564Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:51:08,735Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:51:08,742Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:51:08,742Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481468742) {}
[INFO ] 2020-01-20T00:51:08,746Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:51:08,759Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481468742) {}
[INFO ] 2020-01-20T00:51:08,780Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:51:08,785Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481468742) {}
[INFO ] 2020-01-20T00:51:08,794Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:51:09,000Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3459A85B22C414FC77858188B5AD8D14E22A63CD8142A6A276E2BA676D5CA78C uploader=app filename=null {}
[INFO ] 2020-01-20T00:51:09,009Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481468742) {}
[INFO ] 2020-01-20T00:51:09,013Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481465595) {}
[INFO ] 2020-01-20T00:51:09,017Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:51:09,031Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481468742) {}
[INFO ] 2020-01-20T00:51:09,033Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:51:09,046Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481468742) {}
[INFO ] 2020-01-20T00:51:09,046Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:51:09,046Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481468742) {}
[INFO ] 2020-01-20T00:51:09,046Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:51:09,219Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-005035.209\nodes\2\cordapps] {}
[INFO ] 2020-01-20T00:51:09,220Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-005035.209/nodes/2/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T00:51:09,220Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-005035.209/nodes/2/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T00:51:09,253Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T00:51:09,271Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T00:51:09,338Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:51:09,338Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T00:51:09,338Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T00:51:09,344Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T00:50:35.107Z
      epoch=1
  } {}
[INFO ] 2020-01-20T00:51:10,095Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T00:51:10,099Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-005035.209\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T00:51:10,099Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T00:51:10,102Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T00:51:10,104Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:51:10,105Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:51:10,218Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T00:51:10,230Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T00:51:10,235Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T00:51:10,236Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T00:51:10,274Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:51:10,275Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:51:10,444Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T00:51:10,452Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T00:51:10,452Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481470452) {}
[INFO ] 2020-01-20T00:51:10,454Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:51:10,464Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481470452) {}
[INFO ] 2020-01-20T00:51:10,486Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T00:51:10,491Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481470452) {}
[INFO ] 2020-01-20T00:51:10,498Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:51:10,707Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=3459A85B22C414FC77858188B5AD8D14E22A63CD8142A6A276E2BA676D5CA78C uploader=app filename=null {}
[INFO ] 2020-01-20T00:51:10,718Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481470452) {}
[INFO ] 2020-01-20T00:51:10,722Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579481465595) {}
[INFO ] 2020-01-20T00:51:10,724Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:51:10,742Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481470452) {}
[INFO ] 2020-01-20T00:51:10,743Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:51:10,756Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579481468742) {}
[INFO ] 2020-01-20T00:51:10,758Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:51:10,771Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481470452) {}
[INFO ] 2020-01-20T00:51:10,776Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T00:51:10,791Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481470452) {}
[INFO ] 2020-01-20T00:51:10,791Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:51:10,791Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579481470452) {}
[INFO ] 2020-01-20T00:51:10,792Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T00:51:11,149Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2, invocation_id=846fb59b-21ee-4836-85ec-3a52722e9b66, invocation_timestamp=2020-01-20T00:51:10.840Z, origin=Only For Testing, session_id=846fb59b-21ee-4836-85ec-3a52722e9b66, session_timestamp=2020-01-20T00:51:10.840Z, thread-id=133}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:73) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:142) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:72) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:141) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:73) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:51:11,157Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=846fb59b-21ee-4836-85ec-3a52722e9b66, timestamp: 2020-01-20T00:51:10.840Z, entityType: Invocation, sessionId=846fb59b-21ee-4836-85ec-3a52722e9b66, timestamp: 2020-01-20T00:51:10.840Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=3459A85B22C414FC77858188B5AD8D14E22A63CD8142A6A276E2BA676D5CA78C), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=36B59D81CF30665CF27A8AB73E148BB62107FCF5711B8FA1E8B1007E0E89C7B1), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@78bca6ed, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=b116a0a2-a8cb-4efe-98a5-4f5388eecdb5) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2, invocation_id=846fb59b-21ee-4836-85ec-3a52722e9b66, invocation_timestamp=2020-01-20T00:51:10.840Z, origin=Only For Testing, session_id=846fb59b-21ee-4836-85ec-3a52722e9b66, session_timestamp=2020-01-20T00:51:10.840Z, thread-id=133}
[INFO ] 2020-01-20T00:51:11,160Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2, invocation_id=846fb59b-21ee-4836-85ec-3a52722e9b66, invocation_timestamp=2020-01-20T00:51:10.840Z, origin=Only For Testing, session_id=846fb59b-21ee-4836-85ec-3a52722e9b66, session_timestamp=2020-01-20T00:51:10.840Z, thread-id=133}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:73) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:142) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:72) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:141) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:73) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T00:51:11,161Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2, invocation_id=846fb59b-21ee-4836-85ec-3a52722e9b66, invocation_timestamp=2020-01-20T00:51:10.840Z, origin=Only For Testing, session_id=846fb59b-21ee-4836-85ec-3a52722e9b66, session_timestamp=2020-01-20T00:51:10.840Z, thread-id=133}
[WARN ] 2020-01-20T00:51:11,185Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] errored, dumping all transitions:

 --- Transition of flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] ---
  Timestamp: 2020-01-20T00:51:11.097Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=846fb59b-21ee-4836-85ec-3a52722e9b66, timestamp: 2020-01-20T00:51:10.840Z, entityType: Invocation, sessionId=846fb59b-21ee-4836-85ec-3a52722e9b66, timestamp: 2020-01-20T00:51:10.840Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=3459A85B22C414FC77858188B5AD8D14E22A63CD8142A6A276E2BA676D5CA78C), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=36B59D81CF30665CF27A8AB73E148BB62107FCF5711B8FA1E8B1007E0E89C7B1), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@64c2691e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@64c2691e])
    SignalFlowHasStarted(flowId=[94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@64c2691e]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] ---
  Timestamp: 2020-01-20T00:51:11.163Z
  Event: Error(exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3648316958120932338, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] ---
  Timestamp: 2020-01-20T00:51:11.169Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] ---
  Timestamp: 2020-01-20T00:51:11.173Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2, invocation_id=846fb59b-21ee-4836-85ec-3a52722e9b66, invocation_timestamp=2020-01-20T00:51:10.840Z, origin=Only For Testing, session_id=846fb59b-21ee-4836-85ec-3a52722e9b66, session_timestamp=2020-01-20T00:51:10.840Z, thread-id=133}
[WARN ] 2020-01-20T00:51:11,185Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] error [errorCode=9gf8w0, moreInformationAt=https://errors.corda.net/OS/4.0/9gf8w0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2, invocation_id=846fb59b-21ee-4836-85ec-3a52722e9b66, invocation_timestamp=2020-01-20T00:51:10.840Z, origin=Only For Testing, session_id=846fb59b-21ee-4836-85ec-3a52722e9b66, session_timestamp=2020-01-20T00:51:10.840Z, thread-id=133}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:73) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:142) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:72) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:141) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:73) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-20T00:51:11,189Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2, invocation_id=846fb59b-21ee-4836-85ec-3a52722e9b66, invocation_timestamp=2020-01-20T00:51:10.840Z, origin=Only For Testing, session_id=846fb59b-21ee-4836-85ec-3a52722e9b66, session_timestamp=2020-01-20T00:51:10.840Z, thread-id=133}
[WARN ] 2020-01-20T00:51:11,241Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] errored, dumping all transitions:

 --- Transition of flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] ---
  Timestamp: 2020-01-20T00:51:11.097Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=846fb59b-21ee-4836-85ec-3a52722e9b66, timestamp: 2020-01-20T00:51:10.840Z, entityType: Invocation, sessionId=846fb59b-21ee-4836-85ec-3a52722e9b66, timestamp: 2020-01-20T00:51:10.840Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=3459A85B22C414FC77858188B5AD8D14E22A63CD8142A6A276E2BA676D5CA78C), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=36B59D81CF30665CF27A8AB73E148BB62107FCF5711B8FA1E8B1007E0E89C7B1), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@64c2691e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@64c2691e])
    SignalFlowHasStarted(flowId=[94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@64c2691e]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] ---
  Timestamp: 2020-01-20T00:51:11.163Z
  Event: Error(exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3648316958120932338, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] ---
  Timestamp: 2020-01-20T00:51:11.169Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] ---
  Timestamp: 2020-01-20T00:51:11.173Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] ---
  Timestamp: 2020-01-20T00:51:11.234Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-3648316958120932338)], sessions=[], senderUUID=b116a0a2-a8cb-4efe-98a5-4f5388eecdb5)
    CreateTransaction
    RemoveCheckpoint(id=[94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-3648316958120932338, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=846fb59b-21ee-4836-85ec-3a52722e9b66, timestamp: 2020-01-20T00:51:10.840Z, entityType: Invocation, sessionId=846fb59b-21ee-4836-85ec-3a52722e9b66, timestamp: 2020-01-20T00:51:10.840Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=3459A85B22C414FC77858188B5AD8D14E22A63CD8142A6A276E2BA676D5CA78C), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=36B59D81CF30665CF27A8AB73E148BB62107FCF5711B8FA1E8B1007E0E89C7B1), errorState=Errored(errors=[FlowError(errorId=-3648316958120932338, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@78bca6ed, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=b116a0a2-a8cb-4efe-98a5-4f5388eecdb5))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2, invocation_id=846fb59b-21ee-4836-85ec-3a52722e9b66, invocation_timestamp=2020-01-20T00:51:10.840Z, origin=Only For Testing, session_id=846fb59b-21ee-4836-85ec-3a52722e9b66, session_timestamp=2020-01-20T00:51:10.840Z, thread-id=133}
[WARN ] 2020-01-20T00:51:11,241Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2] error [errorCode=9gf8w0, moreInformationAt=https://errors.corda.net/OS/4.0/9gf8w0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=94f71ed4-e84d-4d9b-9a9c-2e08d92cfcc2, invocation_id=846fb59b-21ee-4836-85ec-3a52722e9b66, invocation_timestamp=2020-01-20T00:51:10.840Z, origin=Only For Testing, session_id=846fb59b-21ee-4836-85ec-3a52722e9b66, session_timestamp=2020-01-20T00:51:10.840Z, thread-id=133}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:73) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:142) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:43) ~[corda-core-4.0.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:72) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:141) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:451) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:459) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:73) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:19) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:03:41,680Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\git\bootcamp-cordappp ... {}
[INFO ] 2020-01-20T01:03:51,634Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010332.986\nodes\0\cordapps] {}
[INFO ] 2020-01-20T01:03:51,641Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010332.986/nodes/0/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:03:51,682Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010332.986/nodes/0/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:03:51,970Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:03:52,828Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:03:52,938Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:03:52,939Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:03:52,941Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:03:53,141Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:03:32.904Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:03:59,374Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:03:59,383Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010332.986\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:03:59,383Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:03:59,386Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:03:59,472Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:03:59,479Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:04:02,431Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:04:03,418Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:04:03,494Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:04:03,528Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:04:03,529Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:04:03,912Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:04:03,928Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:04:03,928Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482243928) {}
[INFO ] 2020-01-20T01:04:03,935Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:04:04,155Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482243928) {}
[INFO ] 2020-01-20T01:04:04,256Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:04:04,286Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482243928) {}
[INFO ] 2020-01-20T01:04:04,326Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:04:04,919Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:04:04,925Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-20T01:04:04,930Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-20T01:04:05,459Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482243928) {}
[INFO ] 2020-01-20T01:04:05,486Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482243928) {}
[INFO ] 2020-01-20T01:04:05,488Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:04:05,489Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482243928) {}
[INFO ] 2020-01-20T01:04:05,489Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:04:05,654Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010332.986\nodes\1\cordapps] {}
[INFO ] 2020-01-20T01:04:05,655Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010332.986/nodes/1/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:04:05,655Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010332.986/nodes/1/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:04:05,680Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:04:05,695Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:04:05,774Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:04:05,775Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:04:05,775Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:04:05,782Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:03:32.904Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:04:06,657Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:04:06,664Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010332.986\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:04:06,664Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:04:06,667Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:04:06,674Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:04:06,674Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:04:06,792Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:04:06,809Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:04:06,813Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:04:06,814Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:04:06,860Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:04:06,861Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:04:07,026Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:04:07,033Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:04:07,033Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482247033) {}
[INFO ] 2020-01-20T01:04:07,036Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:04:07,047Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482247033) {}
[INFO ] 2020-01-20T01:04:07,069Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:04:07,075Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482247033) {}
[INFO ] 2020-01-20T01:04:07,084Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:04:07,290Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:04:07,300Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482247033) {}
[INFO ] 2020-01-20T01:04:07,304Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482243928) {}
[INFO ] 2020-01-20T01:04:07,306Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:04:07,320Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482247033) {}
[INFO ] 2020-01-20T01:04:07,322Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:04:07,335Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482247033) {}
[INFO ] 2020-01-20T01:04:07,335Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:04:07,335Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482247033) {}
[INFO ] 2020-01-20T01:04:07,335Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:04:07,492Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010332.986\nodes\2\cordapps] {}
[INFO ] 2020-01-20T01:04:07,493Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010332.986/nodes/2/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:04:07,493Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010332.986/nodes/2/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:04:07,519Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:04:07,531Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:04:07,596Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:04:07,596Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:04:07,596Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:04:07,605Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:03:32.904Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:04:08,282Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:04:08,285Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010332.986\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:04:08,285Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:04:08,287Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:04:08,291Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:04:08,292Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:04:08,401Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:04:08,415Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:04:08,419Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:04:08,422Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:04:08,461Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:04:08,461Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:04:08,614Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:04:08,622Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:04:08,622Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482248622) {}
[INFO ] 2020-01-20T01:04:08,624Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:04:08,634Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482248622) {}
[INFO ] 2020-01-20T01:04:08,654Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:04:08,659Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482248622) {}
[INFO ] 2020-01-20T01:04:08,667Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:04:08,897Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:04:08,926Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482248622) {}
[INFO ] 2020-01-20T01:04:08,929Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482243928) {}
[INFO ] 2020-01-20T01:04:08,931Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:04:08,951Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482248622) {}
[INFO ] 2020-01-20T01:04:08,952Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:04:08,966Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482247033) {}
[INFO ] 2020-01-20T01:04:08,968Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:04:08,982Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482248622) {}
[INFO ] 2020-01-20T01:04:08,984Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:04:09,007Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482248622) {}
[INFO ] 2020-01-20T01:04:09,007Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:04:09,007Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482248622) {}
[INFO ] 2020-01-20T01:04:09,007Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-01-20T01:04:09,346Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135}
[WARN ] 2020-01-20T01:04:09,372Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135}
[WARN ] 2020-01-20T01:04:09,372Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135}
[WARN ] 2020-01-20T01:04:09,376Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135}
[WARN ] 2020-01-20T01:04:13,223Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135}
[WARN ] 2020-01-20T01:04:13,264Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135}
[WARN ] 2020-01-20T01:04:13,296Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135}
[WARN ] 2020-01-20T01:04:13,305Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135}
[WARN ] 2020-01-20T01:04:13,441Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135}
[WARN ] 2020-01-20T01:04:13,507Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[INFO ] 2020-01-20T01:04:13,512Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[INFO ] 2020-01-20T01:04:13,512Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[INFO ] 2020-01-20T01:04:13,604Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[INFO ] 2020-01-20T01:04:13,863Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=0cde3311-a1cb-4efa-b4f2-fcefe372b2d2, invocation_id=27389a4c-532b-450e-8595-fe616f13240d, invocation_timestamp=2020-01-20T01:04:13.780Z, origin=O=Mock Company 1, L=London, C=GB, session_id=27389a4c-532b-450e-8595-fe616f13240d, session_timestamp=2020-01-20T01:04:13.780Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[WARN ] 2020-01-20T01:04:13,875Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=0cde3311-a1cb-4efa-b4f2-fcefe372b2d2, invocation_id=27389a4c-532b-450e-8595-fe616f13240d, invocation_timestamp=2020-01-20T01:04:13.780Z, origin=O=Mock Company 1, L=London, C=GB, session_id=27389a4c-532b-450e-8595-fe616f13240d, session_timestamp=2020-01-20T01:04:13.780Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[INFO ] 2020-01-20T01:04:13,916Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=0cde3311-a1cb-4efa-b4f2-fcefe372b2d2, invocation_id=27389a4c-532b-450e-8595-fe616f13240d, invocation_timestamp=2020-01-20T01:04:13.780Z, origin=O=Mock Company 1, L=London, C=GB, session_id=27389a4c-532b-450e-8595-fe616f13240d, session_timestamp=2020-01-20T01:04:13.780Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[WARN ] 2020-01-20T01:04:13,924Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=0cde3311-a1cb-4efa-b4f2-fcefe372b2d2, invocation_id=27389a4c-532b-450e-8595-fe616f13240d, invocation_timestamp=2020-01-20T01:04:13.780Z, origin=O=Mock Company 1, L=London, C=GB, session_id=27389a4c-532b-450e-8595-fe616f13240d, session_timestamp=2020-01-20T01:04:13.780Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[INFO ] 2020-01-20T01:04:13,949Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[INFO ] 2020-01-20T01:04:13,949Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e9cf2dab-51e1-489d-b7d0-7a6240945960, invocation_id=b92df449-0c04-4c0a-8446-d1d17905e863, invocation_timestamp=2020-01-20T01:04:09.053Z, origin=Only For Testing, session_id=b92df449-0c04-4c0a-8446-d1d17905e863, session_timestamp=2020-01-20T01:04:09.053Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[INFO ] 2020-01-20T01:04:13,991Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=0cde3311-a1cb-4efa-b4f2-fcefe372b2d2, invocation_id=27389a4c-532b-450e-8595-fe616f13240d, invocation_timestamp=2020-01-20T01:04:13.780Z, origin=O=Mock Company 1, L=London, C=GB, session_id=27389a4c-532b-450e-8595-fe616f13240d, session_timestamp=2020-01-20T01:04:13.780Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7326554926538454687) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:04:13,995Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Invocation, sessionId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7326554926538454687)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-6567150785170620095--4992478603410910078)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))]), frozenFiber=0DACF47343012B763A7278586D4C6A1CD4EE9A59C8CA013BDFD0CBCA20A22D33), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@881868f, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@53ef3c3d], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=bb6863c1-5f64-492b-a22b-7c3c659cbdf0) {fiber-id=10000002, flow-id=0cde3311-a1cb-4efa-b4f2-fcefe372b2d2, invocation_id=27389a4c-532b-450e-8595-fe616f13240d, invocation_timestamp=2020-01-20T01:04:13.780Z, origin=O=Mock Company 1, L=London, C=GB, session_id=27389a4c-532b-450e-8595-fe616f13240d, session_timestamp=2020-01-20T01:04:13.780Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[INFO ] 2020-01-20T01:04:13,998Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] has error [0] {fiber-id=10000002, flow-id=0cde3311-a1cb-4efa-b4f2-fcefe372b2d2, invocation_id=27389a4c-532b-450e-8595-fe616f13240d, invocation_timestamp=2020-01-20T01:04:13.780Z, origin=O=Mock Company 1, L=London, C=GB, session_id=27389a4c-532b-450e-8595-fe616f13240d, session_timestamp=2020-01-20T01:04:13.780Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7326554926538454687) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:04:13,999Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] error allowed to propagate {fiber-id=10000002, flow-id=0cde3311-a1cb-4efa-b4f2-fcefe372b2d2, invocation_id=27389a4c-532b-450e-8595-fe616f13240d, invocation_timestamp=2020-01-20T01:04:13.780Z, origin=O=Mock Company 1, L=London, C=GB, session_id=27389a4c-532b-450e-8595-fe616f13240d, session_timestamp=2020-01-20T01:04:13.780Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[WARN ] 2020-01-20T01:04:14,033Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] errored, dumping all transitions:

 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.820Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[0cde3311-a1cb-4efa-b4f2-fcefe372b2d2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Invocation, sessionId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=7CFEADB6E3E47208DCE3B73436404D8475FC14E63340D683299D92546B821FF7), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6085ecdb])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6085ecdb])
    SignalFlowHasStarted(flowId=[0cde3311-a1cb-4efa-b4f2-fcefe372b2d2])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6567150785170620095), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7326554926538454687), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6567150785170620095--4992478603410910078-0-0), senderUUID=bb6863c1-5f64-492b-a22b-7c3c659cbdf0))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6085ecdb]
    []
isAnyCheckpointPersisted: 
    false
    true
checkpoint.sessions.SessionId(toLong=7326554926538454687): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6567150785170620095)), errors=[], deduplicationSeed=D-6567150785170620095--4992478603410910078)
isFlowResumed: 
    false
    true


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.825Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.829Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.854Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))]), maySkipCheckpoint=false, fiber=DB6C4B8EDF22A755F7A59EDF67BBC00C6FC166E643902F73071989470370E25A, )
  Actions: 
    PersistCheckpoint(id=[0cde3311-a1cb-4efa-b4f2-fcefe372b2d2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Invocation, sessionId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7326554926538454687)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6567150785170620095)), errors=[], deduplicationSeed=D-6567150785170620095--4992478603410910078)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))]), frozenFiber=DB6C4B8EDF22A755F7A59EDF67BBC00C6FC166E643902F73071989470370E25A), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=7CFEADB6E3E47208DCE3B73436404D8475FC14E63340D683299D92546B821FF7)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))]), frozenFiber=DB6C4B8EDF22A755F7A59EDF67BBC00C6FC166E643902F73071989470370E25A)
isFlowResumed: 
    true
    false


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.859Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7326554926538454687).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.876Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.906Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=6A3E56DF8A5D3C68D83DB3BDB33B5F3C689EFE3259F5A3C54E1604B8E2D2A397, )
  Actions: 
    PersistCheckpoint(id=[0cde3311-a1cb-4efa-b4f2-fcefe372b2d2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Invocation, sessionId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7326554926538454687)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6567150785170620095)), errors=[], deduplicationSeed=D-6567150785170620095--4992478603410910078)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=6A3E56DF8A5D3C68D83DB3BDB33B5F3C689EFE3259F5A3C54E1604B8E2D2A397), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    DB6C4B8EDF22A755F7A59EDF67BBC00C6FC166E643902F73071989470370E25A
    6A3E56DF8A5D3C68D83DB3BDB33B5F3C689EFE3259F5A3C54E1604B8E2D2A397
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
isFlowResumed: 
    true
    false


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.913Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6567150785170620095), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6567150785170620095--4992478603410910078-2-0), senderUUID=bb6863c1-5f64-492b-a22b-7c3c659cbdf0))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.915Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.926Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.932Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))]), maySkipCheckpoint=false, fiber=0DACF47343012B763A7278586D4C6A1CD4EE9A59C8CA013BDFD0CBCA20A22D33, )
  Actions: 
    PersistCheckpoint(id=[0cde3311-a1cb-4efa-b4f2-fcefe372b2d2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Invocation, sessionId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7326554926538454687)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6567150785170620095)), errors=[], deduplicationSeed=D-6567150785170620095--4992478603410910078)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))]), frozenFiber=0DACF47343012B763A7278586D4C6A1CD4EE9A59C8CA013BDFD0CBCA20A22D33), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    6A3E56DF8A5D3C68D83DB3BDB33B5F3C689EFE3259F5A3C54E1604B8E2D2A397
    0DACF47343012B763A7278586D4C6A1CD4EE9A59C8CA013BDFD0CBCA20A22D33
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))])
isFlowResumed: 
    true
    false


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.932Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.989Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7326554926538454687), payload=net.corda.node.services.statemachine.EndSessionMessage@1ea77c0c), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@53ef3c3d, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@53ef3c3d]
checkpoint.sessions.SessionId(toLong=7326554926538454687).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=6567150785170620095))
    Ended


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.990Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7326554926538454687) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.991Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:14.001Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7326554926538454687) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4974648806519847955, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7326554926538454687) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:14.006Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:14.007Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=0cde3311-a1cb-4efa-b4f2-fcefe372b2d2, invocation_id=27389a4c-532b-450e-8595-fe616f13240d, invocation_timestamp=2020-01-20T01:04:13.780Z, origin=O=Mock Company 1, L=London, C=GB, session_id=27389a4c-532b-450e-8595-fe616f13240d, session_timestamp=2020-01-20T01:04:13.780Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[WARN ] 2020-01-20T01:04:14,033Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=0cde3311-a1cb-4efa-b4f2-fcefe372b2d2, invocation_id=27389a4c-532b-450e-8595-fe616f13240d, invocation_timestamp=2020-01-20T01:04:13.780Z, origin=O=Mock Company 1, L=London, C=GB, session_id=27389a4c-532b-450e-8595-fe616f13240d, session_timestamp=2020-01-20T01:04:13.780Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7326554926538454687) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-20T01:04:14,037Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=0cde3311-a1cb-4efa-b4f2-fcefe372b2d2, invocation_id=27389a4c-532b-450e-8595-fe616f13240d, invocation_timestamp=2020-01-20T01:04:13.780Z, origin=O=Mock Company 1, L=London, C=GB, session_id=27389a4c-532b-450e-8595-fe616f13240d, session_timestamp=2020-01-20T01:04:13.780Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[WARN ] 2020-01-20T01:04:14,086Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] errored, dumping all transitions:

 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.820Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[0cde3311-a1cb-4efa-b4f2-fcefe372b2d2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Invocation, sessionId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=7CFEADB6E3E47208DCE3B73436404D8475FC14E63340D683299D92546B821FF7), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6085ecdb])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6085ecdb])
    SignalFlowHasStarted(flowId=[0cde3311-a1cb-4efa-b4f2-fcefe372b2d2])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6567150785170620095), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7326554926538454687), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6567150785170620095--4992478603410910078-0-0), senderUUID=bb6863c1-5f64-492b-a22b-7c3c659cbdf0))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6085ecdb]
    []
isAnyCheckpointPersisted: 
    false
    true
checkpoint.sessions.SessionId(toLong=7326554926538454687): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6567150785170620095)), errors=[], deduplicationSeed=D-6567150785170620095--4992478603410910078)
isFlowResumed: 
    false
    true


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.825Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.829Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.854Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))]), maySkipCheckpoint=false, fiber=DB6C4B8EDF22A755F7A59EDF67BBC00C6FC166E643902F73071989470370E25A, )
  Actions: 
    PersistCheckpoint(id=[0cde3311-a1cb-4efa-b4f2-fcefe372b2d2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Invocation, sessionId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7326554926538454687)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6567150785170620095)), errors=[], deduplicationSeed=D-6567150785170620095--4992478603410910078)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))]), frozenFiber=DB6C4B8EDF22A755F7A59EDF67BBC00C6FC166E643902F73071989470370E25A), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=7CFEADB6E3E47208DCE3B73436404D8475FC14E63340D683299D92546B821FF7)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))]), frozenFiber=DB6C4B8EDF22A755F7A59EDF67BBC00C6FC166E643902F73071989470370E25A)
isFlowResumed: 
    true
    false


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.859Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7326554926538454687).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.876Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.906Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=6A3E56DF8A5D3C68D83DB3BDB33B5F3C689EFE3259F5A3C54E1604B8E2D2A397, )
  Actions: 
    PersistCheckpoint(id=[0cde3311-a1cb-4efa-b4f2-fcefe372b2d2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Invocation, sessionId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7326554926538454687)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6567150785170620095)), errors=[], deduplicationSeed=D-6567150785170620095--4992478603410910078)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=6A3E56DF8A5D3C68D83DB3BDB33B5F3C689EFE3259F5A3C54E1604B8E2D2A397), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    DB6C4B8EDF22A755F7A59EDF67BBC00C6FC166E643902F73071989470370E25A
    6A3E56DF8A5D3C68D83DB3BDB33B5F3C689EFE3259F5A3C54E1604B8E2D2A397
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
isFlowResumed: 
    true
    false


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.913Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6567150785170620095), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6567150785170620095--4992478603410910078-2-0), senderUUID=bb6863c1-5f64-492b-a22b-7c3c659cbdf0))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.915Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.926Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.932Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))]), maySkipCheckpoint=false, fiber=0DACF47343012B763A7278586D4C6A1CD4EE9A59C8CA013BDFD0CBCA20A22D33, )
  Actions: 
    PersistCheckpoint(id=[0cde3311-a1cb-4efa-b4f2-fcefe372b2d2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Invocation, sessionId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7326554926538454687)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6567150785170620095)), errors=[], deduplicationSeed=D-6567150785170620095--4992478603410910078)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))]), frozenFiber=0DACF47343012B763A7278586D4C6A1CD4EE9A59C8CA013BDFD0CBCA20A22D33), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    6A3E56DF8A5D3C68D83DB3BDB33B5F3C689EFE3259F5A3C54E1604B8E2D2A397
    0DACF47343012B763A7278586D4C6A1CD4EE9A59C8CA013BDFD0CBCA20A22D33
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))])
isFlowResumed: 
    true
    false


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.932Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.989Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7326554926538454687), payload=net.corda.node.services.statemachine.EndSessionMessage@1ea77c0c), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@53ef3c3d, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@53ef3c3d]
checkpoint.sessions.SessionId(toLong=7326554926538454687).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=6567150785170620095))
    Ended


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.990Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7326554926538454687) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:13.991Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:14.001Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7326554926538454687) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4974648806519847955, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7326554926538454687) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:14.006Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:14.007Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] ---
  Timestamp: 2020-01-20T01:04:14.072Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=4974648806519847955)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-6567150785170620095--4992478603410910078)], senderUUID=bb6863c1-5f64-492b-a22b-7c3c659cbdf0)
    CreateTransaction
    RemoveCheckpoint(id=[0cde3311-a1cb-4efa-b4f2-fcefe372b2d2])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@53ef3c3d])
    ReleaseSoftLocks(uuid=0cde3311-a1cb-4efa-b4f2-fcefe372b2d2)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@53ef3c3d])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=7326554926538454687)])
    RemoveFlow(flowId=[0cde3311-a1cb-4efa-b4f2-fcefe372b2d2], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=4974648806519847955, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7326554926538454687) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Invocation, sessionId=27389a4c-532b-450e-8595-fe616f13240d, timestamp: 2020-01-20T01:04:13.780Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7326554926538454687)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-6567150785170620095--4992478603410910078)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7326554926538454687))]), frozenFiber=0DACF47343012B763A7278586D4C6A1CD4EE9A59C8CA013BDFD0CBCA20A22D33), errorState=Errored(errors=[FlowError(errorId=4974648806519847955, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7326554926538454687) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@881868f, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=bb6863c1-5f64-492b-a22b-7c3c659cbdf0))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@53ef3c3d]
    []
checkpoint.errorState.propagatedIndex: 
    0
    1
 {fiber-id=10000002, flow-id=0cde3311-a1cb-4efa-b4f2-fcefe372b2d2, invocation_id=27389a4c-532b-450e-8595-fe616f13240d, invocation_timestamp=2020-01-20T01:04:13.780Z, origin=O=Mock Company 1, L=London, C=GB, session_id=27389a4c-532b-450e-8595-fe616f13240d, session_timestamp=2020-01-20T01:04:13.780Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
[WARN ] 2020-01-20T01:04:14,086Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [0cde3311-a1cb-4efa-b4f2-fcefe372b2d2] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=0cde3311-a1cb-4efa-b4f2-fcefe372b2d2, invocation_id=27389a4c-532b-450e-8595-fe616f13240d, invocation_timestamp=2020-01-20T01:04:13.780Z, origin=O=Mock Company 1, L=London, C=GB, session_id=27389a4c-532b-450e-8595-fe616f13240d, session_timestamp=2020-01-20T01:04:13.780Z, thread-id=135, tx_id=A1CDF4064B8602FF924BF8ACD85FAD00787C6AB0AD289447C07BDEBB9D276934}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7326554926538454687) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:04:51,928Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\git\bootcamp-cordappp ... {}
[INFO ] 2020-01-20T01:04:59,054Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010443.765\nodes\0\cordapps] {}
[INFO ] 2020-01-20T01:04:59,060Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010443.765/nodes/0/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:04:59,097Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010443.765/nodes/0/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:04:59,397Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:05:00,274Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:05:00,390Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:05:00,391Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:05:00,392Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:05:00,612Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:04:43.666Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:05:06,820Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:05:06,829Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010443.765\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:05:06,829Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:05:06,839Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:05:06,918Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:05:06,935Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:05:09,916Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:05:10,911Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:05:11,017Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:05:11,046Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:05:11,046Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:05:11,441Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:05:11,456Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:05:11,457Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482311456) {}
[INFO ] 2020-01-20T01:05:11,464Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:05:11,671Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482311456) {}
[INFO ] 2020-01-20T01:05:11,767Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:05:11,793Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482311456) {}
[INFO ] 2020-01-20T01:05:11,829Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:05:12,023Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:05:12,028Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-20T01:05:12,033Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-20T01:05:12,559Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482311456) {}
[INFO ] 2020-01-20T01:05:12,590Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482311456) {}
[INFO ] 2020-01-20T01:05:12,594Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:05:12,596Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482311456) {}
[INFO ] 2020-01-20T01:05:12,597Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:05:12,660Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010443.765\nodes\1\cordapps] {}
[INFO ] 2020-01-20T01:05:12,661Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010443.765/nodes/1/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:05:12,661Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010443.765/nodes/1/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:05:12,875Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:05:12,890Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:05:12,966Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:05:12,967Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:05:12,967Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:05:12,972Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:04:43.666Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:05:13,844Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:05:13,848Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010443.765\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:05:13,848Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:05:13,852Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:05:13,856Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:05:13,856Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:05:13,971Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:05:13,987Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:05:13,991Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:05:13,992Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:05:14,033Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:05:14,034Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:05:14,194Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:05:14,201Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:05:14,201Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482314201) {}
[INFO ] 2020-01-20T01:05:14,205Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:05:14,215Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482314201) {}
[INFO ] 2020-01-20T01:05:14,238Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:05:14,243Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482314201) {}
[INFO ] 2020-01-20T01:05:14,250Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:05:14,442Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:05:14,451Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482314201) {}
[INFO ] 2020-01-20T01:05:14,455Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482311456) {}
[INFO ] 2020-01-20T01:05:14,457Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:05:14,469Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482314201) {}
[INFO ] 2020-01-20T01:05:14,471Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:05:14,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482314201) {}
[INFO ] 2020-01-20T01:05:14,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:05:14,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482314201) {}
[INFO ] 2020-01-20T01:05:14,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:05:14,494Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010443.765\nodes\2\cordapps] {}
[INFO ] 2020-01-20T01:05:14,495Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010443.765/nodes/2/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:05:14,495Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010443.765/nodes/2/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:05:14,676Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:05:14,691Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:05:14,757Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:05:14,757Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:05:14,757Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:05:14,762Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:04:43.666Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:05:15,383Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:05:15,386Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010443.765\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:05:15,387Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:05:15,388Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:05:15,394Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:05:15,394Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:05:15,509Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:05:15,521Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:05:15,525Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:05:15,526Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:05:15,569Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:05:15,569Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:05:15,732Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:05:15,740Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:05:15,740Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482315740) {}
[INFO ] 2020-01-20T01:05:15,742Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:05:15,753Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482315740) {}
[INFO ] 2020-01-20T01:05:15,773Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:05:15,778Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482315740) {}
[INFO ] 2020-01-20T01:05:15,789Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:05:15,997Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:05:16,008Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482315740) {}
[INFO ] 2020-01-20T01:05:16,012Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482311456) {}
[INFO ] 2020-01-20T01:05:16,014Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:05:16,028Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482315740) {}
[INFO ] 2020-01-20T01:05:16,031Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:05:16,046Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482314201) {}
[INFO ] 2020-01-20T01:05:16,048Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:05:16,062Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482315740) {}
[INFO ] 2020-01-20T01:05:16,065Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:05:16,079Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482315740) {}
[INFO ] 2020-01-20T01:05:16,079Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:05:16,079Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482315740) {}
[INFO ] 2020-01-20T01:05:16,079Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-01-20T01:05:16,409Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133}
[WARN ] 2020-01-20T01:05:16,434Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133}
[WARN ] 2020-01-20T01:05:16,434Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133}
[WARN ] 2020-01-20T01:05:16,438Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133}
[WARN ] 2020-01-20T01:05:18,773Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133}
[WARN ] 2020-01-20T01:05:18,808Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133}
[WARN ] 2020-01-20T01:05:18,841Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133}
[WARN ] 2020-01-20T01:05:18,853Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133}
[WARN ] 2020-01-20T01:05:19,055Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133}
[WARN ] 2020-01-20T01:05:19,074Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[INFO ] 2020-01-20T01:05:19,080Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[INFO ] 2020-01-20T01:05:19,080Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[INFO ] 2020-01-20T01:05:19,169Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[INFO ] 2020-01-20T01:05:19,413Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=46b0a39a-4b1e-4a0c-890c-e40cdfcf1434, invocation_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, invocation_timestamp=2020-01-20T01:05:19.333Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, session_timestamp=2020-01-20T01:05:19.333Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[WARN ] 2020-01-20T01:05:19,426Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=46b0a39a-4b1e-4a0c-890c-e40cdfcf1434, invocation_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, invocation_timestamp=2020-01-20T01:05:19.333Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, session_timestamp=2020-01-20T01:05:19.333Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[INFO ] 2020-01-20T01:05:19,466Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=46b0a39a-4b1e-4a0c-890c-e40cdfcf1434, invocation_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, invocation_timestamp=2020-01-20T01:05:19.333Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, session_timestamp=2020-01-20T01:05:19.333Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[WARN ] 2020-01-20T01:05:19,474Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=46b0a39a-4b1e-4a0c-890c-e40cdfcf1434, invocation_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, invocation_timestamp=2020-01-20T01:05:19.333Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, session_timestamp=2020-01-20T01:05:19.333Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[INFO ] 2020-01-20T01:05:19,502Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[INFO ] 2020-01-20T01:05:19,502Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f7f24c5c-3810-4bfe-a6bf-faf2e088e351, invocation_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, invocation_timestamp=2020-01-20T01:05:16.127Z, origin=Only For Testing, session_id=9a63c058-4c08-4c7f-a465-c7d1d844a80b, session_timestamp=2020-01-20T01:05:16.127Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[INFO ] 2020-01-20T01:05:19,542Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=46b0a39a-4b1e-4a0c-890c-e40cdfcf1434, invocation_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, invocation_timestamp=2020-01-20T01:05:19.333Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, session_timestamp=2020-01-20T01:05:19.333Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1288571435310925787) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:05:19,546Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Invocation, sessionId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1288571435310925787)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--55984537548267684-160774084417929894)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))]), frozenFiber=2F6A7627F1D5A00DFF43438FD861B7A2013ACFE434929945626FEB63A11C57A8), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@39facfe4, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3786a232], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=b457143c-3f2c-4d17-beb4-0ad96573a505) {fiber-id=10000002, flow-id=46b0a39a-4b1e-4a0c-890c-e40cdfcf1434, invocation_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, invocation_timestamp=2020-01-20T01:05:19.333Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, session_timestamp=2020-01-20T01:05:19.333Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[INFO ] 2020-01-20T01:05:19,548Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] has error [0] {fiber-id=10000002, flow-id=46b0a39a-4b1e-4a0c-890c-e40cdfcf1434, invocation_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, invocation_timestamp=2020-01-20T01:05:19.333Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, session_timestamp=2020-01-20T01:05:19.333Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1288571435310925787) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:05:19,550Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] error allowed to propagate {fiber-id=10000002, flow-id=46b0a39a-4b1e-4a0c-890c-e40cdfcf1434, invocation_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, invocation_timestamp=2020-01-20T01:05:19.333Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, session_timestamp=2020-01-20T01:05:19.333Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[WARN ] 2020-01-20T01:05:19,579Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] errored, dumping all transitions:

 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.370Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[46b0a39a-4b1e-4a0c-890c-e40cdfcf1434], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Invocation, sessionId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=D94F76F45CF52AA27E5CB4209661DFE47C3B0FACF6909A774072913C142EFACD), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@611e2679])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@611e2679])
    SignalFlowHasStarted(flowId=[46b0a39a-4b1e-4a0c-890c-e40cdfcf1434])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-55984537548267684), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=1288571435310925787), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--55984537548267684-160774084417929894-0-0), senderUUID=b457143c-3f2c-4d17-beb4-0ad96573a505))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1288571435310925787): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-55984537548267684)), errors=[], deduplicationSeed=D--55984537548267684-160774084417929894)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@611e2679]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.376Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.379Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.405Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))]), maySkipCheckpoint=false, fiber=A903A650035528536CD15FC2251628E58D91D41C2121C56A4E9B6B9EE943AFCE, )
  Actions: 
    PersistCheckpoint(id=[46b0a39a-4b1e-4a0c-890c-e40cdfcf1434], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Invocation, sessionId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1288571435310925787)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-55984537548267684)), errors=[], deduplicationSeed=D--55984537548267684-160774084417929894)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))]), frozenFiber=A903A650035528536CD15FC2251628E58D91D41C2121C56A4E9B6B9EE943AFCE), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=D94F76F45CF52AA27E5CB4209661DFE47C3B0FACF6909A774072913C142EFACD)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))]), frozenFiber=A903A650035528536CD15FC2251628E58D91D41C2121C56A4E9B6B9EE943AFCE)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.409Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1288571435310925787).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.427Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.457Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=7908CC449B5F3E0511891C33F68409D04C3B2A4D7668F266BDCF8A52476B48A0, )
  Actions: 
    PersistCheckpoint(id=[46b0a39a-4b1e-4a0c-890c-e40cdfcf1434], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Invocation, sessionId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1288571435310925787)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-55984537548267684)), errors=[], deduplicationSeed=D--55984537548267684-160774084417929894)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=7908CC449B5F3E0511891C33F68409D04C3B2A4D7668F266BDCF8A52476B48A0), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    A903A650035528536CD15FC2251628E58D91D41C2121C56A4E9B6B9EE943AFCE
    7908CC449B5F3E0511891C33F68409D04C3B2A4D7668F266BDCF8A52476B48A0
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.463Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-55984537548267684), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--55984537548267684-160774084417929894-2-0), senderUUID=b457143c-3f2c-4d17-beb4-0ad96573a505))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.466Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.476Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.482Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))]), maySkipCheckpoint=false, fiber=2F6A7627F1D5A00DFF43438FD861B7A2013ACFE434929945626FEB63A11C57A8, )
  Actions: 
    PersistCheckpoint(id=[46b0a39a-4b1e-4a0c-890c-e40cdfcf1434], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Invocation, sessionId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1288571435310925787)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-55984537548267684)), errors=[], deduplicationSeed=D--55984537548267684-160774084417929894)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))]), frozenFiber=2F6A7627F1D5A00DFF43438FD861B7A2013ACFE434929945626FEB63A11C57A8), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))])
checkpoint.flowState.frozenFiber.hash: 
    7908CC449B5F3E0511891C33F68409D04C3B2A4D7668F266BDCF8A52476B48A0
    2F6A7627F1D5A00DFF43438FD861B7A2013ACFE434929945626FEB63A11C57A8
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.483Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.540Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1288571435310925787), payload=net.corda.node.services.statemachine.EndSessionMessage@10b7b014), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3786a232, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1288571435310925787).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-55984537548267684))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3786a232]


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.541Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1288571435310925787) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.541Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.551Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1288571435310925787) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=528107261464683043, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1288571435310925787) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.556Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.557Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=46b0a39a-4b1e-4a0c-890c-e40cdfcf1434, invocation_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, invocation_timestamp=2020-01-20T01:05:19.333Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, session_timestamp=2020-01-20T01:05:19.333Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[WARN ] 2020-01-20T01:05:19,579Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=46b0a39a-4b1e-4a0c-890c-e40cdfcf1434, invocation_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, invocation_timestamp=2020-01-20T01:05:19.333Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, session_timestamp=2020-01-20T01:05:19.333Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1288571435310925787) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-20T01:05:19,582Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=46b0a39a-4b1e-4a0c-890c-e40cdfcf1434, invocation_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, invocation_timestamp=2020-01-20T01:05:19.333Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, session_timestamp=2020-01-20T01:05:19.333Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[WARN ] 2020-01-20T01:05:19,632Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] errored, dumping all transitions:

 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.370Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[46b0a39a-4b1e-4a0c-890c-e40cdfcf1434], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Invocation, sessionId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=D94F76F45CF52AA27E5CB4209661DFE47C3B0FACF6909A774072913C142EFACD), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@611e2679])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@611e2679])
    SignalFlowHasStarted(flowId=[46b0a39a-4b1e-4a0c-890c-e40cdfcf1434])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-55984537548267684), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=1288571435310925787), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--55984537548267684-160774084417929894-0-0), senderUUID=b457143c-3f2c-4d17-beb4-0ad96573a505))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1288571435310925787): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-55984537548267684)), errors=[], deduplicationSeed=D--55984537548267684-160774084417929894)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@611e2679]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.376Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.379Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.405Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))]), maySkipCheckpoint=false, fiber=A903A650035528536CD15FC2251628E58D91D41C2121C56A4E9B6B9EE943AFCE, )
  Actions: 
    PersistCheckpoint(id=[46b0a39a-4b1e-4a0c-890c-e40cdfcf1434], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Invocation, sessionId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1288571435310925787)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-55984537548267684)), errors=[], deduplicationSeed=D--55984537548267684-160774084417929894)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))]), frozenFiber=A903A650035528536CD15FC2251628E58D91D41C2121C56A4E9B6B9EE943AFCE), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=D94F76F45CF52AA27E5CB4209661DFE47C3B0FACF6909A774072913C142EFACD)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))]), frozenFiber=A903A650035528536CD15FC2251628E58D91D41C2121C56A4E9B6B9EE943AFCE)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.409Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1288571435310925787).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.427Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.457Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=7908CC449B5F3E0511891C33F68409D04C3B2A4D7668F266BDCF8A52476B48A0, )
  Actions: 
    PersistCheckpoint(id=[46b0a39a-4b1e-4a0c-890c-e40cdfcf1434], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Invocation, sessionId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1288571435310925787)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-55984537548267684)), errors=[], deduplicationSeed=D--55984537548267684-160774084417929894)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=7908CC449B5F3E0511891C33F68409D04C3B2A4D7668F266BDCF8A52476B48A0), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    A903A650035528536CD15FC2251628E58D91D41C2121C56A4E9B6B9EE943AFCE
    7908CC449B5F3E0511891C33F68409D04C3B2A4D7668F266BDCF8A52476B48A0
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.463Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-55984537548267684), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--55984537548267684-160774084417929894-2-0), senderUUID=b457143c-3f2c-4d17-beb4-0ad96573a505))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.466Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.476Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.482Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))]), maySkipCheckpoint=false, fiber=2F6A7627F1D5A00DFF43438FD861B7A2013ACFE434929945626FEB63A11C57A8, )
  Actions: 
    PersistCheckpoint(id=[46b0a39a-4b1e-4a0c-890c-e40cdfcf1434], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Invocation, sessionId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1288571435310925787)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-55984537548267684)), errors=[], deduplicationSeed=D--55984537548267684-160774084417929894)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))]), frozenFiber=2F6A7627F1D5A00DFF43438FD861B7A2013ACFE434929945626FEB63A11C57A8), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))])
checkpoint.flowState.frozenFiber.hash: 
    7908CC449B5F3E0511891C33F68409D04C3B2A4D7668F266BDCF8A52476B48A0
    2F6A7627F1D5A00DFF43438FD861B7A2013ACFE434929945626FEB63A11C57A8
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.483Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.540Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1288571435310925787), payload=net.corda.node.services.statemachine.EndSessionMessage@10b7b014), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3786a232, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1288571435310925787).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-55984537548267684))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3786a232]


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.541Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1288571435310925787) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.541Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.551Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1288571435310925787) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=528107261464683043, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1288571435310925787) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.556Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.557Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] ---
  Timestamp: 2020-01-20T01:05:19.614Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=528107261464683043)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--55984537548267684-160774084417929894)], senderUUID=b457143c-3f2c-4d17-beb4-0ad96573a505)
    CreateTransaction
    RemoveCheckpoint(id=[46b0a39a-4b1e-4a0c-890c-e40cdfcf1434])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3786a232])
    ReleaseSoftLocks(uuid=46b0a39a-4b1e-4a0c-890c-e40cdfcf1434)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3786a232])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=1288571435310925787)])
    RemoveFlow(flowId=[46b0a39a-4b1e-4a0c-890c-e40cdfcf1434], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=528107261464683043, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1288571435310925787) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Invocation, sessionId=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, timestamp: 2020-01-20T01:05:19.333Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1288571435310925787)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--55984537548267684-160774084417929894)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1288571435310925787))]), frozenFiber=2F6A7627F1D5A00DFF43438FD861B7A2013ACFE434929945626FEB63A11C57A8), errorState=Errored(errors=[FlowError(errorId=528107261464683043, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1288571435310925787) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@39facfe4, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=b457143c-3f2c-4d17-beb4-0ad96573a505))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3786a232]
    []
 {fiber-id=10000002, flow-id=46b0a39a-4b1e-4a0c-890c-e40cdfcf1434, invocation_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, invocation_timestamp=2020-01-20T01:05:19.333Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, session_timestamp=2020-01-20T01:05:19.333Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
[WARN ] 2020-01-20T01:05:19,632Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [46b0a39a-4b1e-4a0c-890c-e40cdfcf1434] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=46b0a39a-4b1e-4a0c-890c-e40cdfcf1434, invocation_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, invocation_timestamp=2020-01-20T01:05:19.333Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2cd2ca74-a193-4dde-8e2f-c4c0f050c06e, session_timestamp=2020-01-20T01:05:19.333Z, thread-id=133, tx_id=9B773A7F989F0E6E7A67F1A62A895AE07439FB5DBD542B60943B98DB55BFF1C8}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1288571435310925787) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:05:45,809Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\git\bootcamp-cordappp ... {}
[INFO ] 2020-01-20T01:05:47,834Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010537.689\nodes\0\cordapps] {}
[INFO ] 2020-01-20T01:05:47,845Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010537.689/nodes/0/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:05:47,896Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010537.689/nodes/0/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:05:48,231Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:05:49,391Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:05:49,536Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:05:49,537Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:05:49,539Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:05:49,787Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:05:37.603Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:05:56,503Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:05:56,513Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010537.689\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:05:56,515Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:05:56,521Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:05:56,607Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:05:56,616Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:05:59,636Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:00,637Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:06:00,721Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:06:00,747Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:06:00,747Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:06:01,119Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:06:01,135Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:06:01,136Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482361136) {}
[INFO ] 2020-01-20T01:06:01,143Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:01,360Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482361136) {}
[INFO ] 2020-01-20T01:06:01,456Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:06:01,484Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482361136) {}
[INFO ] 2020-01-20T01:06:01,522Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:01,746Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:06:01,752Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-20T01:06:01,758Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-20T01:06:02,301Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482361136) {}
[INFO ] 2020-01-20T01:06:02,326Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482361136) {}
[INFO ] 2020-01-20T01:06:02,328Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:02,328Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482361136) {}
[INFO ] 2020-01-20T01:06:02,328Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:02,339Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010537.689\nodes\1\cordapps] {}
[INFO ] 2020-01-20T01:06:02,350Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010537.689/nodes/1/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:06:02,350Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010537.689/nodes/1/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:06:02,545Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:06:02,562Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:06:02,646Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:06:02,646Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:06:02,646Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:06:02,653Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:05:37.603Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:06:03,495Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:06:03,502Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010537.689\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:06:03,502Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:06:03,504Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:06:03,507Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:03,508Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:03,628Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:03,645Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:06:03,649Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:06:03,651Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:06:03,697Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:06:03,697Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:06:03,862Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:06:03,869Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:06:03,869Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482363869) {}
[INFO ] 2020-01-20T01:06:03,872Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:03,884Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482363869) {}
[INFO ] 2020-01-20T01:06:03,904Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:06:03,910Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482363869) {}
[INFO ] 2020-01-20T01:06:03,917Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:04,130Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:06:04,141Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482363869) {}
[INFO ] 2020-01-20T01:06:04,145Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482361136) {}
[INFO ] 2020-01-20T01:06:04,148Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:04,161Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482363869) {}
[INFO ] 2020-01-20T01:06:04,163Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:04,176Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482363869) {}
[INFO ] 2020-01-20T01:06:04,176Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:04,176Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482363869) {}
[INFO ] 2020-01-20T01:06:04,176Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:04,332Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010537.689\nodes\2\cordapps] {}
[INFO ] 2020-01-20T01:06:04,333Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010537.689/nodes/2/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:06:04,333Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010537.689/nodes/2/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:06:04,357Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:06:04,371Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:06:04,429Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:06:04,429Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:06:04,430Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:06:04,436Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:05:37.603Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:06:05,075Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:06:05,078Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010537.689\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:06:05,078Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:06:05,081Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:06:05,086Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:05,086Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:05,204Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:05,217Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:06:05,221Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:06:05,222Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:06:05,261Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:06:05,261Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:06:05,417Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:06:05,424Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:06:05,424Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482365424) {}
[INFO ] 2020-01-20T01:06:05,427Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:05,436Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482365424) {}
[INFO ] 2020-01-20T01:06:05,456Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:06:05,461Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482365424) {}
[INFO ] 2020-01-20T01:06:05,469Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:05,696Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:06:05,707Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482365424) {}
[INFO ] 2020-01-20T01:06:05,710Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482361136) {}
[INFO ] 2020-01-20T01:06:05,713Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:05,724Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482365424) {}
[INFO ] 2020-01-20T01:06:05,726Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:05,739Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482363869) {}
[INFO ] 2020-01-20T01:06:05,741Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:05,752Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482365424) {}
[INFO ] 2020-01-20T01:06:05,754Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:05,768Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482365424) {}
[INFO ] 2020-01-20T01:06:05,769Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:05,769Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482365424) {}
[INFO ] 2020-01-20T01:06:05,769Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-01-20T01:06:06,082Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131}
[WARN ] 2020-01-20T01:06:06,108Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131}
[WARN ] 2020-01-20T01:06:06,108Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131}
[WARN ] 2020-01-20T01:06:06,113Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131}
[WARN ] 2020-01-20T01:06:08,458Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131}
[WARN ] 2020-01-20T01:06:08,494Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131}
[WARN ] 2020-01-20T01:06:08,524Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131}
[WARN ] 2020-01-20T01:06:08,534Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131}
[WARN ] 2020-01-20T01:06:08,661Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131}
[WARN ] 2020-01-20T01:06:08,680Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[INFO ] 2020-01-20T01:06:08,685Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[INFO ] 2020-01-20T01:06:08,685Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[INFO ] 2020-01-20T01:06:08,813Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[INFO ] 2020-01-20T01:06:09,069Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=e72ba055-c9d6-44c3-9ed2-c036690a8e0e, invocation_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, invocation_timestamp=2020-01-20T01:06:08.985Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, session_timestamp=2020-01-20T01:06:08.985Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[WARN ] 2020-01-20T01:06:09,081Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=e72ba055-c9d6-44c3-9ed2-c036690a8e0e, invocation_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, invocation_timestamp=2020-01-20T01:06:08.985Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, session_timestamp=2020-01-20T01:06:08.985Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[INFO ] 2020-01-20T01:06:09,126Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=e72ba055-c9d6-44c3-9ed2-c036690a8e0e, invocation_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, invocation_timestamp=2020-01-20T01:06:08.985Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, session_timestamp=2020-01-20T01:06:08.985Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[WARN ] 2020-01-20T01:06:09,135Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=e72ba055-c9d6-44c3-9ed2-c036690a8e0e, invocation_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, invocation_timestamp=2020-01-20T01:06:08.985Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, session_timestamp=2020-01-20T01:06:08.985Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[INFO ] 2020-01-20T01:06:09,162Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[INFO ] 2020-01-20T01:06:09,162Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=d734cc96-c818-4b4a-9acf-5b661b5b0bb4, invocation_id=875f30ef-50eb-45a2-b209-4f3029917583, invocation_timestamp=2020-01-20T01:06:05.810Z, origin=Only For Testing, session_id=875f30ef-50eb-45a2-b209-4f3029917583, session_timestamp=2020-01-20T01:06:05.810Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[INFO ] 2020-01-20T01:06:09,204Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=e72ba055-c9d6-44c3-9ed2-c036690a8e0e, invocation_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, invocation_timestamp=2020-01-20T01:06:08.985Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, session_timestamp=2020-01-20T01:06:08.985Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=6817450353445016143) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:06:09,208Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Invocation, sessionId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6817450353445016143)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6387244542466486097--5645920597843642009)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))]), frozenFiber=B07C2AC6AFCE3E3DDF0EEB6267F918D58F30737E7D66BF692BAE0FEDE34B8458), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@2b3a0c25, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@aa36713], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=3a918293-93da-4e61-a6e1-82b399e60b7d) {fiber-id=10000002, flow-id=e72ba055-c9d6-44c3-9ed2-c036690a8e0e, invocation_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, invocation_timestamp=2020-01-20T01:06:08.985Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, session_timestamp=2020-01-20T01:06:08.985Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[INFO ] 2020-01-20T01:06:09,211Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] has error [0] {fiber-id=10000002, flow-id=e72ba055-c9d6-44c3-9ed2-c036690a8e0e, invocation_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, invocation_timestamp=2020-01-20T01:06:08.985Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, session_timestamp=2020-01-20T01:06:08.985Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=6817450353445016143) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:06:09,212Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] error allowed to propagate {fiber-id=10000002, flow-id=e72ba055-c9d6-44c3-9ed2-c036690a8e0e, invocation_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, invocation_timestamp=2020-01-20T01:06:08.985Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, session_timestamp=2020-01-20T01:06:08.985Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[WARN ] 2020-01-20T01:06:09,243Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] errored, dumping all transitions:

 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.024Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e72ba055-c9d6-44c3-9ed2-c036690a8e0e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Invocation, sessionId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=FB80BE585386F34D82C2ECAD2028A9F5F025BEAF7EB430B1D37F0E26BFA53908), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@44f927c8])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@44f927c8])
    SignalFlowHasStarted(flowId=[e72ba055-c9d6-44c3-9ed2-c036690a8e0e])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6387244542466486097), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=6817450353445016143), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6387244542466486097--5645920597843642009-0-0), senderUUID=3a918293-93da-4e61-a6e1-82b399e60b7d))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=6817450353445016143): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6387244542466486097)), errors=[], deduplicationSeed=D--6387244542466486097--5645920597843642009)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@44f927c8]
    []


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.029Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.033Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.058Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))]), maySkipCheckpoint=false, fiber=59DE042A4FF3F615C3E8DB920AC7D086F750D20220691A75B2EBE728F9FD906B, )
  Actions: 
    PersistCheckpoint(id=[e72ba055-c9d6-44c3-9ed2-c036690a8e0e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Invocation, sessionId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6817450353445016143)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6387244542466486097)), errors=[], deduplicationSeed=D--6387244542466486097--5645920597843642009)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))]), frozenFiber=59DE042A4FF3F615C3E8DB920AC7D086F750D20220691A75B2EBE728F9FD906B), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=FB80BE585386F34D82C2ECAD2028A9F5F025BEAF7EB430B1D37F0E26BFA53908)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))]), frozenFiber=59DE042A4FF3F615C3E8DB920AC7D086F750D20220691A75B2EBE728F9FD906B)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.062Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=6817450353445016143).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.082Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.113Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=859C2C2695F61EBB04948FB4CE0A769ED2D25F8C7092E7440BEF125E06AD1557, )
  Actions: 
    PersistCheckpoint(id=[e72ba055-c9d6-44c3-9ed2-c036690a8e0e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Invocation, sessionId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6817450353445016143)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6387244542466486097)), errors=[], deduplicationSeed=D--6387244542466486097--5645920597843642009)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=859C2C2695F61EBB04948FB4CE0A769ED2D25F8C7092E7440BEF125E06AD1557), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    59DE042A4FF3F615C3E8DB920AC7D086F750D20220691A75B2EBE728F9FD906B
    859C2C2695F61EBB04948FB4CE0A769ED2D25F8C7092E7440BEF125E06AD1557
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.119Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6387244542466486097), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6387244542466486097--5645920597843642009-2-0), senderUUID=3a918293-93da-4e61-a6e1-82b399e60b7d))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.126Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.137Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.143Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))]), maySkipCheckpoint=false, fiber=B07C2AC6AFCE3E3DDF0EEB6267F918D58F30737E7D66BF692BAE0FEDE34B8458, )
  Actions: 
    PersistCheckpoint(id=[e72ba055-c9d6-44c3-9ed2-c036690a8e0e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Invocation, sessionId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6817450353445016143)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6387244542466486097)), errors=[], deduplicationSeed=D--6387244542466486097--5645920597843642009)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))]), frozenFiber=B07C2AC6AFCE3E3DDF0EEB6267F918D58F30737E7D66BF692BAE0FEDE34B8458), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))])
checkpoint.flowState.frozenFiber.hash: 
    859C2C2695F61EBB04948FB4CE0A769ED2D25F8C7092E7440BEF125E06AD1557
    B07C2AC6AFCE3E3DDF0EEB6267F918D58F30737E7D66BF692BAE0FEDE34B8458
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.144Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.202Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6817450353445016143), payload=net.corda.node.services.statemachine.EndSessionMessage@3685475a), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@aa36713, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=6817450353445016143).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-6387244542466486097))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@aa36713]


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.204Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=6817450353445016143) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.204Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.214Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=6817450353445016143) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4752815104432281294, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=6817450353445016143) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.221Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.222Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=e72ba055-c9d6-44c3-9ed2-c036690a8e0e, invocation_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, invocation_timestamp=2020-01-20T01:06:08.985Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, session_timestamp=2020-01-20T01:06:08.985Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[WARN ] 2020-01-20T01:06:09,243Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=e72ba055-c9d6-44c3-9ed2-c036690a8e0e, invocation_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, invocation_timestamp=2020-01-20T01:06:08.985Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, session_timestamp=2020-01-20T01:06:08.985Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=6817450353445016143) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-20T01:06:09,246Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=e72ba055-c9d6-44c3-9ed2-c036690a8e0e, invocation_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, invocation_timestamp=2020-01-20T01:06:08.985Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, session_timestamp=2020-01-20T01:06:08.985Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[WARN ] 2020-01-20T01:06:09,282Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] errored, dumping all transitions:

 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.024Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e72ba055-c9d6-44c3-9ed2-c036690a8e0e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Invocation, sessionId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=FB80BE585386F34D82C2ECAD2028A9F5F025BEAF7EB430B1D37F0E26BFA53908), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@44f927c8])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@44f927c8])
    SignalFlowHasStarted(flowId=[e72ba055-c9d6-44c3-9ed2-c036690a8e0e])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6387244542466486097), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=6817450353445016143), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6387244542466486097--5645920597843642009-0-0), senderUUID=3a918293-93da-4e61-a6e1-82b399e60b7d))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=6817450353445016143): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6387244542466486097)), errors=[], deduplicationSeed=D--6387244542466486097--5645920597843642009)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@44f927c8]
    []


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.029Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.033Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.058Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))]), maySkipCheckpoint=false, fiber=59DE042A4FF3F615C3E8DB920AC7D086F750D20220691A75B2EBE728F9FD906B, )
  Actions: 
    PersistCheckpoint(id=[e72ba055-c9d6-44c3-9ed2-c036690a8e0e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Invocation, sessionId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6817450353445016143)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6387244542466486097)), errors=[], deduplicationSeed=D--6387244542466486097--5645920597843642009)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))]), frozenFiber=59DE042A4FF3F615C3E8DB920AC7D086F750D20220691A75B2EBE728F9FD906B), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=FB80BE585386F34D82C2ECAD2028A9F5F025BEAF7EB430B1D37F0E26BFA53908)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))]), frozenFiber=59DE042A4FF3F615C3E8DB920AC7D086F750D20220691A75B2EBE728F9FD906B)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.062Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=6817450353445016143).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.082Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.113Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=859C2C2695F61EBB04948FB4CE0A769ED2D25F8C7092E7440BEF125E06AD1557, )
  Actions: 
    PersistCheckpoint(id=[e72ba055-c9d6-44c3-9ed2-c036690a8e0e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Invocation, sessionId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6817450353445016143)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6387244542466486097)), errors=[], deduplicationSeed=D--6387244542466486097--5645920597843642009)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=859C2C2695F61EBB04948FB4CE0A769ED2D25F8C7092E7440BEF125E06AD1557), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    59DE042A4FF3F615C3E8DB920AC7D086F750D20220691A75B2EBE728F9FD906B
    859C2C2695F61EBB04948FB4CE0A769ED2D25F8C7092E7440BEF125E06AD1557
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.119Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6387244542466486097), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6387244542466486097--5645920597843642009-2-0), senderUUID=3a918293-93da-4e61-a6e1-82b399e60b7d))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.126Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.137Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.143Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))]), maySkipCheckpoint=false, fiber=B07C2AC6AFCE3E3DDF0EEB6267F918D58F30737E7D66BF692BAE0FEDE34B8458, )
  Actions: 
    PersistCheckpoint(id=[e72ba055-c9d6-44c3-9ed2-c036690a8e0e], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Invocation, sessionId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6817450353445016143)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6387244542466486097)), errors=[], deduplicationSeed=D--6387244542466486097--5645920597843642009)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))]), frozenFiber=B07C2AC6AFCE3E3DDF0EEB6267F918D58F30737E7D66BF692BAE0FEDE34B8458), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))])
checkpoint.flowState.frozenFiber.hash: 
    859C2C2695F61EBB04948FB4CE0A769ED2D25F8C7092E7440BEF125E06AD1557
    B07C2AC6AFCE3E3DDF0EEB6267F918D58F30737E7D66BF692BAE0FEDE34B8458
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.144Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.202Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6817450353445016143), payload=net.corda.node.services.statemachine.EndSessionMessage@3685475a), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@aa36713, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=6817450353445016143).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-6387244542466486097))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@aa36713]


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.204Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=6817450353445016143) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.204Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.214Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=6817450353445016143) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4752815104432281294, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=6817450353445016143) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.221Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.222Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] ---
  Timestamp: 2020-01-20T01:06:09.273Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-4752815104432281294)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6387244542466486097--5645920597843642009)], senderUUID=3a918293-93da-4e61-a6e1-82b399e60b7d)
    CreateTransaction
    RemoveCheckpoint(id=[e72ba055-c9d6-44c3-9ed2-c036690a8e0e])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@aa36713])
    ReleaseSoftLocks(uuid=e72ba055-c9d6-44c3-9ed2-c036690a8e0e)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@aa36713])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=6817450353445016143)])
    RemoveFlow(flowId=[e72ba055-c9d6-44c3-9ed2-c036690a8e0e], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-4752815104432281294, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=6817450353445016143) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Invocation, sessionId=ca03197d-f7b6-48ba-a2aa-147267f6badf, timestamp: 2020-01-20T01:06:08.985Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=6817450353445016143)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6387244542466486097--5645920597843642009)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=6817450353445016143))]), frozenFiber=B07C2AC6AFCE3E3DDF0EEB6267F918D58F30737E7D66BF692BAE0FEDE34B8458), errorState=Errored(errors=[FlowError(errorId=-4752815104432281294, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=6817450353445016143) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@2b3a0c25, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=3a918293-93da-4e61-a6e1-82b399e60b7d))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@aa36713]
    []
 {fiber-id=10000002, flow-id=e72ba055-c9d6-44c3-9ed2-c036690a8e0e, invocation_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, invocation_timestamp=2020-01-20T01:06:08.985Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, session_timestamp=2020-01-20T01:06:08.985Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
[WARN ] 2020-01-20T01:06:09,282Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e72ba055-c9d6-44c3-9ed2-c036690a8e0e] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=e72ba055-c9d6-44c3-9ed2-c036690a8e0e, invocation_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, invocation_timestamp=2020-01-20T01:06:08.985Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ca03197d-f7b6-48ba-a2aa-147267f6badf, session_timestamp=2020-01-20T01:06:08.985Z, thread-id=131, tx_id=B49C82077B0A534DD73F84E0E4DFAB2781614E07EB7FBB44B60897319FF11A28}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=6817450353445016143) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:06:39,042Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\git\bootcamp-cordappp ... {}
[INFO ] 2020-01-20T01:06:41,208Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010630.788\nodes\0\cordapps] {}
[INFO ] 2020-01-20T01:06:41,218Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010630.788/nodes/0/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:06:41,272Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010630.788/nodes/0/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:06:41,618Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:06:42,647Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:06:42,771Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:06:42,772Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:06:42,773Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:06:43,006Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:06:30.701Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:06:49,222Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:06:49,228Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010630.788\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:06:49,228Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:06:49,231Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:06:49,313Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:49,321Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:52,519Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:53,558Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:06:53,684Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:06:53,717Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:06:53,717Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:06:54,132Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:06:54,146Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:06:54,146Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482414146) {}
[INFO ] 2020-01-20T01:06:54,153Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:54,375Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482414146) {}
[INFO ] 2020-01-20T01:06:54,473Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:06:54,513Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482414146) {}
[INFO ] 2020-01-20T01:06:54,562Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:54,810Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:06:54,815Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-20T01:06:54,820Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-20T01:06:55,347Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482414146) {}
[INFO ] 2020-01-20T01:06:55,374Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482414146) {}
[INFO ] 2020-01-20T01:06:55,377Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:55,377Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482414146) {}
[INFO ] 2020-01-20T01:06:55,377Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:55,392Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010630.788\nodes\1\cordapps] {}
[INFO ] 2020-01-20T01:06:55,395Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010630.788/nodes/1/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:06:55,395Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010630.788/nodes/1/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:06:55,611Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:06:55,626Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:06:55,706Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:06:55,706Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:06:55,707Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:06:55,712Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:06:30.701Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:06:56,524Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:06:56,528Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010630.788\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:06:56,528Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:06:56,533Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:06:56,537Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:56,537Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:56,661Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:56,677Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:06:56,682Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:06:56,683Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:06:56,731Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:06:56,731Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:06:56,918Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:06:56,925Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:06:56,925Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482416925) {}
[INFO ] 2020-01-20T01:06:56,929Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:56,940Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482416925) {}
[INFO ] 2020-01-20T01:06:56,961Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:06:56,967Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482416925) {}
[INFO ] 2020-01-20T01:06:56,976Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:57,201Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:06:57,210Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482416925) {}
[INFO ] 2020-01-20T01:06:57,214Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482414146) {}
[INFO ] 2020-01-20T01:06:57,216Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:57,229Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482416925) {}
[INFO ] 2020-01-20T01:06:57,230Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:57,242Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482416925) {}
[INFO ] 2020-01-20T01:06:57,243Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:57,243Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482416925) {}
[INFO ] 2020-01-20T01:06:57,243Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:57,252Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010630.788\nodes\2\cordapps] {}
[INFO ] 2020-01-20T01:06:57,253Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010630.788/nodes/2/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:06:57,253Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010630.788/nodes/2/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:06:57,430Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:06:57,444Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:06:57,516Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:06:57,516Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:06:57,516Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:06:57,522Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:06:30.701Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:06:58,210Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:06:58,216Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010630.788\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:06:58,216Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:06:58,218Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:06:58,222Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:58,223Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:58,410Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:06:58,435Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:06:58,440Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:06:58,441Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:06:58,484Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:06:58,484Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:06:58,663Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:06:58,673Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:06:58,673Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482418673) {}
[INFO ] 2020-01-20T01:06:58,683Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:58,702Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482418673) {}
[INFO ] 2020-01-20T01:06:58,728Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:06:58,735Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482418673) {}
[INFO ] 2020-01-20T01:06:58,745Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:58,939Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:06:58,949Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482418673) {}
[INFO ] 2020-01-20T01:06:58,952Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482414146) {}
[INFO ] 2020-01-20T01:06:58,954Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:58,967Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482418673) {}
[INFO ] 2020-01-20T01:06:58,969Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:58,981Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482416925) {}
[INFO ] 2020-01-20T01:06:58,983Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:58,995Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482418673) {}
[INFO ] 2020-01-20T01:06:58,997Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:06:59,008Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482418673) {}
[INFO ] 2020-01-20T01:06:59,008Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:06:59,008Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482418673) {}
[INFO ] 2020-01-20T01:06:59,008Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-01-20T01:06:59,329Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133}
[WARN ] 2020-01-20T01:06:59,354Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133}
[WARN ] 2020-01-20T01:06:59,354Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133}
[WARN ] 2020-01-20T01:06:59,358Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133}
[WARN ] 2020-01-20T01:07:01,778Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133}
[WARN ] 2020-01-20T01:07:01,814Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133}
[WARN ] 2020-01-20T01:07:01,846Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133}
[WARN ] 2020-01-20T01:07:01,857Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133}
[WARN ] 2020-01-20T01:07:01,993Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133}
[WARN ] 2020-01-20T01:07:02,012Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[INFO ] 2020-01-20T01:07:02,017Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[INFO ] 2020-01-20T01:07:02,017Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[INFO ] 2020-01-20T01:07:02,146Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[INFO ] 2020-01-20T01:07:02,407Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=100b5e6f-e8ae-4281-9ae4-4797ce32829c, invocation_id=d58ec15a-16ca-455f-8c4d-69c765611289, invocation_timestamp=2020-01-20T01:07:02.323Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d58ec15a-16ca-455f-8c4d-69c765611289, session_timestamp=2020-01-20T01:07:02.323Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[WARN ] 2020-01-20T01:07:02,420Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=100b5e6f-e8ae-4281-9ae4-4797ce32829c, invocation_id=d58ec15a-16ca-455f-8c4d-69c765611289, invocation_timestamp=2020-01-20T01:07:02.323Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d58ec15a-16ca-455f-8c4d-69c765611289, session_timestamp=2020-01-20T01:07:02.323Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[INFO ] 2020-01-20T01:07:02,462Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=100b5e6f-e8ae-4281-9ae4-4797ce32829c, invocation_id=d58ec15a-16ca-455f-8c4d-69c765611289, invocation_timestamp=2020-01-20T01:07:02.323Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d58ec15a-16ca-455f-8c4d-69c765611289, session_timestamp=2020-01-20T01:07:02.323Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[WARN ] 2020-01-20T01:07:02,470Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=100b5e6f-e8ae-4281-9ae4-4797ce32829c, invocation_id=d58ec15a-16ca-455f-8c4d-69c765611289, invocation_timestamp=2020-01-20T01:07:02.323Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d58ec15a-16ca-455f-8c4d-69c765611289, session_timestamp=2020-01-20T01:07:02.323Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[INFO ] 2020-01-20T01:07:02,496Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[INFO ] 2020-01-20T01:07:02,496Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=0c85ab8a-bb2a-46f8-9ee0-9527f9c13a11, invocation_id=25f115fe-5ca3-4501-8181-5d68ef986d62, invocation_timestamp=2020-01-20T01:06:59.047Z, origin=Only For Testing, session_id=25f115fe-5ca3-4501-8181-5d68ef986d62, session_timestamp=2020-01-20T01:06:59.047Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[INFO ] 2020-01-20T01:07:02,540Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=100b5e6f-e8ae-4281-9ae4-4797ce32829c, invocation_id=d58ec15a-16ca-455f-8c4d-69c765611289, invocation_timestamp=2020-01-20T01:07:02.323Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d58ec15a-16ca-455f-8c4d-69c765611289, session_timestamp=2020-01-20T01:07:02.323Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7419131744559142479) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:07:02,544Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Invocation, sessionId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7419131744559142479)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8680237064387006131--5706554407301361355)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))]), frozenFiber=B45E9939FEB9CE8E570B482A71E7BE1B2167CE1D26EBB94D7392778F08583326), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@3dd96c7c, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6457a7af], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=20acca54-f264-49dd-b3f1-e6448edb4062) {fiber-id=10000002, flow-id=100b5e6f-e8ae-4281-9ae4-4797ce32829c, invocation_id=d58ec15a-16ca-455f-8c4d-69c765611289, invocation_timestamp=2020-01-20T01:07:02.323Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d58ec15a-16ca-455f-8c4d-69c765611289, session_timestamp=2020-01-20T01:07:02.323Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[INFO ] 2020-01-20T01:07:02,547Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] has error [0] {fiber-id=10000002, flow-id=100b5e6f-e8ae-4281-9ae4-4797ce32829c, invocation_id=d58ec15a-16ca-455f-8c4d-69c765611289, invocation_timestamp=2020-01-20T01:07:02.323Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d58ec15a-16ca-455f-8c4d-69c765611289, session_timestamp=2020-01-20T01:07:02.323Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7419131744559142479) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:07:02,549Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] error allowed to propagate {fiber-id=10000002, flow-id=100b5e6f-e8ae-4281-9ae4-4797ce32829c, invocation_id=d58ec15a-16ca-455f-8c4d-69c765611289, invocation_timestamp=2020-01-20T01:07:02.323Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d58ec15a-16ca-455f-8c4d-69c765611289, session_timestamp=2020-01-20T01:07:02.323Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[WARN ] 2020-01-20T01:07:02,581Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] errored, dumping all transitions:

 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.361Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[100b5e6f-e8ae-4281-9ae4-4797ce32829c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Invocation, sessionId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=B49743F2D4DD0461628088AFC73435D52BE82FA4F67324CEEF1D5871E6AEDDB0), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c248212])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c248212])
    SignalFlowHasStarted(flowId=[100b5e6f-e8ae-4281-9ae4-4797ce32829c])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8680237064387006131), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7419131744559142479), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8680237064387006131--5706554407301361355-0-0), senderUUID=20acca54-f264-49dd-b3f1-e6448edb4062))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c248212]
    []
checkpoint.sessions.SessionId(toLong=7419131744559142479): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8680237064387006131)), errors=[], deduplicationSeed=D-8680237064387006131--5706554407301361355)
isFlowResumed: 
    false
    true


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.365Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.370Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.397Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))]), maySkipCheckpoint=false, fiber=FC3DF6858FD10B5E2B8776850532C5E66BBDF69CB07902F7C8BA5F51353360F1, )
  Actions: 
    PersistCheckpoint(id=[100b5e6f-e8ae-4281-9ae4-4797ce32829c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Invocation, sessionId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7419131744559142479)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8680237064387006131)), errors=[], deduplicationSeed=D-8680237064387006131--5706554407301361355)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))]), frozenFiber=FC3DF6858FD10B5E2B8776850532C5E66BBDF69CB07902F7C8BA5F51353360F1), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=B49743F2D4DD0461628088AFC73435D52BE82FA4F67324CEEF1D5871E6AEDDB0)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))]), frozenFiber=FC3DF6858FD10B5E2B8776850532C5E66BBDF69CB07902F7C8BA5F51353360F1)
isFlowResumed: 
    true
    false


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.402Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7419131744559142479).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.421Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.452Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=35D8D26791B9042249F7A2DD904A096E483E603BE953FCC328B5B15DF4F3D892, )
  Actions: 
    PersistCheckpoint(id=[100b5e6f-e8ae-4281-9ae4-4797ce32829c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Invocation, sessionId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7419131744559142479)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8680237064387006131)), errors=[], deduplicationSeed=D-8680237064387006131--5706554407301361355)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=35D8D26791B9042249F7A2DD904A096E483E603BE953FCC328B5B15DF4F3D892), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    FC3DF6858FD10B5E2B8776850532C5E66BBDF69CB07902F7C8BA5F51353360F1
    35D8D26791B9042249F7A2DD904A096E483E603BE953FCC328B5B15DF4F3D892
isFlowResumed: 
    true
    false


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.459Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8680237064387006131), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8680237064387006131--5706554407301361355-2-0), senderUUID=20acca54-f264-49dd-b3f1-e6448edb4062))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.461Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.472Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.477Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))]), maySkipCheckpoint=false, fiber=B45E9939FEB9CE8E570B482A71E7BE1B2167CE1D26EBB94D7392778F08583326, )
  Actions: 
    PersistCheckpoint(id=[100b5e6f-e8ae-4281-9ae4-4797ce32829c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Invocation, sessionId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7419131744559142479)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8680237064387006131)), errors=[], deduplicationSeed=D-8680237064387006131--5706554407301361355)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))]), frozenFiber=B45E9939FEB9CE8E570B482A71E7BE1B2167CE1D26EBB94D7392778F08583326), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))])
checkpoint.flowState.frozenFiber.hash: 
    35D8D26791B9042249F7A2DD904A096E483E603BE953FCC328B5B15DF4F3D892
    B45E9939FEB9CE8E570B482A71E7BE1B2167CE1D26EBB94D7392778F08583326
isFlowResumed: 
    true
    false


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.478Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.538Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7419131744559142479), payload=net.corda.node.services.statemachine.EndSessionMessage@11d2a0fc), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6457a7af, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6457a7af]
checkpoint.sessions.SessionId(toLong=7419131744559142479).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=8680237064387006131))
    Ended


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.539Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7419131744559142479) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.539Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.551Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7419131744559142479) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8363385446452531042, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7419131744559142479) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.555Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.558Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=100b5e6f-e8ae-4281-9ae4-4797ce32829c, invocation_id=d58ec15a-16ca-455f-8c4d-69c765611289, invocation_timestamp=2020-01-20T01:07:02.323Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d58ec15a-16ca-455f-8c4d-69c765611289, session_timestamp=2020-01-20T01:07:02.323Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[WARN ] 2020-01-20T01:07:02,581Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=100b5e6f-e8ae-4281-9ae4-4797ce32829c, invocation_id=d58ec15a-16ca-455f-8c4d-69c765611289, invocation_timestamp=2020-01-20T01:07:02.323Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d58ec15a-16ca-455f-8c4d-69c765611289, session_timestamp=2020-01-20T01:07:02.323Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7419131744559142479) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-20T01:07:02,585Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=100b5e6f-e8ae-4281-9ae4-4797ce32829c, invocation_id=d58ec15a-16ca-455f-8c4d-69c765611289, invocation_timestamp=2020-01-20T01:07:02.323Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d58ec15a-16ca-455f-8c4d-69c765611289, session_timestamp=2020-01-20T01:07:02.323Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[WARN ] 2020-01-20T01:07:02,626Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] errored, dumping all transitions:

 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.361Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[100b5e6f-e8ae-4281-9ae4-4797ce32829c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Invocation, sessionId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=B49743F2D4DD0461628088AFC73435D52BE82FA4F67324CEEF1D5871E6AEDDB0), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c248212])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c248212])
    SignalFlowHasStarted(flowId=[100b5e6f-e8ae-4281-9ae4-4797ce32829c])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8680237064387006131), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=7419131744559142479), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8680237064387006131--5706554407301361355-0-0), senderUUID=20acca54-f264-49dd-b3f1-e6448edb4062))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c248212]
    []
checkpoint.sessions.SessionId(toLong=7419131744559142479): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8680237064387006131)), errors=[], deduplicationSeed=D-8680237064387006131--5706554407301361355)
isFlowResumed: 
    false
    true


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.365Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.370Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.397Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))]), maySkipCheckpoint=false, fiber=FC3DF6858FD10B5E2B8776850532C5E66BBDF69CB07902F7C8BA5F51353360F1, )
  Actions: 
    PersistCheckpoint(id=[100b5e6f-e8ae-4281-9ae4-4797ce32829c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Invocation, sessionId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7419131744559142479)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8680237064387006131)), errors=[], deduplicationSeed=D-8680237064387006131--5706554407301361355)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))]), frozenFiber=FC3DF6858FD10B5E2B8776850532C5E66BBDF69CB07902F7C8BA5F51353360F1), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=B49743F2D4DD0461628088AFC73435D52BE82FA4F67324CEEF1D5871E6AEDDB0)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))]), frozenFiber=FC3DF6858FD10B5E2B8776850532C5E66BBDF69CB07902F7C8BA5F51353360F1)
isFlowResumed: 
    true
    false


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.402Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=7419131744559142479).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.421Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.452Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=35D8D26791B9042249F7A2DD904A096E483E603BE953FCC328B5B15DF4F3D892, )
  Actions: 
    PersistCheckpoint(id=[100b5e6f-e8ae-4281-9ae4-4797ce32829c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Invocation, sessionId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7419131744559142479)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8680237064387006131)), errors=[], deduplicationSeed=D-8680237064387006131--5706554407301361355)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=35D8D26791B9042249F7A2DD904A096E483E603BE953FCC328B5B15DF4F3D892), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    FC3DF6858FD10B5E2B8776850532C5E66BBDF69CB07902F7C8BA5F51353360F1
    35D8D26791B9042249F7A2DD904A096E483E603BE953FCC328B5B15DF4F3D892
isFlowResumed: 
    true
    false


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.459Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8680237064387006131), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8680237064387006131--5706554407301361355-2-0), senderUUID=20acca54-f264-49dd-b3f1-e6448edb4062))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.461Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.472Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.477Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))]), maySkipCheckpoint=false, fiber=B45E9939FEB9CE8E570B482A71E7BE1B2167CE1D26EBB94D7392778F08583326, )
  Actions: 
    PersistCheckpoint(id=[100b5e6f-e8ae-4281-9ae4-4797ce32829c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Invocation, sessionId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7419131744559142479)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8680237064387006131)), errors=[], deduplicationSeed=D-8680237064387006131--5706554407301361355)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))]), frozenFiber=B45E9939FEB9CE8E570B482A71E7BE1B2167CE1D26EBB94D7392778F08583326), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))])
checkpoint.flowState.frozenFiber.hash: 
    35D8D26791B9042249F7A2DD904A096E483E603BE953FCC328B5B15DF4F3D892
    B45E9939FEB9CE8E570B482A71E7BE1B2167CE1D26EBB94D7392778F08583326
isFlowResumed: 
    true
    false


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.478Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.538Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7419131744559142479), payload=net.corda.node.services.statemachine.EndSessionMessage@11d2a0fc), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6457a7af, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6457a7af]
checkpoint.sessions.SessionId(toLong=7419131744559142479).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=8680237064387006131))
    Ended


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.539Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7419131744559142479) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.539Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.551Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7419131744559142479) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=8363385446452531042, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7419131744559142479) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.555Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.558Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] ---
  Timestamp: 2020-01-20T01:07:02.618Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=8363385446452531042)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8680237064387006131--5706554407301361355)], senderUUID=20acca54-f264-49dd-b3f1-e6448edb4062)
    CreateTransaction
    RemoveCheckpoint(id=[100b5e6f-e8ae-4281-9ae4-4797ce32829c])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6457a7af])
    ReleaseSoftLocks(uuid=100b5e6f-e8ae-4281-9ae4-4797ce32829c)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6457a7af])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=7419131744559142479)])
    RemoveFlow(flowId=[100b5e6f-e8ae-4281-9ae4-4797ce32829c], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=8363385446452531042, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7419131744559142479) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Invocation, sessionId=d58ec15a-16ca-455f-8c4d-69c765611289, timestamp: 2020-01-20T01:07:02.323Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=7419131744559142479)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8680237064387006131--5706554407301361355)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=7419131744559142479))]), frozenFiber=B45E9939FEB9CE8E570B482A71E7BE1B2167CE1D26EBB94D7392778F08583326), errorState=Errored(errors=[FlowError(errorId=8363385446452531042, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7419131744559142479) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@3dd96c7c, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=20acca54-f264-49dd-b3f1-e6448edb4062))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6457a7af]
    []
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=100b5e6f-e8ae-4281-9ae4-4797ce32829c, invocation_id=d58ec15a-16ca-455f-8c4d-69c765611289, invocation_timestamp=2020-01-20T01:07:02.323Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d58ec15a-16ca-455f-8c4d-69c765611289, session_timestamp=2020-01-20T01:07:02.323Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
[WARN ] 2020-01-20T01:07:02,626Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [100b5e6f-e8ae-4281-9ae4-4797ce32829c] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=100b5e6f-e8ae-4281-9ae4-4797ce32829c, invocation_id=d58ec15a-16ca-455f-8c4d-69c765611289, invocation_timestamp=2020-01-20T01:07:02.323Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d58ec15a-16ca-455f-8c4d-69c765611289, session_timestamp=2020-01-20T01:07:02.323Z, thread-id=133, tx_id=CD7E2BFD83996F30094616A83382DAE175CF6747E884054A49590210325B0251}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=7419131744559142479) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:07:55,404Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\git\bootcamp-cordappp ... {}
[INFO ] 2020-01-20T01:08:03,722Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010746.951\nodes\0\cordapps] {}
[INFO ] 2020-01-20T01:08:03,729Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010746.951/nodes/0/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:08:03,765Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010746.951/nodes/0/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:08:04,052Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:08:04,983Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:08:05,104Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:08:05,105Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:08:05,106Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:08:05,348Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:07:46.865Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:08:11,758Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:08:11,763Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010746.951\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:08:11,764Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:08:11,766Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:08:11,886Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:08:11,894Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:08:14,940Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:08:15,969Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:08:16,042Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:08:16,070Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:08:16,070Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:08:16,447Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:08:16,462Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:08:16,462Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482496462) {}
[INFO ] 2020-01-20T01:08:16,469Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:08:16,703Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482496462) {}
[INFO ] 2020-01-20T01:08:16,795Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:08:16,826Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482496462) {}
[INFO ] 2020-01-20T01:08:16,868Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:08:17,081Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:08:17,086Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-20T01:08:17,091Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-20T01:08:17,664Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482496462) {}
[INFO ] 2020-01-20T01:08:17,694Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482496462) {}
[INFO ] 2020-01-20T01:08:17,696Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:08:17,696Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482496462) {}
[INFO ] 2020-01-20T01:08:17,697Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:08:17,717Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010746.951\nodes\1\cordapps] {}
[INFO ] 2020-01-20T01:08:17,720Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010746.951/nodes/1/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:08:17,722Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010746.951/nodes/1/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:08:17,943Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:08:17,960Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:08:18,038Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:08:18,039Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:08:18,039Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:08:18,044Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:07:46.865Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:08:18,927Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:08:18,936Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010746.951\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:08:18,936Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:08:18,938Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:08:18,941Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:08:18,941Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:08:19,062Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:08:19,079Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:08:19,083Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:08:19,084Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:08:19,126Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:08:19,127Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:08:19,290Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:08:19,296Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:08:19,296Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482499296) {}
[INFO ] 2020-01-20T01:08:19,300Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:08:19,311Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482499296) {}
[INFO ] 2020-01-20T01:08:19,333Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:08:19,339Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482499296) {}
[INFO ] 2020-01-20T01:08:19,347Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:08:19,607Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:08:19,622Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482499296) {}
[INFO ] 2020-01-20T01:08:19,629Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482496462) {}
[INFO ] 2020-01-20T01:08:19,632Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:08:19,650Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482499296) {}
[INFO ] 2020-01-20T01:08:19,653Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:08:19,674Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482499296) {}
[INFO ] 2020-01-20T01:08:19,674Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:08:19,674Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482499296) {}
[INFO ] 2020-01-20T01:08:19,674Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:08:19,862Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-010746.951\nodes\2\cordapps] {}
[INFO ] 2020-01-20T01:08:19,863Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010746.951/nodes/2/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:08:19,863Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-010746.951/nodes/2/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:08:19,893Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:08:19,909Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:08:19,983Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:08:19,984Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:08:19,984Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:08:19,990Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:07:46.865Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:08:20,672Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:08:20,697Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-010746.951\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:08:20,697Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:08:20,699Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:08:20,704Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:08:20,704Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:08:20,878Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:08:20,892Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:08:20,896Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:08:20,897Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:08:20,933Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:08:20,933Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:08:21,086Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:08:21,098Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:08:21,098Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482501098) {}
[INFO ] 2020-01-20T01:08:21,101Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:08:21,111Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482501098) {}
[INFO ] 2020-01-20T01:08:21,133Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:08:21,139Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482501098) {}
[INFO ] 2020-01-20T01:08:21,147Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:08:21,353Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6 uploader=app filename=null {}
[INFO ] 2020-01-20T01:08:21,362Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482501098) {}
[INFO ] 2020-01-20T01:08:21,365Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482496462) {}
[INFO ] 2020-01-20T01:08:21,367Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:08:21,380Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482501098) {}
[INFO ] 2020-01-20T01:08:21,382Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:08:21,395Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482499296) {}
[INFO ] 2020-01-20T01:08:21,396Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:08:21,408Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482501098) {}
[INFO ] 2020-01-20T01:08:21,410Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:08:21,422Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482501098) {}
[INFO ] 2020-01-20T01:08:21,422Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:08:21,422Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482501098) {}
[INFO ] 2020-01-20T01:08:21,422Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-01-20T01:08:21,748Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133}
[WARN ] 2020-01-20T01:08:21,775Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133}
[WARN ] 2020-01-20T01:08:21,775Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133}
[WARN ] 2020-01-20T01:08:21,779Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133}
[WARN ] 2020-01-20T01:08:24,052Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133}
[WARN ] 2020-01-20T01:08:24,090Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133}
[WARN ] 2020-01-20T01:08:24,122Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133}
[WARN ] 2020-01-20T01:08:24,132Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133}
[WARN ] 2020-01-20T01:08:24,266Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133}
[WARN ] 2020-01-20T01:08:24,284Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[INFO ] 2020-01-20T01:08:24,289Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[INFO ] 2020-01-20T01:08:24,289Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[INFO ] 2020-01-20T01:08:24,418Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[INFO ] 2020-01-20T01:08:24,685Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=fd712e17-c73b-4933-b39b-579959d9a4c9, invocation_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, invocation_timestamp=2020-01-20T01:08:24.607Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, session_timestamp=2020-01-20T01:08:24.607Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[WARN ] 2020-01-20T01:08:24,699Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=fd712e17-c73b-4933-b39b-579959d9a4c9, invocation_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, invocation_timestamp=2020-01-20T01:08:24.607Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, session_timestamp=2020-01-20T01:08:24.607Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[INFO ] 2020-01-20T01:08:24,743Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=fd712e17-c73b-4933-b39b-579959d9a4c9, invocation_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, invocation_timestamp=2020-01-20T01:08:24.607Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, session_timestamp=2020-01-20T01:08:24.607Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[WARN ] 2020-01-20T01:08:24,752Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=fd712e17-c73b-4933-b39b-579959d9a4c9, invocation_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, invocation_timestamp=2020-01-20T01:08:24.607Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, session_timestamp=2020-01-20T01:08:24.607Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[INFO ] 2020-01-20T01:08:24,778Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[INFO ] 2020-01-20T01:08:24,778Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8255f0d3-1890-4cba-ad8f-198e2dd2bd37, invocation_id=5eba7f76-db9f-48ac-9265-25e1048fe455, invocation_timestamp=2020-01-20T01:08:21.459Z, origin=Only For Testing, session_id=5eba7f76-db9f-48ac-9265-25e1048fe455, session_timestamp=2020-01-20T01:08:21.459Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[INFO ] 2020-01-20T01:08:24,817Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=fd712e17-c73b-4933-b39b-579959d9a4c9, invocation_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, invocation_timestamp=2020-01-20T01:08:24.607Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, session_timestamp=2020-01-20T01:08:24.607Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2693828404188345236) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:08:24,820Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [fd712e17-c73b-4933-b39b-579959d9a4c9] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Invocation, sessionId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2693828404188345236)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-6990352419041410021--2532863298406882336)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))]), frozenFiber=48B48CABDC52ECDE56A4B3191D390DDA50E9B2E2BB07266FBFECC1A66489761F), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@433ce582, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5f77320b], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=e5f40041-3ff4-4901-b9d9-9be8e88d0af0) {fiber-id=10000002, flow-id=fd712e17-c73b-4933-b39b-579959d9a4c9, invocation_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, invocation_timestamp=2020-01-20T01:08:24.607Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, session_timestamp=2020-01-20T01:08:24.607Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[INFO ] 2020-01-20T01:08:24,823Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [fd712e17-c73b-4933-b39b-579959d9a4c9] has error [0] {fiber-id=10000002, flow-id=fd712e17-c73b-4933-b39b-579959d9a4c9, invocation_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, invocation_timestamp=2020-01-20T01:08:24.607Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, session_timestamp=2020-01-20T01:08:24.607Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2693828404188345236) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:08:24,824Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [fd712e17-c73b-4933-b39b-579959d9a4c9] error allowed to propagate {fiber-id=10000002, flow-id=fd712e17-c73b-4933-b39b-579959d9a4c9, invocation_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, invocation_timestamp=2020-01-20T01:08:24.607Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, session_timestamp=2020-01-20T01:08:24.607Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[WARN ] 2020-01-20T01:08:24,857Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fd712e17-c73b-4933-b39b-579959d9a4c9] errored, dumping all transitions:

 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.644Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[fd712e17-c73b-4933-b39b-579959d9a4c9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Invocation, sessionId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=4748AFDC7A3E622738A2468F323381CFFC45FB6F0778D78D93A174880790D7EF), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73c2855])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73c2855])
    SignalFlowHasStarted(flowId=[fd712e17-c73b-4933-b39b-579959d9a4c9])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6990352419041410021), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=2693828404188345236), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6990352419041410021--2532863298406882336-0-0), senderUUID=e5f40041-3ff4-4901-b9d9-9be8e88d0af0))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2693828404188345236): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6990352419041410021)), errors=[], deduplicationSeed=D-6990352419041410021--2532863298406882336)
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73c2855]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.648Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.652Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.676Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))]), maySkipCheckpoint=false, fiber=CBDFC3D954E0D061E40EAF62AE755D06D7692EE612E4150892DF35C20E784D61, )
  Actions: 
    PersistCheckpoint(id=[fd712e17-c73b-4933-b39b-579959d9a4c9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Invocation, sessionId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2693828404188345236)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6990352419041410021)), errors=[], deduplicationSeed=D-6990352419041410021--2532863298406882336)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))]), frozenFiber=CBDFC3D954E0D061E40EAF62AE755D06D7692EE612E4150892DF35C20E784D61), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=4748AFDC7A3E622738A2468F323381CFFC45FB6F0778D78D93A174880790D7EF)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))]), frozenFiber=CBDFC3D954E0D061E40EAF62AE755D06D7692EE612E4150892DF35C20E784D61)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.680Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2693828404188345236).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.702Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.732Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=4B045E5E033C880713EDE8A0F92F6DEAEBA17538959AF047667B6B09EC0C7F6A, )
  Actions: 
    PersistCheckpoint(id=[fd712e17-c73b-4933-b39b-579959d9a4c9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Invocation, sessionId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2693828404188345236)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6990352419041410021)), errors=[], deduplicationSeed=D-6990352419041410021--2532863298406882336)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=4B045E5E033C880713EDE8A0F92F6DEAEBA17538959AF047667B6B09EC0C7F6A), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    CBDFC3D954E0D061E40EAF62AE755D06D7692EE612E4150892DF35C20E784D61
    4B045E5E033C880713EDE8A0F92F6DEAEBA17538959AF047667B6B09EC0C7F6A
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.739Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6990352419041410021), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6990352419041410021--2532863298406882336-2-0), senderUUID=e5f40041-3ff4-4901-b9d9-9be8e88d0af0))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.742Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.754Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.760Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))]), maySkipCheckpoint=false, fiber=48B48CABDC52ECDE56A4B3191D390DDA50E9B2E2BB07266FBFECC1A66489761F, )
  Actions: 
    PersistCheckpoint(id=[fd712e17-c73b-4933-b39b-579959d9a4c9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Invocation, sessionId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2693828404188345236)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6990352419041410021)), errors=[], deduplicationSeed=D-6990352419041410021--2532863298406882336)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))]), frozenFiber=48B48CABDC52ECDE56A4B3191D390DDA50E9B2E2BB07266FBFECC1A66489761F), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))])
checkpoint.flowState.frozenFiber.hash: 
    4B045E5E033C880713EDE8A0F92F6DEAEBA17538959AF047667B6B09EC0C7F6A
    48B48CABDC52ECDE56A4B3191D390DDA50E9B2E2BB07266FBFECC1A66489761F
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.760Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.815Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2693828404188345236), payload=net.corda.node.services.statemachine.EndSessionMessage@173b2b84), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5f77320b, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2693828404188345236).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=6990352419041410021))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5f77320b]


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.816Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2693828404188345236) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.816Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.826Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2693828404188345236) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-9209415402640855446, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2693828404188345236) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.830Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.831Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=fd712e17-c73b-4933-b39b-579959d9a4c9, invocation_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, invocation_timestamp=2020-01-20T01:08:24.607Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, session_timestamp=2020-01-20T01:08:24.607Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[WARN ] 2020-01-20T01:08:24,857Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fd712e17-c73b-4933-b39b-579959d9a4c9] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=fd712e17-c73b-4933-b39b-579959d9a4c9, invocation_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, invocation_timestamp=2020-01-20T01:08:24.607Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, session_timestamp=2020-01-20T01:08:24.607Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2693828404188345236) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-20T01:08:24,860Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=fd712e17-c73b-4933-b39b-579959d9a4c9, invocation_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, invocation_timestamp=2020-01-20T01:08:24.607Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, session_timestamp=2020-01-20T01:08:24.607Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[WARN ] 2020-01-20T01:08:24,941Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fd712e17-c73b-4933-b39b-579959d9a4c9] errored, dumping all transitions:

 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.644Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[fd712e17-c73b-4933-b39b-579959d9a4c9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Invocation, sessionId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=4748AFDC7A3E622738A2468F323381CFFC45FB6F0778D78D93A174880790D7EF), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73c2855])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73c2855])
    SignalFlowHasStarted(flowId=[fd712e17-c73b-4933-b39b-579959d9a4c9])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6990352419041410021), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=2693828404188345236), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6990352419041410021--2532863298406882336-0-0), senderUUID=e5f40041-3ff4-4901-b9d9-9be8e88d0af0))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2693828404188345236): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6990352419041410021)), errors=[], deduplicationSeed=D-6990352419041410021--2532863298406882336)
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@73c2855]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.648Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.652Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.676Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))]), maySkipCheckpoint=false, fiber=CBDFC3D954E0D061E40EAF62AE755D06D7692EE612E4150892DF35C20E784D61, )
  Actions: 
    PersistCheckpoint(id=[fd712e17-c73b-4933-b39b-579959d9a4c9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Invocation, sessionId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2693828404188345236)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6990352419041410021)), errors=[], deduplicationSeed=D-6990352419041410021--2532863298406882336)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))]), frozenFiber=CBDFC3D954E0D061E40EAF62AE755D06D7692EE612E4150892DF35C20E784D61), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=4748AFDC7A3E622738A2468F323381CFFC45FB6F0778D78D93A174880790D7EF)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))]), frozenFiber=CBDFC3D954E0D061E40EAF62AE755D06D7692EE612E4150892DF35C20E784D61)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.680Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2693828404188345236).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.702Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.732Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=4B045E5E033C880713EDE8A0F92F6DEAEBA17538959AF047667B6B09EC0C7F6A, )
  Actions: 
    PersistCheckpoint(id=[fd712e17-c73b-4933-b39b-579959d9a4c9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Invocation, sessionId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2693828404188345236)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6990352419041410021)), errors=[], deduplicationSeed=D-6990352419041410021--2532863298406882336)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=4B045E5E033C880713EDE8A0F92F6DEAEBA17538959AF047667B6B09EC0C7F6A), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    CBDFC3D954E0D061E40EAF62AE755D06D7692EE612E4150892DF35C20E784D61
    4B045E5E033C880713EDE8A0F92F6DEAEBA17538959AF047667B6B09EC0C7F6A
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.739Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=6990352419041410021), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-6990352419041410021--2532863298406882336-2-0), senderUUID=e5f40041-3ff4-4901-b9d9-9be8e88d0af0))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.742Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.754Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.760Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))]), maySkipCheckpoint=false, fiber=48B48CABDC52ECDE56A4B3191D390DDA50E9B2E2BB07266FBFECC1A66489761F, )
  Actions: 
    PersistCheckpoint(id=[fd712e17-c73b-4933-b39b-579959d9a4c9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Invocation, sessionId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2693828404188345236)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=6990352419041410021)), errors=[], deduplicationSeed=D-6990352419041410021--2532863298406882336)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))]), frozenFiber=48B48CABDC52ECDE56A4B3191D390DDA50E9B2E2BB07266FBFECC1A66489761F), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))])
checkpoint.flowState.frozenFiber.hash: 
    4B045E5E033C880713EDE8A0F92F6DEAEBA17538959AF047667B6B09EC0C7F6A
    48B48CABDC52ECDE56A4B3191D390DDA50E9B2E2BB07266FBFECC1A66489761F
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.760Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.815Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2693828404188345236), payload=net.corda.node.services.statemachine.EndSessionMessage@173b2b84), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5f77320b, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=2693828404188345236).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=6990352419041410021))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5f77320b]


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.816Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2693828404188345236) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.816Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)]


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.826Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2693828404188345236) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-9209415402640855446, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2693828404188345236) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.830Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.831Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [fd712e17-c73b-4933-b39b-579959d9a4c9] ---
  Timestamp: 2020-01-20T01:08:24.931Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-9209415402640855446)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-6990352419041410021--2532863298406882336)], senderUUID=e5f40041-3ff4-4901-b9d9-9be8e88d0af0)
    CreateTransaction
    RemoveCheckpoint(id=[fd712e17-c73b-4933-b39b-579959d9a4c9])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5f77320b])
    ReleaseSoftLocks(uuid=fd712e17-c73b-4933-b39b-579959d9a4c9)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5f77320b])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=2693828404188345236)])
    RemoveFlow(flowId=[fd712e17-c73b-4933-b39b-579959d9a4c9], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-9209415402640855446, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2693828404188345236) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Invocation, sessionId=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, timestamp: 2020-01-20T01:08:24.607Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2693828404188345236)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-6990352419041410021--2532863298406882336)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=70C8E25285E72BE50877890512CB073C070DA8C10A047A4B54F32C4C62A0A4E6), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2693828404188345236))]), frozenFiber=48B48CABDC52ECDE56A4B3191D390DDA50E9B2E2BB07266FBFECC1A66489761F), errorState=Errored(errors=[FlowError(errorId=-9209415402640855446, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2693828404188345236) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@433ce582, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=e5f40041-3ff4-4901-b9d9-9be8e88d0af0))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@5f77320b]
    []
 {fiber-id=10000002, flow-id=fd712e17-c73b-4933-b39b-579959d9a4c9, invocation_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, invocation_timestamp=2020-01-20T01:08:24.607Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, session_timestamp=2020-01-20T01:08:24.607Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
[WARN ] 2020-01-20T01:08:24,941Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [fd712e17-c73b-4933-b39b-579959d9a4c9] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=fd712e17-c73b-4933-b39b-579959d9a4c9, invocation_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, invocation_timestamp=2020-01-20T01:08:24.607Z, origin=O=Mock Company 1, L=London, C=GB, session_id=3d4d2a6d-edae-4d60-b056-cf41e3fb29d7, session_timestamp=2020-01-20T01:08:24.607Z, thread-id=133, tx_id=AEA8AEBA426E0FBE5FA818BB968C52E4143A371C901BD24AFC926A2B17061D24}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2693828404188345236) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:11:52,899Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\git\bootcamp-cordappp ... {}
[INFO ] 2020-01-20T01:12:02,148Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-011144.476\nodes\0\cordapps] {}
[INFO ] 2020-01-20T01:12:02,162Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011144.476/nodes/0/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:12:02,203Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011144.476/nodes/0/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:12:02,497Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:12:03,346Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:12:03,460Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:12:03,461Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:12:03,462Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:12:03,666Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:11:44.389Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:12:09,838Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:12:09,845Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-011144.476\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:12:09,845Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:12:09,848Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:12:09,944Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:12:09,951Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:12:12,905Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:12:13,881Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:12:13,954Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:12:13,979Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:12:13,979Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:12:14,353Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:12:14,368Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:12:14,369Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482734368) {}
[INFO ] 2020-01-20T01:12:14,376Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:12:14,614Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482734368) {}
[INFO ] 2020-01-20T01:12:14,699Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:12:14,725Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482734368) {}
[INFO ] 2020-01-20T01:12:14,761Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:12:15,236Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579 uploader=app filename=null {}
[INFO ] 2020-01-20T01:12:15,241Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-20T01:12:15,246Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-20T01:12:15,791Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482734368) {}
[INFO ] 2020-01-20T01:12:15,818Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482734368) {}
[INFO ] 2020-01-20T01:12:15,821Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:12:15,821Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482734368) {}
[INFO ] 2020-01-20T01:12:15,821Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:12:15,837Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-011144.476\nodes\1\cordapps] {}
[INFO ] 2020-01-20T01:12:15,838Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011144.476/nodes/1/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:12:15,838Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011144.476/nodes/1/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:12:16,025Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:12:16,039Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:12:16,119Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:12:16,119Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:12:16,121Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:12:16,127Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:11:44.389Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:12:17,036Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:12:17,040Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-011144.476\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:12:17,040Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:12:17,042Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:12:17,046Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:12:17,046Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:12:17,176Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:12:17,192Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:12:17,196Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:12:17,198Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:12:17,241Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:12:17,242Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:12:17,410Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:12:17,417Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:12:17,417Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482737417) {}
[INFO ] 2020-01-20T01:12:17,420Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:12:17,433Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482737417) {}
[INFO ] 2020-01-20T01:12:17,455Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:12:17,462Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482737417) {}
[INFO ] 2020-01-20T01:12:17,469Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:12:17,684Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579 uploader=app filename=null {}
[INFO ] 2020-01-20T01:12:17,698Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482737417) {}
[INFO ] 2020-01-20T01:12:17,702Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482734368) {}
[INFO ] 2020-01-20T01:12:17,704Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:12:17,720Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482737417) {}
[INFO ] 2020-01-20T01:12:17,722Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:12:17,735Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482737417) {}
[INFO ] 2020-01-20T01:12:17,736Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:12:17,736Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482737417) {}
[INFO ] 2020-01-20T01:12:17,736Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:12:17,745Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-011144.476\nodes\2\cordapps] {}
[INFO ] 2020-01-20T01:12:17,746Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011144.476/nodes/2/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:12:17,746Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011144.476/nodes/2/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:12:17,929Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:12:17,944Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:12:18,011Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:12:18,012Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:12:18,012Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:12:18,019Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:11:44.389Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:12:18,690Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:12:18,693Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-011144.476\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:12:18,693Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:12:18,696Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:12:18,700Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:12:18,701Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:12:18,821Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:12:18,833Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:12:18,837Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:12:18,838Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:12:18,878Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:12:18,878Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:12:19,039Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:12:19,047Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:12:19,047Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482739047) {}
[INFO ] 2020-01-20T01:12:19,051Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:12:19,061Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482739047) {}
[INFO ] 2020-01-20T01:12:19,083Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:12:19,088Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482739047) {}
[INFO ] 2020-01-20T01:12:19,096Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:12:19,326Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579 uploader=app filename=null {}
[INFO ] 2020-01-20T01:12:19,336Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482739047) {}
[INFO ] 2020-01-20T01:12:19,339Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482734368) {}
[INFO ] 2020-01-20T01:12:19,341Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:12:19,354Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482739047) {}
[INFO ] 2020-01-20T01:12:19,356Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:12:19,369Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482737417) {}
[INFO ] 2020-01-20T01:12:19,371Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:12:19,384Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482739047) {}
[INFO ] 2020-01-20T01:12:19,387Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:12:19,402Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482739047) {}
[INFO ] 2020-01-20T01:12:19,402Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:12:19,402Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482739047) {}
[INFO ] 2020-01-20T01:12:19,402Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-01-20T01:12:19,736Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132}
[WARN ] 2020-01-20T01:12:19,765Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132}
[WARN ] 2020-01-20T01:12:19,765Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132}
[WARN ] 2020-01-20T01:12:19,770Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132}
[WARN ] 2020-01-20T01:12:22,133Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132}
[WARN ] 2020-01-20T01:12:22,169Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132}
[WARN ] 2020-01-20T01:12:22,202Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132}
[WARN ] 2020-01-20T01:12:22,211Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132}
[WARN ] 2020-01-20T01:12:22,382Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132}
[WARN ] 2020-01-20T01:12:22,402Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[INFO ] 2020-01-20T01:12:22,407Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[INFO ] 2020-01-20T01:12:22,407Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[INFO ] 2020-01-20T01:12:22,497Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[INFO ] 2020-01-20T01:12:22,737Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=f25e02b4-a5c6-4094-89fc-3c5464512155, invocation_id=06941914-aed8-48da-b55c-c8c00a18053b, invocation_timestamp=2020-01-20T01:12:22.655Z, origin=O=Mock Company 1, L=London, C=GB, session_id=06941914-aed8-48da-b55c-c8c00a18053b, session_timestamp=2020-01-20T01:12:22.655Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[WARN ] 2020-01-20T01:12:22,749Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=f25e02b4-a5c6-4094-89fc-3c5464512155, invocation_id=06941914-aed8-48da-b55c-c8c00a18053b, invocation_timestamp=2020-01-20T01:12:22.655Z, origin=O=Mock Company 1, L=London, C=GB, session_id=06941914-aed8-48da-b55c-c8c00a18053b, session_timestamp=2020-01-20T01:12:22.655Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[INFO ] 2020-01-20T01:12:22,792Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=f25e02b4-a5c6-4094-89fc-3c5464512155, invocation_id=06941914-aed8-48da-b55c-c8c00a18053b, invocation_timestamp=2020-01-20T01:12:22.655Z, origin=O=Mock Company 1, L=London, C=GB, session_id=06941914-aed8-48da-b55c-c8c00a18053b, session_timestamp=2020-01-20T01:12:22.655Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[WARN ] 2020-01-20T01:12:22,801Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=f25e02b4-a5c6-4094-89fc-3c5464512155, invocation_id=06941914-aed8-48da-b55c-c8c00a18053b, invocation_timestamp=2020-01-20T01:12:22.655Z, origin=O=Mock Company 1, L=London, C=GB, session_id=06941914-aed8-48da-b55c-c8c00a18053b, session_timestamp=2020-01-20T01:12:22.655Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[INFO ] 2020-01-20T01:12:22,828Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[INFO ] 2020-01-20T01:12:22,828Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=146a363c-8a6e-40b3-ad07-e74c2ddeaa3f, invocation_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, invocation_timestamp=2020-01-20T01:12:19.447Z, origin=Only For Testing, session_id=8e1b66ae-32b9-45b3-9ae4-5c30bfae42f6, session_timestamp=2020-01-20T01:12:19.447Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[INFO ] 2020-01-20T01:12:22,869Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=f25e02b4-a5c6-4094-89fc-3c5464512155, invocation_id=06941914-aed8-48da-b55c-c8c00a18053b, invocation_timestamp=2020-01-20T01:12:22.655Z, origin=O=Mock Company 1, L=London, C=GB, session_id=06941914-aed8-48da-b55c-c8c00a18053b, session_timestamp=2020-01-20T01:12:22.655Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3192059079410668575) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:12:22,872Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [f25e02b4-a5c6-4094-89fc-3c5464512155] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Invocation, sessionId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3192059079410668575)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-3166186064908770796-2691110517599582935)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))]), frozenFiber=EB441005669D62A15892942ECD5DCA4FBBF144DCEDACD15A436EF124AD1CF831), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@6e8fe6da, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1429c4fd], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=edb2845e-48ad-40df-95d6-38897c2cea7e) {fiber-id=10000002, flow-id=f25e02b4-a5c6-4094-89fc-3c5464512155, invocation_id=06941914-aed8-48da-b55c-c8c00a18053b, invocation_timestamp=2020-01-20T01:12:22.655Z, origin=O=Mock Company 1, L=London, C=GB, session_id=06941914-aed8-48da-b55c-c8c00a18053b, session_timestamp=2020-01-20T01:12:22.655Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[INFO ] 2020-01-20T01:12:22,875Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [f25e02b4-a5c6-4094-89fc-3c5464512155] has error [0] {fiber-id=10000002, flow-id=f25e02b4-a5c6-4094-89fc-3c5464512155, invocation_id=06941914-aed8-48da-b55c-c8c00a18053b, invocation_timestamp=2020-01-20T01:12:22.655Z, origin=O=Mock Company 1, L=London, C=GB, session_id=06941914-aed8-48da-b55c-c8c00a18053b, session_timestamp=2020-01-20T01:12:22.655Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3192059079410668575) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:12:22,876Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [f25e02b4-a5c6-4094-89fc-3c5464512155] error allowed to propagate {fiber-id=10000002, flow-id=f25e02b4-a5c6-4094-89fc-3c5464512155, invocation_id=06941914-aed8-48da-b55c-c8c00a18053b, invocation_timestamp=2020-01-20T01:12:22.655Z, origin=O=Mock Company 1, L=London, C=GB, session_id=06941914-aed8-48da-b55c-c8c00a18053b, session_timestamp=2020-01-20T01:12:22.655Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[WARN ] 2020-01-20T01:12:22,906Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f25e02b4-a5c6-4094-89fc-3c5464512155] errored, dumping all transitions:

 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.694Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[f25e02b4-a5c6-4094-89fc-3c5464512155], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Invocation, sessionId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=CBCC6B5474B7F94464091E9362B6A8FF8F2C2E76876189DA88BE8C1CA58BB7FE), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@46f8f072])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@46f8f072])
    SignalFlowHasStarted(flowId=[f25e02b4-a5c6-4094-89fc-3c5464512155])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3166186064908770796), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-3192059079410668575), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3166186064908770796-2691110517599582935-0-0), senderUUID=edb2845e-48ad-40df-95d6-38897c2cea7e))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3192059079410668575): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3166186064908770796)), errors=[], deduplicationSeed=D-3166186064908770796-2691110517599582935)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@46f8f072]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.698Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.703Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.728Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))]), maySkipCheckpoint=false, fiber=CB260642A8CA8660B8DA40D35838D27173D9FCD289DE254BBDF275ADC24D869A, )
  Actions: 
    PersistCheckpoint(id=[f25e02b4-a5c6-4094-89fc-3c5464512155], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Invocation, sessionId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3192059079410668575)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3166186064908770796)), errors=[], deduplicationSeed=D-3166186064908770796-2691110517599582935)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))]), frozenFiber=CB260642A8CA8660B8DA40D35838D27173D9FCD289DE254BBDF275ADC24D869A), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=CBCC6B5474B7F94464091E9362B6A8FF8F2C2E76876189DA88BE8C1CA58BB7FE)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))]), frozenFiber=CB260642A8CA8660B8DA40D35838D27173D9FCD289DE254BBDF275ADC24D869A)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.732Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3192059079410668575).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.752Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.782Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=A91F04EC1B5E146DA0D1A4A18961A68CC180847BDCFBFCE6DD959310D89A466E, )
  Actions: 
    PersistCheckpoint(id=[f25e02b4-a5c6-4094-89fc-3c5464512155], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Invocation, sessionId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3192059079410668575)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3166186064908770796)), errors=[], deduplicationSeed=D-3166186064908770796-2691110517599582935)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=A91F04EC1B5E146DA0D1A4A18961A68CC180847BDCFBFCE6DD959310D89A466E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    CB260642A8CA8660B8DA40D35838D27173D9FCD289DE254BBDF275ADC24D869A
    A91F04EC1B5E146DA0D1A4A18961A68CC180847BDCFBFCE6DD959310D89A466E
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.789Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3166186064908770796), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3166186064908770796-2691110517599582935-2-0), senderUUID=edb2845e-48ad-40df-95d6-38897c2cea7e))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.792Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.803Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.809Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))]), maySkipCheckpoint=false, fiber=EB441005669D62A15892942ECD5DCA4FBBF144DCEDACD15A436EF124AD1CF831, )
  Actions: 
    PersistCheckpoint(id=[f25e02b4-a5c6-4094-89fc-3c5464512155], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Invocation, sessionId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3192059079410668575)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3166186064908770796)), errors=[], deduplicationSeed=D-3166186064908770796-2691110517599582935)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))]), frozenFiber=EB441005669D62A15892942ECD5DCA4FBBF144DCEDACD15A436EF124AD1CF831), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))])
checkpoint.flowState.frozenFiber.hash: 
    A91F04EC1B5E146DA0D1A4A18961A68CC180847BDCFBFCE6DD959310D89A466E
    EB441005669D62A15892942ECD5DCA4FBBF144DCEDACD15A436EF124AD1CF831
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.810Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.867Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3192059079410668575), payload=net.corda.node.services.statemachine.EndSessionMessage@441debdf), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1429c4fd, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3192059079410668575).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=3166186064908770796))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1429c4fd]


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.868Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3192059079410668575) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.868Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false)]


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.878Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3192059079410668575) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2421315139425352493, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3192059079410668575) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.883Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.884Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=f25e02b4-a5c6-4094-89fc-3c5464512155, invocation_id=06941914-aed8-48da-b55c-c8c00a18053b, invocation_timestamp=2020-01-20T01:12:22.655Z, origin=O=Mock Company 1, L=London, C=GB, session_id=06941914-aed8-48da-b55c-c8c00a18053b, session_timestamp=2020-01-20T01:12:22.655Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[WARN ] 2020-01-20T01:12:22,906Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f25e02b4-a5c6-4094-89fc-3c5464512155] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=f25e02b4-a5c6-4094-89fc-3c5464512155, invocation_id=06941914-aed8-48da-b55c-c8c00a18053b, invocation_timestamp=2020-01-20T01:12:22.655Z, origin=O=Mock Company 1, L=London, C=GB, session_id=06941914-aed8-48da-b55c-c8c00a18053b, session_timestamp=2020-01-20T01:12:22.655Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3192059079410668575) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2020-01-20T01:12:22,909Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=f25e02b4-a5c6-4094-89fc-3c5464512155, invocation_id=06941914-aed8-48da-b55c-c8c00a18053b, invocation_timestamp=2020-01-20T01:12:22.655Z, origin=O=Mock Company 1, L=London, C=GB, session_id=06941914-aed8-48da-b55c-c8c00a18053b, session_timestamp=2020-01-20T01:12:22.655Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[WARN ] 2020-01-20T01:12:22,954Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f25e02b4-a5c6-4094-89fc-3c5464512155] errored, dumping all transitions:

 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.694Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[f25e02b4-a5c6-4094-89fc-3c5464512155], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Invocation, sessionId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=CBCC6B5474B7F94464091E9362B6A8FF8F2C2E76876189DA88BE8C1CA58BB7FE), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@46f8f072])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@46f8f072])
    SignalFlowHasStarted(flowId=[f25e02b4-a5c6-4094-89fc-3c5464512155])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3166186064908770796), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-3192059079410668575), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3166186064908770796-2691110517599582935-0-0), senderUUID=edb2845e-48ad-40df-95d6-38897c2cea7e))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3192059079410668575): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3166186064908770796)), errors=[], deduplicationSeed=D-3166186064908770796-2691110517599582935)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@46f8f072]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.698Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.703Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.728Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))]), maySkipCheckpoint=false, fiber=CB260642A8CA8660B8DA40D35838D27173D9FCD289DE254BBDF275ADC24D869A, )
  Actions: 
    PersistCheckpoint(id=[f25e02b4-a5c6-4094-89fc-3c5464512155], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Invocation, sessionId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3192059079410668575)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3166186064908770796)), errors=[], deduplicationSeed=D-3166186064908770796-2691110517599582935)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))]), frozenFiber=CB260642A8CA8660B8DA40D35838D27173D9FCD289DE254BBDF275ADC24D869A), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=CBCC6B5474B7F94464091E9362B6A8FF8F2C2E76876189DA88BE8C1CA58BB7FE)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))]), frozenFiber=CB260642A8CA8660B8DA40D35838D27173D9FCD289DE254BBDF275ADC24D869A)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.732Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3192059079410668575).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.752Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.782Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=A91F04EC1B5E146DA0D1A4A18961A68CC180847BDCFBFCE6DD959310D89A466E, )
  Actions: 
    PersistCheckpoint(id=[f25e02b4-a5c6-4094-89fc-3c5464512155], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Invocation, sessionId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3192059079410668575)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3166186064908770796)), errors=[], deduplicationSeed=D-3166186064908770796-2691110517599582935)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=A91F04EC1B5E146DA0D1A4A18961A68CC180847BDCFBFCE6DD959310D89A466E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    CB260642A8CA8660B8DA40D35838D27173D9FCD289DE254BBDF275ADC24D869A
    A91F04EC1B5E146DA0D1A4A18961A68CC180847BDCFBFCE6DD959310D89A466E
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.789Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3166186064908770796), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3166186064908770796-2691110517599582935-2-0), senderUUID=edb2845e-48ad-40df-95d6-38897c2cea7e))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.792Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.803Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.809Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))]), maySkipCheckpoint=false, fiber=EB441005669D62A15892942ECD5DCA4FBBF144DCEDACD15A436EF124AD1CF831, )
  Actions: 
    PersistCheckpoint(id=[f25e02b4-a5c6-4094-89fc-3c5464512155], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Invocation, sessionId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3192059079410668575)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3166186064908770796)), errors=[], deduplicationSeed=D-3166186064908770796-2691110517599582935)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))]), frozenFiber=EB441005669D62A15892942ECD5DCA4FBBF144DCEDACD15A436EF124AD1CF831), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))])
checkpoint.flowState.frozenFiber.hash: 
    A91F04EC1B5E146DA0D1A4A18961A68CC180847BDCFBFCE6DD959310D89A466E
    EB441005669D62A15892942ECD5DCA4FBBF144DCEDACD15A436EF124AD1CF831
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.810Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.867Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3192059079410668575), payload=net.corda.node.services.statemachine.EndSessionMessage@441debdf), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1429c4fd, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3192059079410668575).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=3166186064908770796))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1429c4fd]


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.868Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3192059079410668575) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.868Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false)]


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.878Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3192059079410668575) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2421315139425352493, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3192059079410668575) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.883Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.884Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [f25e02b4-a5c6-4094-89fc-3c5464512155] ---
  Timestamp: 2020-01-20T01:12:22.947Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=2421315139425352493)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-3166186064908770796-2691110517599582935)], senderUUID=edb2845e-48ad-40df-95d6-38897c2cea7e)
    CreateTransaction
    RemoveCheckpoint(id=[f25e02b4-a5c6-4094-89fc-3c5464512155])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1429c4fd])
    ReleaseSoftLocks(uuid=f25e02b4-a5c6-4094-89fc-3c5464512155)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1429c4fd])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-3192059079410668575)])
    RemoveFlow(flowId=[f25e02b4-a5c6-4094-89fc-3c5464512155], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=2421315139425352493, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3192059079410668575) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Invocation, sessionId=06941914-aed8-48da-b55c-c8c00a18053b, timestamp: 2020-01-20T01:12:22.655Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3192059079410668575)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-3166186064908770796-2691110517599582935)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordappp, corDappHash=15364D6406D0EFE6DE5B976F4A65DF81BD5D7D747F4FBD32436A4BD5F71D8579), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3192059079410668575))]), frozenFiber=EB441005669D62A15892942ECD5DCA4FBBF144DCEDACD15A436EF124AD1CF831), errorState=Errored(errors=[FlowError(errorId=2421315139425352493, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3192059079410668575) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@6e8fe6da, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=edb2845e-48ad-40df-95d6-38897c2cea7e))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1429c4fd]
    []
 {fiber-id=10000002, flow-id=f25e02b4-a5c6-4094-89fc-3c5464512155, invocation_id=06941914-aed8-48da-b55c-c8c00a18053b, invocation_timestamp=2020-01-20T01:12:22.655Z, origin=O=Mock Company 1, L=London, C=GB, session_id=06941914-aed8-48da-b55c-c8c00a18053b, session_timestamp=2020-01-20T01:12:22.655Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
[WARN ] 2020-01-20T01:12:22,954Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f25e02b4-a5c6-4094-89fc-3c5464512155] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=f25e02b4-a5c6-4094-89fc-3c5464512155, invocation_id=06941914-aed8-48da-b55c-c8c00a18053b, invocation_timestamp=2020-01-20T01:12:22.655Z, origin=O=Mock Company 1, L=London, C=GB, session_id=06941914-aed8-48da-b55c-c8c00a18053b, session_timestamp=2020-01-20T01:12:22.655Z, thread-id=132, tx_id=F49A699B2D7179B64F9D70D536303699853D9223A929459E0C9D2C4A2DB44428}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3192059079410668575) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:22) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2020-01-20T01:14:26,365Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\git\bootcamp-cordappp ... {}
[INFO ] 2020-01-20T01:14:35,727Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-011417.910\nodes\0\cordapps] {}
[INFO ] 2020-01-20T01:14:35,734Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011417.910/nodes/0/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:14:35,773Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011417.910/nodes/0/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:14:36,078Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:14:36,976Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:14:37,097Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:14:37,098Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:14:37,099Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:14:37,303Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:14:17.824Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:14:43,551Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:14:43,556Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-011417.910\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:14:43,556Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:14:43,559Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:14:43,692Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:14:43,708Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:14:46,620Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:14:47,615Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:14:47,701Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:14:47,730Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:14:47,730Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:14:48,106Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:14:48,120Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:14:48,121Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482888120) {}
[INFO ] 2020-01-20T01:14:48,128Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:14:48,348Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482888120) {}
[INFO ] 2020-01-20T01:14:48,449Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:14:48,478Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482888120) {}
[INFO ] 2020-01-20T01:14:48,517Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:14:49,114Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=257AC459E48DF683BECC64948BBAA69CBEA668C91414E3AE066425E3C143B9B1 uploader=app filename=null {}
[INFO ] 2020-01-20T01:14:49,124Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-20T01:14:49,134Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-20T01:14:49,679Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482888120) {}
[INFO ] 2020-01-20T01:14:49,705Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482888120) {}
[INFO ] 2020-01-20T01:14:49,707Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:14:49,708Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482888120) {}
[INFO ] 2020-01-20T01:14:49,708Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:14:49,926Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-011417.910\nodes\1\cordapps] {}
[INFO ] 2020-01-20T01:14:49,927Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011417.910/nodes/1/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:14:49,927Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011417.910/nodes/1/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:14:49,955Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:14:49,970Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:14:50,045Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:14:50,045Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:14:50,045Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:14:50,051Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:14:17.824Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:14:50,979Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:14:50,984Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-011417.910\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:14:50,984Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:14:50,986Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:14:50,989Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:14:50,990Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:14:51,119Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:14:51,133Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:14:51,137Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:14:51,138Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:14:51,177Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:14:51,177Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:14:51,336Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:14:51,343Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:14:51,343Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482891343) {}
[INFO ] 2020-01-20T01:14:51,346Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:14:51,357Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482891343) {}
[INFO ] 2020-01-20T01:14:51,465Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:14:51,471Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482891343) {}
[INFO ] 2020-01-20T01:14:51,478Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:14:51,675Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=257AC459E48DF683BECC64948BBAA69CBEA668C91414E3AE066425E3C143B9B1 uploader=app filename=null {}
[INFO ] 2020-01-20T01:14:51,686Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482891343) {}
[INFO ] 2020-01-20T01:14:51,689Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482888120) {}
[INFO ] 2020-01-20T01:14:51,692Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:14:51,705Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482891343) {}
[INFO ] 2020-01-20T01:14:51,707Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:14:51,719Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482891343) {}
[INFO ] 2020-01-20T01:14:51,719Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:14:51,719Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482891343) {}
[INFO ] 2020-01-20T01:14:51,719Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:14:51,874Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-011417.910\nodes\2\cordapps] {}
[INFO ] 2020-01-20T01:14:51,875Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011417.910/nodes/2/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:14:51,875Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011417.910/nodes/2/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:14:51,902Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:14:51,917Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:14:51,992Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:14:51,992Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:14:51,992Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:14:51,999Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:14:17.824Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:14:52,654Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:14:52,658Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-011417.910\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:14:52,658Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:14:52,660Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:14:52,664Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:14:52,664Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:14:52,768Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:14:52,782Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:14:52,786Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:14:52,787Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:14:52,827Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:14:52,827Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:14:52,980Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:14:52,987Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:14:52,987Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482892987) {}
[INFO ] 2020-01-20T01:14:52,989Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:14:52,998Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482892987) {}
[INFO ] 2020-01-20T01:14:53,022Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:14:53,027Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482892987) {}
[INFO ] 2020-01-20T01:14:53,034Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:14:53,240Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=257AC459E48DF683BECC64948BBAA69CBEA668C91414E3AE066425E3C143B9B1 uploader=app filename=null {}
[INFO ] 2020-01-20T01:14:53,250Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482892987) {}
[INFO ] 2020-01-20T01:14:53,254Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482888120) {}
[INFO ] 2020-01-20T01:14:53,259Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:14:53,271Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482892987) {}
[INFO ] 2020-01-20T01:14:53,273Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:14:53,285Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482891343) {}
[INFO ] 2020-01-20T01:14:53,287Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:14:53,299Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482892987) {}
[INFO ] 2020-01-20T01:14:53,301Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:14:53,314Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482892987) {}
[INFO ] 2020-01-20T01:14:53,314Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:14:53,314Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482892987) {}
[INFO ] 2020-01-20T01:14:53,314Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-01-20T01:14:53,647Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131}
[WARN ] 2020-01-20T01:14:53,678Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131}
[WARN ] 2020-01-20T01:14:53,678Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131}
[WARN ] 2020-01-20T01:14:53,683Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131}
[WARN ] 2020-01-20T01:14:56,031Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131}
[WARN ] 2020-01-20T01:14:56,065Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131}
[WARN ] 2020-01-20T01:14:56,094Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131}
[WARN ] 2020-01-20T01:14:56,103Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131}
[WARN ] 2020-01-20T01:14:56,267Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131}
[WARN ] 2020-01-20T01:14:56,287Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131}
[INFO ] 2020-01-20T01:14:56,551Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=85cfbc0a-11dc-495c-a065-1777da3f49cd, invocation_id=52b506f4-abd8-48c4-8875-02ea96863461, invocation_timestamp=2020-01-20T01:14:56.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=52b506f4-abd8-48c4-8875-02ea96863461, session_timestamp=2020-01-20T01:14:56.470Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[WARN ] 2020-01-20T01:14:56,563Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=85cfbc0a-11dc-495c-a065-1777da3f49cd, invocation_id=52b506f4-abd8-48c4-8875-02ea96863461, invocation_timestamp=2020-01-20T01:14:56.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=52b506f4-abd8-48c4-8875-02ea96863461, session_timestamp=2020-01-20T01:14:56.470Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[INFO ] 2020-01-20T01:14:56,606Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=85cfbc0a-11dc-495c-a065-1777da3f49cd, invocation_id=52b506f4-abd8-48c4-8875-02ea96863461, invocation_timestamp=2020-01-20T01:14:56.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=52b506f4-abd8-48c4-8875-02ea96863461, session_timestamp=2020-01-20T01:14:56.470Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[WARN ] 2020-01-20T01:14:56,615Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=85cfbc0a-11dc-495c-a065-1777da3f49cd, invocation_id=52b506f4-abd8-48c4-8875-02ea96863461, invocation_timestamp=2020-01-20T01:14:56.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=52b506f4-abd8-48c4-8875-02ea96863461, session_timestamp=2020-01-20T01:14:56.470Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[WARN ] 2020-01-20T01:14:56,667Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=85cfbc0a-11dc-495c-a065-1777da3f49cd, invocation_id=52b506f4-abd8-48c4-8875-02ea96863461, invocation_timestamp=2020-01-20T01:14:56.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=52b506f4-abd8-48c4-8875-02ea96863461, session_timestamp=2020-01-20T01:14:56.470Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[WARN ] 2020-01-20T01:14:56,680Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=85cfbc0a-11dc-495c-a065-1777da3f49cd, invocation_id=52b506f4-abd8-48c4-8875-02ea96863461, invocation_timestamp=2020-01-20T01:14:56.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=52b506f4-abd8-48c4-8875-02ea96863461, session_timestamp=2020-01-20T01:14:56.470Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[WARN ] 2020-01-20T01:14:56,714Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[INFO ] 2020-01-20T01:14:56,715Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[INFO ] 2020-01-20T01:14:56,715Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[INFO ] 2020-01-20T01:14:56,760Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[INFO ] 2020-01-20T01:14:56,793Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=85cfbc0a-11dc-495c-a065-1777da3f49cd, invocation_id=52b506f4-abd8-48c4-8875-02ea96863461, invocation_timestamp=2020-01-20T01:14:56.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=52b506f4-abd8-48c4-8875-02ea96863461, session_timestamp=2020-01-20T01:14:56.470Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[WARN ] 2020-01-20T01:14:56,793Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=85cfbc0a-11dc-495c-a065-1777da3f49cd, invocation_id=52b506f4-abd8-48c4-8875-02ea96863461, invocation_timestamp=2020-01-20T01:14:56.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=52b506f4-abd8-48c4-8875-02ea96863461, session_timestamp=2020-01-20T01:14:56.470Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[INFO ] 2020-01-20T01:14:56,806Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=85cfbc0a-11dc-495c-a065-1777da3f49cd, invocation_id=52b506f4-abd8-48c4-8875-02ea96863461, invocation_timestamp=2020-01-20T01:14:56.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=52b506f4-abd8-48c4-8875-02ea96863461, session_timestamp=2020-01-20T01:14:56.470Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[WARN ] 2020-01-20T01:14:56,814Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=85cfbc0a-11dc-495c-a065-1777da3f49cd, invocation_id=52b506f4-abd8-48c4-8875-02ea96863461, invocation_timestamp=2020-01-20T01:14:56.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=52b506f4-abd8-48c4-8875-02ea96863461, session_timestamp=2020-01-20T01:14:56.470Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[INFO ] 2020-01-20T01:14:56,814Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=85cfbc0a-11dc-495c-a065-1777da3f49cd, invocation_id=52b506f4-abd8-48c4-8875-02ea96863461, invocation_timestamp=2020-01-20T01:14:56.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=52b506f4-abd8-48c4-8875-02ea96863461, session_timestamp=2020-01-20T01:14:56.470Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[WARN ] 2020-01-20T01:14:56,821Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=85cfbc0a-11dc-495c-a065-1777da3f49cd, invocation_id=52b506f4-abd8-48c4-8875-02ea96863461, invocation_timestamp=2020-01-20T01:14:56.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=52b506f4-abd8-48c4-8875-02ea96863461, session_timestamp=2020-01-20T01:14:56.470Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[INFO ] 2020-01-20T01:14:56,822Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=85cfbc0a-11dc-495c-a065-1777da3f49cd, invocation_id=52b506f4-abd8-48c4-8875-02ea96863461, invocation_timestamp=2020-01-20T01:14:56.470Z, origin=O=Mock Company 1, L=London, C=GB, session_id=52b506f4-abd8-48c4-8875-02ea96863461, session_timestamp=2020-01-20T01:14:56.470Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[INFO ] 2020-01-20T01:14:56,866Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[INFO ] 2020-01-20T01:14:56,866Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=18a52b7a-bfef-4a36-a0b2-282ee512dd1f, invocation_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, invocation_timestamp=2020-01-20T01:14:53.361Z, origin=Only For Testing, session_id=56ae904e-cfcb-4ad9-9e79-b3adca6319fa, session_timestamp=2020-01-20T01:14:53.361Z, thread-id=131, tx_id=1F98DB02BB8E81A64FED212269228DCEC1C8B28D5D068DCE56651AECD1A006E0}
[INFO ] 2020-01-20T01:15:33,553Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\BRUNOFERREIRACARDOSO\git\bootcamp-cordappp ... {}
[INFO ] 2020-01-20T01:15:41,012Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-011525.419\nodes\0\cordapps] {}
[INFO ] 2020-01-20T01:15:41,022Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011525.419/nodes/0/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:15:41,062Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011525.419/nodes/0/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:15:41,378Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:15:42,250Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:15:42,360Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:15:42,361Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:15:42,363Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:15:42,563Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:15:25.323Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:15:48,463Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:15:48,485Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-011525.419\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:15:48,486Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:15:48,489Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:15:48,586Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:15:48,593Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:15:51,618Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:15:52,588Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:15:52,673Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:15:52,701Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:15:52,701Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:15:53,090Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-01-20T01:15:53,104Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:15:53,105Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482953104) {}
[INFO ] 2020-01-20T01:15:53,113Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:15:53,330Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482953104) {}
[INFO ] 2020-01-20T01:15:53,418Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:15:53,445Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482953104) {}
[INFO ] 2020-01-20T01:15:53,486Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:15:53,674Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=257AC459E48DF683BECC64948BBAA69CBEA668C91414E3AE066425E3C143B9B1 uploader=app filename=null {}
[INFO ] 2020-01-20T01:15:53,679Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-01-20T01:15:53,684Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2020-01-20T01:15:54,182Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482953104) {}
[INFO ] 2020-01-20T01:15:54,208Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482953104) {}
[INFO ] 2020-01-20T01:15:54,211Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:15:54,211Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482953104) {}
[INFO ] 2020-01-20T01:15:54,211Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:15:54,239Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-011525.419\nodes\1\cordapps] {}
[INFO ] 2020-01-20T01:15:54,243Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011525.419/nodes/1/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:15:54,244Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011525.419/nodes/1/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:15:54,447Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:15:54,467Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:15:54,540Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:15:54,541Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:15:54,541Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:15:54,546Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:15:25.323Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:15:55,381Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:15:55,384Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-011525.419\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:15:55,385Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:15:55,387Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:15:55,390Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:15:55,391Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:15:55,508Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:15:55,523Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:15:55,526Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:15:55,527Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:15:55,572Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:15:55,573Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:15:55,731Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:15:55,738Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:15:55,738Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482955738) {}
[INFO ] 2020-01-20T01:15:55,741Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:15:55,750Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482955738) {}
[INFO ] 2020-01-20T01:15:55,769Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:15:55,774Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482955738) {}
[INFO ] 2020-01-20T01:15:55,781Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:15:55,980Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=257AC459E48DF683BECC64948BBAA69CBEA668C91414E3AE066425E3C143B9B1 uploader=app filename=null {}
[INFO ] 2020-01-20T01:15:55,989Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482955738) {}
[INFO ] 2020-01-20T01:15:55,993Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482953104) {}
[INFO ] 2020-01-20T01:15:55,997Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:15:56,011Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482955738) {}
[INFO ] 2020-01-20T01:15:56,012Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:15:56,025Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482955738) {}
[INFO ] 2020-01-20T01:15:56,025Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:15:56,025Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482955738) {}
[INFO ] 2020-01-20T01:15:56,025Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:15:56,033Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20200120-011525.419\nodes\2\cordapps] {}
[INFO ] 2020-01-20T01:15:56,033Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011525.419/nodes/2/cordapps/bootcamp-cordappp.jar, rootPackageName=null) {}
[INFO ] 2020-01-20T01:15:56,034Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/BRUNOFERREIRACARDOSO/git/bootcamp-cordappp/build/mock-network/20200120-011525.419/nodes/2/cordapps/bootcamp-cordappp.jar {}
[INFO ] 2020-01-20T01:15:56,222Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2020-01-20T01:15:56,236Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2020-01-20T01:15:56,301Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:15:56,302Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponse (version 1) {}
[INFO ] 2020-01-20T01:15:56,302Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-01-20T01:15:56,309Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-01-20T01:15:25.323Z
      epoch=1
  } {}
[INFO ] 2020-01-20T01:15:56,982Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2020-01-20T01:15:56,985Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200120-011525.419\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2020-01-20T01:15:56,985Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2020-01-20T01:15:56,987Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2020-01-20T01:15:56,991Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:15:56,991Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:15:57,104Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2020-01-20T01:15:57,116Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2020-01-20T01:15:57,120Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2020-01-20T01:15:57,121Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-01-20T01:15:57,158Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:15:57,159Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:15:57,315Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-01-20T01:15:57,323Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-01-20T01:15:57,323Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482957323) {}
[INFO ] 2020-01-20T01:15:57,325Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:15:57,334Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482957323) {}
[INFO ] 2020-01-20T01:15:57,354Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-01-20T01:15:57,359Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482957323) {}
[INFO ] 2020-01-20T01:15:57,367Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:15:57,569Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=257AC459E48DF683BECC64948BBAA69CBEA668C91414E3AE066425E3C143B9B1 uploader=app filename=null {}
[INFO ] 2020-01-20T01:15:57,580Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482957323) {}
[INFO ] 2020-01-20T01:15:57,584Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1579482953104) {}
[INFO ] 2020-01-20T01:15:57,586Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:15:57,600Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482957323) {}
[INFO ] 2020-01-20T01:15:57,602Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:15:57,616Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1579482955738) {}
[INFO ] 2020-01-20T01:15:57,618Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:15:57,631Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482957323) {}
[INFO ] 2020-01-20T01:15:57,633Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2020-01-20T01:15:57,646Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482957323) {}
[INFO ] 2020-01-20T01:15:57,646Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-01-20T01:15:57,646Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1579482957323) {}
[INFO ] 2020-01-20T01:15:57,646Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-01-20T01:15:57,976Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133}
[WARN ] 2020-01-20T01:15:58,002Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133}
[WARN ] 2020-01-20T01:15:58,002Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133}
[WARN ] 2020-01-20T01:15:58,006Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133}
[WARN ] 2020-01-20T01:16:00,423Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133}
[WARN ] 2020-01-20T01:16:00,461Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133}
[WARN ] 2020-01-20T01:16:00,491Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133}
[WARN ] 2020-01-20T01:16:00,500Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133}
[WARN ] 2020-01-20T01:16:00,671Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133}
[WARN ] 2020-01-20T01:16:00,690Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133}
[INFO ] 2020-01-20T01:16:00,960Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=f0ae1ca3-53bc-485e-b4e8-250f1b165922, invocation_id=b334bbd8-2acf-4732-87af-9da72897e02a, invocation_timestamp=2020-01-20T01:16:00.879Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b334bbd8-2acf-4732-87af-9da72897e02a, session_timestamp=2020-01-20T01:16:00.879Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[WARN ] 2020-01-20T01:16:00,972Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=f0ae1ca3-53bc-485e-b4e8-250f1b165922, invocation_id=b334bbd8-2acf-4732-87af-9da72897e02a, invocation_timestamp=2020-01-20T01:16:00.879Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b334bbd8-2acf-4732-87af-9da72897e02a, session_timestamp=2020-01-20T01:16:00.879Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[INFO ] 2020-01-20T01:16:01,012Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=f0ae1ca3-53bc-485e-b4e8-250f1b165922, invocation_id=b334bbd8-2acf-4732-87af-9da72897e02a, invocation_timestamp=2020-01-20T01:16:00.879Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b334bbd8-2acf-4732-87af-9da72897e02a, session_timestamp=2020-01-20T01:16:00.879Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[WARN ] 2020-01-20T01:16:01,021Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=f0ae1ca3-53bc-485e-b4e8-250f1b165922, invocation_id=b334bbd8-2acf-4732-87af-9da72897e02a, invocation_timestamp=2020-01-20T01:16:00.879Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b334bbd8-2acf-4732-87af-9da72897e02a, session_timestamp=2020-01-20T01:16:00.879Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[WARN ] 2020-01-20T01:16:01,074Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=f0ae1ca3-53bc-485e-b4e8-250f1b165922, invocation_id=b334bbd8-2acf-4732-87af-9da72897e02a, invocation_timestamp=2020-01-20T01:16:00.879Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b334bbd8-2acf-4732-87af-9da72897e02a, session_timestamp=2020-01-20T01:16:00.879Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[WARN ] 2020-01-20T01:16:01,086Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=f0ae1ca3-53bc-485e-b4e8-250f1b165922, invocation_id=b334bbd8-2acf-4732-87af-9da72897e02a, invocation_timestamp=2020-01-20T01:16:00.879Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b334bbd8-2acf-4732-87af-9da72897e02a, session_timestamp=2020-01-20T01:16:00.879Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[WARN ] 2020-01-20T01:16:01,122Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[INFO ] 2020-01-20T01:16:01,123Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[INFO ] 2020-01-20T01:16:01,123Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[INFO ] 2020-01-20T01:16:01,166Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[INFO ] 2020-01-20T01:16:01,195Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=f0ae1ca3-53bc-485e-b4e8-250f1b165922, invocation_id=b334bbd8-2acf-4732-87af-9da72897e02a, invocation_timestamp=2020-01-20T01:16:00.879Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b334bbd8-2acf-4732-87af-9da72897e02a, session_timestamp=2020-01-20T01:16:00.879Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[WARN ] 2020-01-20T01:16:01,195Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=f0ae1ca3-53bc-485e-b4e8-250f1b165922, invocation_id=b334bbd8-2acf-4732-87af-9da72897e02a, invocation_timestamp=2020-01-20T01:16:00.879Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b334bbd8-2acf-4732-87af-9da72897e02a, session_timestamp=2020-01-20T01:16:00.879Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[INFO ] 2020-01-20T01:16:01,207Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=f0ae1ca3-53bc-485e-b4e8-250f1b165922, invocation_id=b334bbd8-2acf-4732-87af-9da72897e02a, invocation_timestamp=2020-01-20T01:16:00.879Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b334bbd8-2acf-4732-87af-9da72897e02a, session_timestamp=2020-01-20T01:16:00.879Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[WARN ] 2020-01-20T01:16:01,214Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=f0ae1ca3-53bc-485e-b4e8-250f1b165922, invocation_id=b334bbd8-2acf-4732-87af-9da72897e02a, invocation_timestamp=2020-01-20T01:16:00.879Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b334bbd8-2acf-4732-87af-9da72897e02a, session_timestamp=2020-01-20T01:16:00.879Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[INFO ] 2020-01-20T01:16:01,214Z [Mock network] corda.flow.call - Successfully received fully signed tx. Sending it to the vault for processing. {fiber-id=10000002, flow-id=f0ae1ca3-53bc-485e-b4e8-250f1b165922, invocation_id=b334bbd8-2acf-4732-87af-9da72897e02a, invocation_timestamp=2020-01-20T01:16:00.879Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b334bbd8-2acf-4732-87af-9da72897e02a, session_timestamp=2020-01-20T01:16:00.879Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[WARN ] 2020-01-20T01:16:01,223Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=f0ae1ca3-53bc-485e-b4e8-250f1b165922, invocation_id=b334bbd8-2acf-4732-87af-9da72897e02a, invocation_timestamp=2020-01-20T01:16:00.879Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b334bbd8-2acf-4732-87af-9da72897e02a, session_timestamp=2020-01-20T01:16:00.879Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[INFO ] 2020-01-20T01:16:01,226Z [Mock network] corda.flow.call - Successfully recorded received transaction locally. {fiber-id=10000002, flow-id=f0ae1ca3-53bc-485e-b4e8-250f1b165922, invocation_id=b334bbd8-2acf-4732-87af-9da72897e02a, invocation_timestamp=2020-01-20T01:16:00.879Z, origin=O=Mock Company 1, L=London, C=GB, session_id=b334bbd8-2acf-4732-87af-9da72897e02a, session_timestamp=2020-01-20T01:16:00.879Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[INFO ] 2020-01-20T01:16:01,275Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
[INFO ] 2020-01-20T01:16:01,275Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5c746757-0f14-416d-ba38-c5fa01bac22f, invocation_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, invocation_timestamp=2020-01-20T01:15:57.685Z, origin=Only For Testing, session_id=8b7710f7-1dda-4b50-87f4-9b68870d28f5, session_timestamp=2020-01-20T01:15:57.685Z, thread-id=133, tx_id=77F99E6793C709CA2C8CCD005BE9664195F5618DD48CCBBFB5C07E9C9612F533}
